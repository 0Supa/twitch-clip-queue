{"version":3,"sources":["components/ForkMeOnGithub.tsx","pages/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx","store/user.ts","common/analytics.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/StreamableApi.ts","services/providers/streamable.ts","services/ClipFinder.ts","services/TwitchAuth.ts","common/utils.ts","services/TwitchChat.ts","common/commands.ts","store/queue.ts","store/helpers.ts","common/logging.ts"],"names":["ForkMeOnGithub","href","target","rel","title","className","xmlns","width","height","viewBox","fill","d","style","WebkitTransformOrigin","transformOrigin","HomePage","React","lazy","QueuePage","Routes","loggedIn","useState","isLoggedIn","get","fallback","basename","process","path","to","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TwitchAuth","processAuth","ReactDOM","render","StrictMode","document","getElementById","createState","accessToken","idToken","userName","userChannel","createPersistentState","logIn","auth","id","username","set","channel","trace","toLowerCase","currentDate","Date","getDay","currentClip","provider","thumbnailUrl","submitter","displayName","submitters","Array","game","getDate","getMonth","logOut","a","token","revokeToken","changeChannel","TwitchChat","leaveChannel","joinChannel","logger","createLogger","umami","window","eventQueue","value","type","debug","push","e","shift","trackView","trackEvent","TwitchApiClient","axios","create","baseURL","headers","TwitchApi","getClip","Authorization","data","getVideo","getGame","gamesDictionary","getGameName","dict","name","providerName","canHandle","url","uri","URL","hostname","endsWith","pathname","includes","tryGetClip","getInfo","fromMemory","getMemorizedClip","clipInfo","broadcaster_name","game_id","thumbnail_url","split","created_at","videoUrl","timestamp","error","idStart","lastIndexOf","slice","TwitchClipProvider","startTime","user_name","replace","searchParams","TwitchVodProvider","YoutubeApi","undefined","author_name","YouTubeProvider","StreamableApi","StreamableProvider","enabledProviders","providers","filter","ClipFinder","findByUrl","clip","hash","now","toString","getInfoByUrl","TWITCH_CLIENT_ID","getLoginUrl","encodeURI","redirectToLogin","location","assign","authInfo","substring","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","base64","jsonPayload","atob","map","c","charCodeAt","join","JSON","parse","parseJwt","preferred_username","post","getUrlFromMessage","message","urlStart","indexOf","urlEnd","client","commands","queuenext","nextClip","queueclose","acceptClips","queueopen","queueclear","clearQueue","queuepurgememory","clearMemory","queueautoplay","val","toggleAutoplay","queuesoftlimit","limit","Number","isInteger","setSoftClipLimit","queueremove","startsWith","removeClip","handleTimeout","clipQueue","some","forEach","length","memory","clipMemory","find","same","none","disconnect","info","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","warn","identity","password","connection","reconnect","secure","on","reason","_channel","userstate","self","mod","badges","substr","commandName","args","command","acceptingClips","addClip","handleMessage","_username","handleMessageDeleted","catch","setTimeout","part","softClipLimit","softClipCount","autoplay","useReactPlayer","autoplayTimeoutHandle","addClipToMemory","stringify","queuedState","queued","queue","sort","b","uncount","next","Math","max","cancelDelayedNextClip","selectCurrentClip","getQueuedClip","index","findIndex","accept","reloadClip","ap","delayedNextClip","timeoutHandle","clearTimeout","initialValue","state","attach","Persistence","LogLevel","globalLogLevel","setLogLevel","level","ConsoleLogger","this","log","messageWithName","console","__setLogLevel"],"mappings":"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","file":"static/js/main.43ce09b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface ForkMeOnGithubProps {\r\n  href: string;\r\n}\r\n\r\nfunction ForkMeOnGithub({ href }: ForkMeOnGithubProps) {\r\n  return (\r\n    <a href={href} target=\"_blank\" rel=\"noreferrer\" title=\"Fork me on GitHub\" className=\"opacity-40 hover:opacity-75\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"52\"\r\n        height=\"52\"\r\n        viewBox=\"0 0 250 250\"\r\n        className=\"absolute top-0 right-0\"\r\n        fill=\"#1f2937\"\r\n      >\r\n        <path d=\"M0 0l115 115h15l12 27 108 108V0z\" fill=\"#000\" />\r\n        <path\r\n          d=\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\"\r\n          style={{ WebkitTransformOrigin: '130px 106px', transformOrigin: '130px 106px' }}\r\n        />\r\n        <path d=\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\" />\r\n      </svg>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default ForkMeOnGithub;\r\n","import { useState } from '@hookstate/core';\nimport React from 'react';\nimport { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn } from '../store/user';\n\nconst HomePage = React.lazy(() => import('./Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./Queue/QueuePage'));\n\nfunction Routes() {\n  const loggedIn = useState(isLoggedIn).get();\n\n  return (\n    <Suspense fallback={<div></div>}>\n      <Router basename={process.env.REACT_APP_BASEPATH}>\n        <Switch>\n          <Route path=\"/queue\">\n            {loggedIn ? <QueuePage /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact={true} path=\"/\">\n            {!loggedIn ? <HomePage /> : <Redirect to=\"/queue\" />}\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\r\nimport ForkMeOnGithub from './components/ForkMeOnGithub';\r\nimport Routes from './pages/Routes';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <ForkMeOnGithub href=\"https://github.com/JakeMiki/twitch-clip-queue\" />\r\n      <Routes />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nTwitchAuth.processAuth();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { createState } from \"@hookstate/core\";\nimport { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\nimport { currentClip } from \"./queue\";\n\nexport const isLoggedIn = createState<boolean>(false);\n\nexport const accessToken = createState<string | null>(null);\nexport const idToken = createState<string | null>(null);\n\nexport const userName = createState<string | null>(null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n\n  let channel = userChannel.get();\n\n  if (!channel) {\n    userChannel.set(username);\n    channel = username;\n  }\n\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n\n  // temp easter egg\n  if (channel?.toLowerCase() === 'wolfabelle') {\n    const currentDate = new Date();\n    if (currentDate.getDay() === 5) {\n      currentClip.set({\n        title: 'ITS FRIDAY THEN, ITS SATURDAY, SUNDAY! GO MUFASA!',\n        channel: 'MUFASA',\n        id: '1TewCPi92ro',\n        provider: 'youtube',\n        thumbnailUrl: 'https://i.ytimg.com/vi/1TewCPi92ro/hqdefault.jpg',\n        submitter: { displayName: 'Friday', userName: '' },\n        submitters: new Array(69420),\n        game: 'Friday',\n      })\n    }\n    if (currentDate.getDate() === 18 && currentDate.getMonth() === 3) {\n      currentClip.set({\n        title: `HAPPY BIRTHDAY BELLE! 🎂🎉🎉`,\n        channel: 'FeelsBirthdayMan Clap @Wolfabelle',\n        id: 'reLU2dEWnVU',\n        provider: 'youtube',\n        thumbnailUrl: 'https://i.ytimg.com/vi/reLU2dEWnVU/hqdefault.jpg',\n        submitter: { displayName: 'all of chat and their mums', userName: '' },\n        submitters: [],\n      })\n    }\n  }\n  //\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  isLoggedIn.set(false);\n\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        if (e.type === 'view') {\n          umami.trackView(`${process.env.REACT_APP_BASEPATH}${e.value}`);\n        } else {\n          umami.trackEvent(e.value, e.type);\n        }\n      }\n    }\n  } catch {}\n}\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getGameName } from '../../store/dictionaries';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst providerName = 'twitch-clip';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'clips.twitch.tv') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/clip/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getClip(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.broadcaster_name,\n        game: await getGameName(clipInfo.game_id),\n        provider: providerName,\n        thumbnailUrl: clipInfo.thumbnail_url,\n        videoUrl: clipInfo.thumbnail_url.split('-preview-')[0] + '.mp4',\n        title: clipInfo.title,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch(e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    return {\n      id,\n      provider: providerName,\n    }\n  } catch(e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst TwitchClipProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n  name: providerName,\n};\n\nexport default TwitchClipProvider;\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst providerName = 'twitch-vod';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/videos/')) {\n      return true;\n    }\n    if (uri.pathname.includes('/video/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id, startTime } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getVideo(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.user_name,\n        provider: providerName,\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\n        title: clipInfo.title,\n        startTime: startTime,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch (e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n    const startTime = uri.searchParams.get('t');\n\n    if (!startTime) {\n      return undefined;\n    }\n\n    return {\n      id,\n      provider: providerName,\n      startTime,\n    };\n  } catch (e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst TwitchVodProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n  name: providerName,\n};\n\nexport default TwitchVodProvider;\n","import axios from 'axios';\nimport { OEmbedVideoResponse } from '../models';\n\nconst getClip = async (id: string): Promise<OEmbedVideoResponse | undefined> => {\n  try {\n    const { data } = await axios.get(\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\n    );\n    return data;\n  } catch {\n    return undefined;\n  }\n};\n\nconst YoutubeApi = {\n  getClip,\n};\n\nexport default YoutubeApi;\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport YoutubeApi from '../YoutubeApi';\n\nconst providerName = 'youtube';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'youtu.be') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('youtube.com')) {\n    return true;\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id, startTime } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await YoutubeApi.getClip(id);\n\n    return {\n      id,\n      channel: clipInfo?.author_name ?? 'YouTube',\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\n      provider: providerName,\n      title: clipInfo?.title ?? id,\n      startTime,\n    };\n  } catch (e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    let id: string | undefined = undefined;\n    if (uri.hostname === 'youtu.be' || uri.pathname.includes('shorts')) {\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\n      id = uri.pathname.slice(idStart).split('?')[0];\n    } else if (uri.hostname.endsWith('youtube.com')) {\n      id = uri.searchParams.get('v') ?? undefined;\n    }\n\n    if (!id) {\n      return undefined;\n    }\n\n    const startTime = uri.searchParams.get('t') ?? undefined;\n\n    return {\n      id,\n      provider: providerName,\n      startTime,\n    };\n  } catch (e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst YouTubeProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n  name: providerName,\n};\n\nexport default YouTubeProvider;\n","import axios from 'axios';\nimport { OEmbedVideoResponse } from '../models';\n\nconst getClip = async (id: string): Promise<OEmbedVideoResponse | undefined> => {\n  try {\n    const { data } = await axios.get(`https://api.streamable.com/oembed.json?url=https://streamable.com/${id}`);\n    return data;\n  } catch {\n    return undefined;\n  }\n};\n\nconst StreamableApi = {\n  getClip,\n};\n\nexport default StreamableApi;\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport StreamableApi from '../StreamableApi';\n\nconst providerName = 'streamable';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('streamable.com')) {\n    return true;\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id, startTime } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await StreamableApi.getClip(id);\n\n    return {\n      id,\n      channel: clipInfo?.author_name ?? 'Streamable',\n      thumbnailUrl: clipInfo?.thumbnail_url,\n      provider: providerName,\n      title: clipInfo?.title ?? id,\n      startTime,\n    };\n  } catch (e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/') + 1;\n    let id = uri.pathname.slice(idStart).split('?')[0];\n\n    if (!id) {\n      return undefined;\n    }\n\n    return {\n      id,\n      provider: providerName,\n    };\n  } catch (e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst StreamableProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n  name: providerName,\n};\n\nexport default StreamableProvider;\n","import { Clip, ClipInfo } from '../models';\nimport TwitchClipProvider from './providers/twitch-clip';\nimport TwitchVodProvider from './providers/twitch-vod';\nimport YouTubeProvider from './providers/youtube';\nimport StreamableProvider from './providers/streamable';\nimport { createLogger } from '../common/logging';\n\nconst logger = createLogger('Clip Finder');\n\nconst enabledProviders = process.env.REACT_APP_CLIP_PROVIDERS?.split(',');\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider, StreamableProvider].filter((provider) =>\n  enabledProviders?.includes(provider.name)\n);\n\nlogger.debug('Enabled providers:', enabledProviders);\n\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\n  for (const provider of providers) {\n    if (!provider.canHandle(url)) {\n      continue;\n    }\n\n    const clip = await provider.tryGetClip(url);\n\n    if (clip) {\n      clip.hash = Date.now().toString();\n      return clip;\n    }\n  }\n\n  return undefined;\n};\n\nconst getInfoByUrl = (url: string): ClipInfo | undefined => {\n  for (const provider of providers) {\n    const clipInfo = provider.getInfo(url);\n\n    if (clipInfo) {\n      return clipInfo;\n    }\n  }\n\n  return undefined;\n};\n\nconst ClipFinder = {\n  findByUrl,\n  getInfoByUrl,\n};\n\nexport default ClipFinder;\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","export const getUrlFromMessage = (message: string) => {\n\n  const urlStart = message.indexOf('http');\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    return url;\n  }\n\n  return undefined;\n};\n","import { createLogger } from '../common/logging';\r\nimport { getUrlFromMessage } from '../common/utils';\r\nimport { acceptingClips, addClip, clipMemory, clipQueue, removeClip } from '../store/queue';\r\nimport { accessToken, userChannel, userName } from '../store/user';\r\nimport { Client, Userstate } from 'tmi.js';\r\nimport ClipFinder from './ClipFinder';\r\nimport { none } from '@hookstate/core';\r\nimport { commands } from '../common/commands';\r\nimport { same } from '../store/helpers';\r\n\r\nconst logger = createLogger('Twitch Chat');\r\nlet client: Client;\r\n\r\nconst handleMessage = (userstate: Userstate, message: string, self: boolean) => {\r\n  if (message.startsWith('!')) {\r\n    logger.debug('Userstate', userstate);\r\n    if (!userstate.mod && userstate.badges?.['broadcaster'] !== '1') {\r\n      return;\r\n    }\r\n\r\n    const [commandName, ...args] = message.substr(1).split(' ');\r\n\r\n    const command = commands[commandName];\r\n    if (!command) {\r\n      return;\r\n    }\r\n\r\n    command(...args);\r\n    return;\r\n  }\r\n\r\n  if (!acceptingClips.get() && !self) {\r\n    return;\r\n  }\r\n\r\n  const url = getUrlFromMessage(message);\r\n\r\n  if (url) {\r\n    logger.debug('[handleMessage] Found url:', url);\r\n\r\n    ClipFinder.findByUrl(url).then((clip) => {\r\n      if (clip) {\r\n        clip.url = url;\r\n        clip.submitter = {\r\n          userName: userstate.username,\r\n          displayName: userstate['display-name'],\r\n        };\r\n        addClip(clip);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst handleMessageDeleted = (message: string) => {\r\n  const url = getUrlFromMessage(message);\r\n\r\n  if (url) {\r\n    logger.debug('[handleMessageDeleted] Found url:', url);\r\n\r\n    ClipFinder.findByUrl(url).then((clip) => {\r\n      if (clip) {\r\n        removeClip(clip);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst handleTimeout = (username: string) => {\r\n  const clipsFromUser = clipQueue.filter(\r\n    (clip) => clip.submitter.get()?.userName === username || clip.submitters.get()?.some((s) => s.userName === username)\r\n  );\r\n\r\n  clipsFromUser.forEach((clip) => {\r\n    if (clip.submitter.get()?.userName === username) {\r\n      if (!clip.submitters.get()?.length) {\r\n        const memory = clipMemory.find((c) => same(c.get(), clip.get()));\r\n        memory?.set(none);\r\n        clip.set(none);\r\n      } else {\r\n        clip.submitter.set(clip.submitters.get()?.[0]);\r\n        clip.submitters.set((submitters) => {\r\n          submitters?.shift();\r\n          return submitters;\r\n        });\r\n      }\r\n    } else {\r\n      clip.submitters.set((submitters) => submitters?.filter((s) => s.userName !== username));\r\n    }\r\n  });\r\n};\r\n\r\nconst connect = () => {\r\n  client = new Client({\r\n    options: {\r\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\r\n      skipUpdatingEmotesets: true,\r\n      skipMembership: true,\r\n    } as any,\r\n    logger: {\r\n      error: logger.error.bind(logger),\r\n      info: logger.info.bind(logger),\r\n      warn: logger.warn.bind(logger),\r\n    },\r\n    identity: {\r\n      username: userName.get() as string,\r\n      password: `oauth:${accessToken.get()}`,\r\n    },\r\n    connection: {\r\n      reconnect: true,\r\n      secure: true,\r\n    },\r\n  });\r\n\r\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\r\n  client.on('message', (_channel, userstate, message, self) => handleMessage(userstate, message, self));\r\n  client.on('messagedeleted', (_channel, _username, message) => handleMessageDeleted(message));\r\n  client.on('timeout', (_channel, username) => handleTimeout(username));\r\n  client.on('ban', (_channel, username) => handleTimeout(username));\r\n\r\n  logger.info('Connecting and authenticating...');\r\n  client\r\n    .connect()\r\n    .then(() => {\r\n      logger.info('Connected.');\r\n      joinChannel(userChannel.get() ?? userName.get() ?? '');\r\n    })\r\n    .catch((error) => {\r\n      logger.error(error);\r\n      setTimeout(() => connect(), 5000);\r\n    });\r\n};\r\n\r\nconst disconnect = async () => {\r\n  await client?.disconnect();\r\n};\r\n\r\nconst joinChannel = async (channel: string) => {\r\n  logger.info('Joining channel', channel);\r\n  await client.join(channel.toLowerCase());\r\n};\r\n\r\nconst leaveChannel = async (channel: string) => {\r\n  logger.info('Leaving channel', channel);\r\n  await client.part(channel.toLowerCase());\r\n};\r\n\r\nconst TwitchChat = {\r\n  connect,\r\n  disconnect,\r\n  joinChannel,\r\n  leaveChannel,\r\n};\r\n\r\nexport default TwitchChat;\r\n","import ClipFinder from '../services/ClipFinder';\r\nimport { acceptClips, clearMemory, clearQueue, nextClip, removeClip, setSoftClipLimit, toggleAutoplay } from '../store/queue';\r\n\r\nconst queueremove: (url: string) => void = (url) => {\r\n  if (!url) {\r\n    return;\r\n  }\r\n\r\n  if (url.startsWith('http')) {\r\n    const clipInfo = ClipFinder.getInfoByUrl(url);\r\n    if (clipInfo) {\r\n      removeClip(clipInfo);\r\n    }\r\n  }\r\n};\r\n\r\nexport const commands: Record<string, (...args: string[]) => void> = {\r\n  queuenext: () => nextClip(),\r\n  queueclose: () => acceptClips(false),\r\n  queueopen: () => acceptClips(true),\r\n  queueclear: () => clearQueue(),\r\n  queuepurgememory: () => clearMemory(),\r\n  queueautoplay: (val) =>\r\n    toggleAutoplay(['1', 'on', 'true'].includes(val) ? true : ['0', 'off', 'false'].includes(val) ? false : undefined),\r\n  queuesoftlimit: (limit) => limit !== null && Number.isInteger(+limit) && setSoftClipLimit(+limit),\r\n  queueremove,\r\n};\r\n","import { createState, none } from '@hookstate/core';\nimport { trace } from '../common/analytics';\nimport { Clip, ClipInfo, ClipSubmitter } from '../models';\nimport { createPersistentState, same } from './helpers';\n\nexport const currentClip = createState({} as Clip);\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\nexport const acceptingClips = createState(false);\nexport const softClipLimit = createPersistentState('softClipLimit', 0);\nexport const softClipCount = createState(0);\nexport const autoplay = createPersistentState('autoplay', false);\nexport const useReactPlayer = createState(false);\nexport const autoplayTimeoutHandle = createState(-1);\n\nconst addClipToMemory = (clip: Clip): void => {\n  if (clip) {\n    clipMemory.set((memory) => [JSON.parse(JSON.stringify(clip)), ...(memory ?? [])]);\n  }\n}\n\nexport const addClip = (clip: Clip): void => {\n  const queuedState = clipQueue.find((c) => same(c.get(), clip));\n  const queued = queuedState?.get();\n  const limit = softClipLimit.get();\n\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter?.userName === clip.submitter?.userName ||\n      (queued.submitters?.find((s) => s.userName === clip.submitter?.userName) ?? false);\n\n    if (!sameSubmitter) {\n      queuedState?.submitters.set((submitters) => [...(submitters ?? []), clip.submitter as ClipSubmitter]);\n      clipQueue.set((queue) => queue.sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0)));\n    }\n\n    return;\n  } else if (limit && softClipCount.get() >= limit) {\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n  softClipCount.set((c) => c + 1);\n\n  trace('clip-added');\n};\n\nexport const nextClip = (uncount = false): void => {\n  const next = clipQueue[0]?.get();\n  currentClip.set(JSON.parse(JSON.stringify(next ?? {})));\n  addClipToMemory(next);\n  clipQueue[0].set(none);\n\n  if (uncount) {\n    softClipCount.set((c) => Math.max(c - 1, 0));\n  }\n\n  useReactPlayer.set(autoplay.get());\n  cancelDelayedNextClip();\n\n  if (next) {\n    trace('next-clip');\n    trace('?visit-time-extender', 'view');\n  }\n};\n\nexport const getMemorizedClip = (clip: ClipInfo): Clip | undefined => {\n  const queue = clipQueue.find((c) => same(c.get(), clip));\n  if (queue) {\n    return queue?.get();\n  }\n  const memory = clipMemory.find((c) => same(c.get(), clip));\n  if (memory) {\n    return memory?.get();\n  }\n  return undefined;\n};\n\nexport const getQueuedClip = (clip: ClipInfo): Clip | undefined => {\n  const queue = clipQueue.find((c) => same(c.get(), clip));\n  return queue?.get();\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    useReactPlayer.set(autoplay.get());\n    currentClip.set(JSON.parse(JSON.stringify(queued)));\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: ClipInfo): void => {\n  const index = clipQueue.findIndex((c) => same(c.get(), clip));\n  addClipToMemory(clipQueue[index].get());\n  clipQueue[index].set(none);\n  softClipCount.set((c) => Math.max(c - 1, 0));\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n  softClipCount.set(0);\n\n  trace('clear-queue');\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([]);\n\n  trace('purge-memory');\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n  if (accept) {\n    softClipCount.set(clipQueue.length);\n  }\n\n  trace(`accept-clips-${accept}`);\n};\n\nexport const reloadClip = (): void => {\n  currentClip.hash.set(() => Date.now().toString());\n};\n\nexport const setSoftClipLimit = (limit: number): void => {\n  softClipLimit.set(limit);\n\n  trace('set-soft-limit');\n};\n\nexport const toggleAutoplay = (ap?: boolean): void => {\n  ap = ap ?? !autoplay.get();\n  autoplay.set(ap);\n\n  if (ap) {\n    useReactPlayer.set(true);\n  } else {\n    cancelDelayedNextClip();\n  }\n\n  trace(`toggle-autoplay-${ap}`);\n};\n\nexport const delayedNextClip = (): void => {\n  cancelDelayedNextClip();\n\n  const timeoutHandle = setTimeout(() => nextClip(), 1000) as unknown as number;\n  autoplayTimeoutHandle.set(timeoutHandle);\n};\n\nexport const cancelDelayedNextClip = (): void => {\n  let timeoutHandle = autoplayTimeoutHandle.get();\n  if (timeoutHandle) {\n    clearTimeout(timeoutHandle);\n  }\n};\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { ClipInfo } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: ClipInfo, b: ClipInfo) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n"],"sourceRoot":""}