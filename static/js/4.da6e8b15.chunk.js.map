{"version":3,"sources":["components/Toggle.tsx","pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["Toggle","pressed","className","colour","children","onClick","props","classes","addButtonColour","ClipCard","id","provider","url","thumbnailUrl","title","submitter","submitterCount","channel","game","src","alt","Button","selectCurrentClip","removeClip","href","target","rel","ClipRoll","clips","clipLimit","isAcceptingClip","acceptingClips","use","length","slice","map","clip","submitters","PlayerSwitch","undefined","window","location","hostname","height","width","allowFullScreen","startTime","Player","QueuePage","useState","advancedVisible","setAdvancedVisible","isAcceptingClips","clipQueue","clipMem","clipMemory","current","currentClip","token","userName","userChannel","useEffect","TwitchChat","connect","disconnect","nextClip","acceptClips","clearQueue","newChannel","prompt","changeChannel","clearMemory"],"mappings":"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","file":"static/js/4.da6e8b15.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react';\nimport { addButtonColour } from './Button';\n\ninterface ToggleProps extends ButtonHTMLAttributes<any> {\n  pressed: boolean;\n  className?: string;\n  colour?: string;\n  children?: ReactNode | undefined;\n\n  onClick: () => void;\n}\n\nfunction Toggle({ pressed, className, colour, children, onClick, ...props }: ToggleProps) {\n  let classes = addButtonColour(colour, className);\n\n  if (pressed) {\n    classes += ' pressed';\n  }\n\n  return (\n    <button {...props} className={classes} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport default Toggle;\n","import React from 'react';\nimport Button from '../../components/Button';\nimport { removeClip, selectCurrentClip } from '../../store/queue';\n\nexport interface ClipCardProps {\n  id: string;\n  provider: string;\n  title?: string;\n  submitter?: string;\n  submitterCount?: number;\n  channel?: string;\n  game?: string;\n\n  url?: string;\n  thumbnailUrl?: string;\n}\n\nfunction ClipCard({ id, provider, url, thumbnailUrl, title, submitter, submitterCount = 0, channel, game }: ClipCardProps) {\n  return (\n    <div className=\"clip max-w-sm rounded overflow-hidden flex flex-col mb-4\">\n      {thumbnailUrl && <img className=\"w-full\" src={thumbnailUrl} alt={title} />}\n      <div className=\"h-full w-full relative\">\n        <div className=\"absolute flex right-1 bottom-1 clip-buttons space-x-1\">\n          <Button colour=\"green\" onClick={() => selectCurrentClip({ id, provider })}>\n            &raquo;\n          </Button>\n          <Button colour=\"red\" onClick={() => removeClip({ id, provider })}>\n            &times;\n          </Button>\n        </div>\n        <div className=\"px-2 py-1\">\n          <h4 className=\"font-bold text-sm mb-1\"><a className=\"text-black no-underline\" href={url} target=\"_blank\" rel=\"noreferrer\">{title}</a></h4>\n          <p className=\"text-gray-700 text-xs mb-1 font-normal\">\n            <span className=\"font-bold\">{channel} </span>\n            {game && (\n              <span>\n                playing&nbsp;<span className=\"font-bold\">{game}</span>\n              </span>\n            )}\n          </p>\n          <p className=\"text-gray-700 text-xs font-normal\">\n            {submitter && (\n              <>\n                Submitted by <span className=\"font-bold\">{submitter}</span>\n              </>\n            )}\n            <span className=\"text-xs\">{submitterCount > 0 && ' +' + submitterCount}</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport { acceptingClips } from '../../store/queue';\nimport ClipCard from './ClipCard';\n\nexport interface ClipRollProps {\n  clips: any[];\n  clipLimit?: number;\n}\n\nfunction ClipRoll({ clips, clipLimit = 19 }: ClipRollProps) {\n  const isAcceptingClip = acceptingClips.use();\n\n  return (\n    <div className=\"cliproll flex flex-wrap w-full justify-between\">\n      {clips.length ? (\n        <>\n          {clips.slice(0, clipLimit).map((clip) => (\n            <ClipCard key={`${clip.provider}:${clip.id}`} {...clip} submitterCount={clip.submitters?.length} />\n          ))}\n          {clips.length > clipLimit && (\n            <div className=\"clip max-w-sm rounded overflow-hidden ml-3 mb-3 text-3xl flex\">\n              <div className=\"mx-auto my-auto\">+{clips.length - clipLimit}</div>\n            </div>\n          )}\n        </>\n      ) : (\n        isAcceptingClip && <div className=\"text-lg font-bold\">Waiting for some clips from chat...</div>\n      )}\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import React from 'react';\r\n\r\nexport interface PlayerProps {\r\n  title?: string;\r\n  provider?: string;\r\n  id?: string;\r\n  channel?: string;\r\n  game?: string;\r\n  submitter?: string;\r\n  submitterCount?: number;\r\n  startTime?: string;\r\n}\r\n\r\nfunction Player(props: PlayerProps) {\r\n  const { game, channel, title, submitter, submitterCount = 0 } = props;\r\n  return (\r\n    <>\r\n      <div className=\"player\">\r\n        <PlayerSwitch {...props} />\r\n      </div>\r\n      <div className=\"pt-2\">\r\n        <h2 className=\"font-bold mb-1\">{title ?? <>&nbsp;</>}</h2>\r\n        <p className=\"text-gray-500 text-sm font-normal\">\r\n          {channel ? (\r\n            <>\r\n              <span className=\"font-bold\">{channel}</span>\r\n              {game && (\r\n                <span>\r\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\r\n                </span>\r\n              )}\r\n              , submitted by <span className=\"font-bold\">{submitter}</span>\r\n              {submitterCount > 0 && <> and {submitterCount} other(s)</>}\r\n            </>\r\n          ) : (\r\n            <>&nbsp;</>\r\n          )}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PlayerSwitch({ provider, ...props }: PlayerProps) {\r\n  switch (provider) {\r\n    case undefined:\r\n      return <></>;\r\n    case 'twitch-clip':\r\n      return (\r\n        <iframe\r\n          src={`https://clips.twitch.tv/embed?clip=${props.id}&autoplay=true&parent=${window.location.hostname}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          allowFullScreen={true}\r\n          title={props.title}\r\n        ></iframe>\r\n      );\r\n    case 'youtube':\r\n      return (\r\n        <iframe\r\n          src={`https://www.youtube.com/embed/${props.id}?autoplay=1&start=${props.startTime ?? ''}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          allowFullScreen={true}\r\n          title={props.title}\r\n        ></iframe>\r\n      );\r\n  }\r\n\r\n  return <span>Provider not supported: {provider}</span>;\r\n}\r\n\r\nexport default Player;\r\n","import React, { useEffect, useState } from 'react';\nimport Button from '../../components/Button';\nimport Toggle from '../../components/Toggle';\nimport TwitchChat from '../../services/TwitchChat';\nimport {\n  acceptClips,\n  acceptingClips,\n  clearMemory,\n  clearQueue,\n  clipMemory,\n  clipQueue,\n  currentClip,\n  nextClip,\n} from '../../store/queue';\nimport { changeChannel, userChannel, userName } from '../../store/user';\nimport ClipRoll from './ClipRoll';\nimport Player from './Player';\nimport './styles.css';\n\nfunction QueuePage() {\n  const [advancedVisible, setAdvancedVisible] = useState(false);\n  const isAcceptingClips = acceptingClips.use();\n  const clips = clipQueue.use();\n  const clipMem = clipMemory.use();\n  const current = currentClip.use();\n\n  const token = userName.use();\n  const channel = userChannel.use();\n\n  useEffect(() => {\n    TwitchChat.connect();\n    return () => TwitchChat.disconnect();\n  }, [token]);\n\n  return (\n    <>\n      <Player {...current} submitterCount={current.submitters?.length} />\n      <div className=\"mt-4 flex w-full\">\n        <Button colour=\"green\" className=\"mr-2\" onClick={() => nextClip()}>\n          Next &raquo;\n        </Button>\n        <Toggle pressed={isAcceptingClips} className=\"mr-2\" onClick={() => acceptClips(!isAcceptingClips)}>\n          {isAcceptingClips ? <>Close the floodgates! 🌊</> : <>Open the floodgates! 🚪</>}\n        </Toggle>\n\n        <div className=\"flex-grow\" />\n        <Button colour=\"red\" className=\"mr-2\" onClick={() => clearQueue()}>\n          &times; Clear queue ({clips.length})\n        </Button>\n        <Toggle pressed={advancedVisible} colour=\"red\" onClick={() => setAdvancedVisible(!advancedVisible)}>\n          ⚙️\n        </Toggle>\n      </div>\n      {advancedVisible && (\n        <div className=\"mt-2 flex w-full\">\n          <div className=\"flex-grow\" />\n          <Button\n            className=\"mr-2\"\n            onClick={() => {\n              const newChannel = prompt('Enter channel to read chat from', channel as string);\n              if (newChannel && newChannel !== channel) {\n                changeChannel(newChannel);\n              }\n            }}\n          >\n            Change channel ({channel})\n          </Button>\n          <Button\n            onClick={() => clearMemory()}\n            title=\"Remove all clips from permanent memory, allow all clips to be posted and queued again\"\n          >\n            &times; Purge memory ({clipMem.length})\n          </Button>\n        </div>\n      )}\n      <div className=\"mt-4\">\n        <ClipRoll clips={clips} />\n      </div>\n    </>\n  );\n}\n\nexport default QueuePage;\n"],"sourceRoot":""}