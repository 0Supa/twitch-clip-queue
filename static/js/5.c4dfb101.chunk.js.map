{"version":3,"sources":["components/Button.tsx","components/Logos.tsx","pages/Header.tsx","pages/Page.tsx","components/Toggle.tsx","pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["addButtonColour","colour","classes","Button","className","children","onClick","props","GitHubLogo","href","size","target","rel","viewBox","width","height","fill","fillRule","d","TwitchLogo","x","y","Header","loggedIn","useState","isLoggedIn","get","a","logOut","TwitchAuth","redirectToLogin","Page","fullWidth","klass","Toggle","pressed","ClipCard","clip","noButtons","thumbnailUrl","id","provider","url","title","game","submitter","submitters","channel","submitterCount","length","style","backgroundImage","window","open","selectCurrentClip","src","alt","displayName","userName","removeClip","ClipRoll","clips","isAcceptingClips","acceptingClips","slice","map","PlayerSwitch","useReactPlayer","onEnded","videoUrl","ReactPlayer","canPlay","controls","playing","undefined","location","hostname","allowFullScreen","startTime","Player","timestamp","reloadClip","formatDistanceToNow","parseISO","QueuePage","advancedVisible","setAdvancedVisible","historyVisible","setHistoryVisible","useHookState","clipQueue","clipMem","clipMemory","current","currentClip","token","accessToken","name","userChannel","softLimit","softClipLimit","autoplayEnabled","autoplay","reactPlayer","limitReached","softClipCount","statusText","useEffect","TwitchChat","connect","disconnect","delayedNextClip","hash","nextClip","toggleAutoplay","acceptClips","newChannel","prompt","changeChannel","newLimit","toString","Number","isInteger","setSoftClipLimit","message","getUrlFromMessage","ClipFinder","findByUrl","then","Date","now","addClip","clearQueue","clearMemory"],"mappings":"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","file":"static/js/5.c4dfb101.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { ReactNode } from 'react';\r\n\r\ninterface LogoProps {\r\n  href: string;\r\n  className?: string;\r\n  size?: number;\r\n  children?: ReactNode | undefined;\r\n}\r\n\r\nexport function GitHubLogo({ href, className, size = 20, children }: LogoProps) {\r\n  return (\r\n    <div className={className}>\r\n      <a href={href} target=\"_blank\" rel=\"noreferrer\" className=\"block no-underline hover:underline\">\r\n        <svg viewBox=\"0 0 16 16\" width={size} height={size} className=\"inline-block\">\r\n          <path\r\n            fill=\"white\"\r\n            fillRule=\"evenodd\"\r\n            d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\r\n          ></path>\r\n        </svg>{' '}\r\n        {children}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TwitchLogo({ href, className, size = 20, children }: LogoProps) {\r\n  return (\r\n    <div className={className}>\r\n      <a href={href} target=\"_blank\" rel=\"noreferrer\" className=\"block no-underline hover:underline\">\r\n        <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 2400 2800\" width={size} height={size} className=\"inline-block\">\r\n          <g fill=\"white\">\r\n            <path d=\"M500,0L0,500v1800h600v500l500-500h400l900-900V0H500z M2200,1300l-400,400h-400l-350,350v-350H600V200h1600 V1300z\" />\r\n            <rect x=\"1700\" y=\"550\" width=\"200\" height=\"600\" />\r\n            <rect x=\"1150\" y=\"550\" width=\"200\" height=\"600\" />\r\n          </g>\r\n        </svg>{' '}\r\n        {children}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from '@hookstate/core';\r\nimport Button from '../components/Button';\r\nimport { GitHubLogo, TwitchLogo } from '../components/Logos';\r\nimport TwitchAuth from '../services/TwitchAuth';\r\nimport { isLoggedIn, logOut } from '../store/user';\r\n\r\nfunction Header() {\r\n  const loggedIn = useState(isLoggedIn);\r\n\r\n  return (\r\n    <header className=\"flex mb-4 px-16 py-2 bg-gray-800\">\r\n      <h1>Twitch Clip Queue</h1>\r\n      {loggedIn.get() && (\r\n        <div className=\"ml-8 pb-1 flex text-sm items-end\">\r\n          by\r\n          <GitHubLogo className=\"ml-2 mr-1\" size={16} href=\"https://github.com/JakeMiki\">\r\n            JakeMiki\r\n          </GitHubLogo>\r\n          /\r\n          <TwitchLogo className=\"ml-1\" size={16} href=\"https://twitch.tv/SirMuffin9\">\r\n            SirMuffin9\r\n          </TwitchLogo>\r\n        </div>\r\n      )}\r\n      <div className=\"flex-grow\"></div>\r\n      <div>\r\n        {loggedIn.get() ? (\r\n          <Button onClick={async () => await logOut()}>Logout</Button>\r\n        ) : (\r\n          <Button onClick={() => TwitchAuth.redirectToLogin()}>Login with Twitch</Button>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { ReactNode } from 'react';\r\nimport Header from './Header';\r\n\r\ninterface PageProps {\r\n  fullWidth?: boolean;\r\n\r\n  children?: ReactNode | undefined;\r\n}\r\n\r\nfunction Page({ children, fullWidth = false }: PageProps) {\r\n  const klass = fullWidth ? 'w-full px-16' : 'lg:container lg:mx-auto';\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className={klass}>{children}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\nimport { addButtonColour } from './Button';\r\n\r\ninterface ToggleProps extends ButtonHTMLAttributes<any> {\r\n  pressed: boolean;\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Toggle({ pressed, className, colour, children, onClick, ...props }: ToggleProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  if (pressed) {\r\n    classes += ' pressed';\r\n  }\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n","import React from 'react';\nimport Button from '../../components/Button';\nimport { Clip } from '../../models';\nimport { removeClip, selectCurrentClip } from '../../store/queue';\n\nexport interface ClipCardProps {\n  clip: Clip;\n  noButtons?: boolean;\n}\n\nfunction ClipCard({ clip, noButtons }: ClipCardProps) {\n  const { thumbnailUrl, id, provider, url, title, game, submitter, submitters, channel } = clip;\n  const submitterCount = submitters?.length ?? 0;\n  return (\n    <div className=\"clip max-w-sm rounded overflow-hidden flex flex-col\">\n      <div\n        className=\"cursor-pointer clip-image\"\n        style={{ backgroundImage: thumbnailUrl }}\n        onClick={() =>\n          !noButtons ? selectCurrentClip({ id, provider }) : window.open(url, '__blank', 'noreferrer,noopener')\n        }\n      >\n        {thumbnailUrl && <img className=\"w-full cursor-pointer\" src={thumbnailUrl} alt={title} />}\n      </div>\n      <div className=\"h-full w-full relative\">\n        <div className=\"px-2 py-1 \">\n          <h4 className=\"font-bold text-sm mb-1 w-full overflow-hidden whitespace-nowrap overflow-ellipsis\">\n            <a className=\"text-black no-underline\" href={url} target=\"_blank\" rel=\"noreferrer\">\n              {title}\n            </a>\n          </h4>\n          <p className=\"text-gray-900 text-xs mb-1 font-normal\">\n            <span className=\"font-bold\">{channel} </span>\n            {game && (\n              <span>\n                playing&nbsp;<span className=\"font-bold\">{game}</span>\n              </span>\n            )}\n          </p>\n          <p className=\"text-gray-900 text-xs font-normal\">\n            {submitter && (\n              <>\n                Submitted by <span className=\"font-bold\">{submitter.displayName ?? submitter.userName}</span>\n              </>\n            )}\n            <span className=\"text-xs\">{submitterCount > 0 && ' +' + submitterCount}</span>\n          </p>\n        </div>\n        {!noButtons && (\n          <div className=\"absolute flex right-1 bottom-1 clip-buttons space-x-1\">\n            <Button colour=\"green\" onClick={() => selectCurrentClip({ id, provider })}>\n              &raquo;\n            </Button>\n            <Button colour=\"red\" onClick={() => removeClip({ id, provider })}>\n              &times;\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport { Clip } from '../../models';\nimport ClipCard from './ClipCard';\nimport { useState } from '@hookstate/core';\nimport { acceptingClips } from '../../store/queue';\n\nexport interface ClipRollProps {\n  clips: Clip[];\n  clipLimit?: number;\n  noButtons?: boolean;\n}\n\nfunction ClipRoll({ clips, noButtons }: ClipRollProps) {\n  const isAcceptingClips = useState(acceptingClips).get();\n\n  return (\n    <div className=\"w-full overflow-y-scroll h-full\">\n      {!clips.length && <strong>No clips in queue. {isAcceptingClips && <>Send some in chat!</>}</strong>}\n      {clips.slice(0, 100).map((clip) => (\n        <div key={`${clip.provider}_${clip.id}`} className=\"mb-4\">\n          <ClipCard clip={clip} noButtons={noButtons} />\n        </div>\n      ))}\n      {clips.length > 100 && (\n        <div key=\"and-more\" className=\"mb-4\">\n          ...and {clips.length - 100} more.\n        </div>\n      )}\n      <div className=\"mb-16\"></div>\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport { formatDistanceToNow, parseISO } from 'date-fns';\r\nimport { Clip } from '../../models';\r\nimport { CommonProps } from '../../common/props';\r\nimport { reloadClip } from '../../store/queue';\r\n\r\nexport interface PlayerProps extends CommonProps {\r\n  clip: Clip;\r\n  useReactPlayer?: boolean;\r\n  onEnded?: () => void;\r\n}\r\n\r\nfunction Player(props: PlayerProps) {\r\n  const {\r\n    clip: { channel, title, timestamp, startTime, game, submitter, submitters, url },\r\n  } = props;\r\n  const submitterCount = submitters?.length ?? 0;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"player player-container\">\r\n        <PlayerSwitch {...props} />\r\n      </div>\r\n      <div className=\"player-title-container\">\r\n        <h2 className=\"font-bold mb-1\">\r\n          {title ?? <>&nbsp;</>}\r\n          {startTime && (\r\n            <small className=\"text-gray-700\">\r\n              {' ('}start at{' '}\r\n              <span className=\"cursor-pointer underline\" onClick={() => reloadClip()}>\r\n                {startTime}\r\n              </span>\r\n              {')'}\r\n            </small>\r\n          )}\r\n          {url && (\r\n            <span>\r\n              &nbsp;\r\n              <sup>\r\n                <a\r\n                  href={url}\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                  className=\"text-gray-700 no-underline hover:text-gray-200\"\r\n                >\r\n                  &#x1F5D7;\r\n                </a>\r\n              </sup>\r\n            </span>\r\n          )}\r\n        </h2>\r\n        <p className=\"text-gray-500 text-sm font-normal\">\r\n          {channel ? (\r\n            <>\r\n              <span className=\"font-bold\">{channel}</span>\r\n              {game && (\r\n                <span>\r\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\r\n                </span>\r\n              )}\r\n              , submitted by <span className=\"font-bold\">{submitter?.displayName ?? submitter?.userName}</span>\r\n              {submitterCount > 0 && <span> and {submitterCount} other(s)</span>}\r\n              {timestamp && <span>, created {formatDistanceToNow(parseISO(timestamp))} ago</span>}\r\n            </>\r\n          ) : (\r\n            <>&nbsp;</>\r\n          )}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PlayerSwitch({ clip, useReactPlayer, onEnded }: PlayerProps) {\r\n  if (useReactPlayer) {\r\n    const url = clip.videoUrl ?? clip.url;\r\n    if (url && ReactPlayer.canPlay(url)) {\r\n      return <ReactPlayer url={url} height=\"100%\" width=\"100%\" className=\"player\" controls playing onEnded={onEnded} />;\r\n    }\r\n  }\r\n\r\n  switch (clip.provider) {\r\n    case undefined:\r\n      return <></>;\r\n    case 'twitch-clip':\r\n      return (\r\n        <iframe\r\n          src={`https://clips.twitch.tv/embed?clip=${clip.id}&autoplay=true&parent=${window.location.hostname}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n    case 'twitch-vod':\r\n      return (\r\n        <iframe\r\n          src={`https://player.twitch.tv/?video=${clip.id}&autoplay=true&parent=${window.location.hostname}&time=${clip.startTime}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n    case 'youtube':\r\n      return (\r\n        <iframe\r\n          src={`https://www.youtube.com/embed/${clip.id}?autoplay=1&start=${clip.startTime ?? ''}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n  }\r\n\r\n  return <span>Provider not supported: {clip.provider}</span>;\r\n}\r\n\r\nexport default Player;\r\n","import React, { useEffect, useState } from 'react';\nimport { useState as useHookState } from '@hookstate/core';\nimport Button from '../../components/Button';\nimport Toggle from '../../components/Toggle';\nimport ClipFinder from '../../services/ClipFinder';\nimport TwitchChat from '../../services/TwitchChat';\nimport {\n  acceptClips,\n  acceptingClips,\n  addClip,\n  autoplay,\n  clearMemory,\n  clearQueue,\n  clipMemory,\n  clipQueue,\n  currentClip,\n  delayedNextClip,\n  nextClip,\n  reloadClip,\n  setSoftClipLimit,\n  softClipCount,\n  softClipLimit,\n  toggleAutoplay,\n  useReactPlayer,\n} from '../../store/queue';\nimport { accessToken, changeChannel, userChannel, userName } from '../../store/user';\nimport ClipRoll from './ClipRoll';\nimport Player from './Player';\nimport './styles.css';\nimport Page from '../Page';\nimport { getUrlFromMessage } from '../../common/utils';\n\nfunction QueuePage() {\n  const [advancedVisible, setAdvancedVisible] = useState(false);\n  const [historyVisible, setHistoryVisible] = useState(false);\n\n  const isAcceptingClips = useHookState(acceptingClips).get();\n  const clips = useHookState(clipQueue).get();\n  const clipMem = useHookState(clipMemory).get();\n  const current = useHookState(currentClip).get();\n\n  const token = useHookState(accessToken).get();\n  const name = useHookState(userName).get();\n  const channel = useHookState(userChannel).get();\n  const softLimit = useHookState(softClipLimit).get();\n  const autoplayEnabled = useHookState(autoplay).get();\n  const reactPlayer = useHookState(useReactPlayer).get();\n\n  const limitReached = useHookState(softClipCount).get() >= softLimit;\n\n  let statusText = 'Clip submissions are open. Send some clips in chat!';\n  if (!isAcceptingClips) {\n    statusText = 'Clip submissions are closed.';\n  } else if (softLimit > 0 && limitReached) {\n    statusText = 'Clip limit reached. Send clips queued by others to boost them to the top 👆';\n  }\n\n  useEffect(() => {\n    TwitchChat.connect();\n    return () => {\n      TwitchChat.disconnect();\n    };\n  }, [token]);\n\n  return (\n    <Page fullWidth={true}>\n      <div className=\"w-full queue-page\">\n        <Player\n          clip={current}\n          key={current.hash}\n          useReactPlayer={reactPlayer}\n          onEnded={() => autoplayEnabled && delayedNextClip()}\n        />\n        <div className=\"buttons-container relative\">\n          <div className=\"flex w-full items-start\">\n            <Button colour=\"green\" className=\"mr-2\" onClick={() => nextClip()}>\n              Next &raquo;\n            </Button>\n            <Toggle\n              pressed={autoplayEnabled}\n              colour=\"green\"\n              className=\"mr-2\"\n              onClick={() => toggleAutoplay(!autoplayEnabled)}\n            >\n              Autoplay is {autoplayEnabled ? <>on</> : <>off</>}\n            </Toggle>\n            {!!softLimit && (\n              <Button\n                colour=\"red\"\n                className=\"mr-2\"\n                onClick={() => nextClip(true)}\n                title=\"Skipping a clip opens up a slot for another clip to be posted if gates are still open\"\n              >\n                &times; Skip\n              </Button>\n            )}\n            <Toggle pressed={isAcceptingClips} className=\"mr-2\" onClick={() => acceptClips(!isAcceptingClips)}>\n              {isAcceptingClips ? <>Close the floodgates! 🌊</> : <>Open the floodgates! 🚪</>}\n            </Toggle>\n            <Toggle pressed={advancedVisible} onClick={() => setAdvancedVisible(!advancedVisible)}>\n              ⚙️\n            </Toggle>\n\n            <div className=\"ml-4 font-bold text-xl leading-loose\">{statusText}</div>\n          </div>\n          {advancedVisible && (\n            <div className=\"absolute flex items-start -top-20 pb-1 pt-7 bg-gray-900 bg-opacity-70\">\n              <Button\n                className=\"mr-2\"\n                title=\"Change channel to read clips from\"\n                onClick={() => {\n                  const newChannel = prompt('Enter channel to read chat from', channel as string);\n                  if (newChannel && newChannel !== channel) {\n                    changeChannel(newChannel);\n                  }\n                }}\n              >\n                Change channel <em>({channel})</em>\n              </Button>\n              <Button\n                className=\"mr-2\"\n                title=\"Soft clip limit - after set value no new clips are accepted, current clips can still be voted on\"\n                onClick={() => {\n                  const newLimit = prompt(\n                    'Set a soft limit after which no new clips will be accepted (0 to disable)',\n                    softLimit.toString()\n                  );\n                  if (newLimit !== null && Number.isInteger(+newLimit)) {\n                    setSoftClipLimit(+newLimit);\n                  }\n                }}\n              >\n                Clip limit <em>({softLimit})</em>\n              </Button>\n              <Button\n                className=\"mr-2\"\n                title=\"Add clip from url\"\n                onClick={() => {\n                  const message = prompt('Enter clip url', '');\n                  const url = getUrlFromMessage(message ?? '');\n                  if (url) {\n                    ClipFinder.findByUrl(url).then((clip) => {\n                      if (clip) {\n                        clip.hash = Date.now().toString();\n                        clip.url = url;\n                        clip.submitter = { userName: name ?? '', displayName: name ?? '' };\n                        addClip(clip);\n                      }\n                    });\n                  }\n                }}\n              >\n                + Add clip\n              </Button>\n              <Button className=\"mr-2\" title=\"Reload current clip\" onClick={() => reloadClip()}>\n                ♻️ Reload clip\n              </Button>\n              <Button className=\"mr-2\" onClick={() => clearQueue()} title=\"Clear current queue\">\n                &times; Clear queue <em>({clips.length})</em>\n              </Button>\n              <Button\n                onClick={() => clearMemory()}\n                title=\"Remove all clips from permanent memory, allow all clips to be queued again\"\n              >\n                &times; Purge memory <em>({clipMem.length})</em>\n              </Button>\n            </div>\n          )}\n        </div>\n        <div className=\"nextup-container\">\n          <div className=\"w-full flex border-b-2 mb-2 align-text-bottom\">\n            <h2\n              className={historyVisible ? 'text-gray-700 hover:text-indigo-50 cursor-pointer' : undefined}\n              onClick={() => setHistoryVisible(false)}\n            >\n              Next up\n            </h2>\n            <div className=\"flex-grow\"></div>\n            <h2\n              className={!historyVisible ? 'text-gray-700 hover:text-indigo-50 cursor-pointer' : undefined}\n              onClick={() => setHistoryVisible(true)}\n            >\n              History\n            </h2>\n            <div className=\"flex-grow\"></div>\n            <h2>{clips.length}</h2>\n          </div>\n          {!historyVisible ? <ClipRoll clips={clips} /> : <ClipRoll clips={clipMem} noButtons/>}\n        </div>\n      </div>\n    </Page>\n  );\n}\n\nexport default QueuePage;\n"],"sourceRoot":""}