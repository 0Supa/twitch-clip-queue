{"version":3,"sources":["components/Button.tsx","pages/Footer.tsx","pages/Header.tsx","pages/Page.tsx","components/Toggle.tsx","pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["addButtonColour","colour","classes","Button","className","children","onClick","props","Footer","href","target","rel","Header","loggedIn","useState","isLoggedIn","get","a","logOut","TwitchAuth","redirectToLogin","Page","fullWidth","klass","Toggle","pressed","ClipCard","clip","thumbnailUrl","id","provider","url","title","game","submitter","submitters","channel","submitterCount","length","src","alt","selectCurrentClip","displayName","userName","removeClip","ClipRoll","clips","clipRenderer","index","key","width","height","rowCount","rowHeight","rowRenderer","noRowsRenderer","PlayerSwitch","undefined","window","location","hostname","allowFullScreen","startTime","Player","timestamp","formatDistanceToNow","parseISO","QueuePage","advancedVisible","setAdvancedVisible","isAcceptingClips","useHookState","acceptingClips","clipQueue","clipMem","clipMemory","current","currentClip","token","accessToken","name","userChannel","useEffect","TwitchChat","connect","disconnect","nextClip","acceptClips","clearQueue","newChannel","prompt","changeChannel","ClipFinder","findByUrl","then","addClip","clearMemory"],"mappings":"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","file":"static/js/5.d992693f.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","function Footer() {\n  return (\n    <footer className=\"text-xs mt-4 ml-16\">\n      Created by{' '}\n      <span className=\"font-bold\">\n        <a href=\"https://github.com/JakeMiki\" target=\"_blank\" rel=\"noreferrer\">\n          JakeMiki\n        </a>\n      </span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { useState } from \"@hookstate/core\";\nimport Button from \"../components/Button\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport { isLoggedIn, logOut } from \"../store/user\";\n\nfunction Header() {\n  const loggedIn = useState(isLoggedIn);\n\n  return (\n    <header className=\"flex mb-4 pl-16 pr-32 pt-2 pb-2 bg-gray-800\">\n      <h1>Twitch Clip Queue</h1>\n      <div className=\"flex-grow\"></div>\n      <div>\n        {loggedIn.get() ? (\n          <Button onClick={async () => await logOut()}>Logout</Button>\n        ) : (\n          <Button\n            onClick={() => TwitchAuth.redirectToLogin()}\n          >\n            Login with Twitch\n          </Button>\n        )}\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport Footer from './Footer';\nimport Header from './Header';\n\ninterface PageProps {\n  fullWidth?: boolean;\n\n  children?: ReactNode | undefined;\n}\n\nfunction Page({ children, fullWidth = false }: PageProps) {\n  const klass = fullWidth ? 'w-full px-16' : 'lg:container lg:mx-auto';\n  return (\n    <>\n      <Header />\n      <div className={klass}>{children}</div>\n      <Footer />\n    </>\n  );\n}\n\nexport default Page;\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\nimport { addButtonColour } from './Button';\r\n\r\ninterface ToggleProps extends ButtonHTMLAttributes<any> {\r\n  pressed: boolean;\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Toggle({ pressed, className, colour, children, onClick, ...props }: ToggleProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  if (pressed) {\r\n    classes += ' pressed';\r\n  }\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n","import React from 'react';\nimport Button from '../../components/Button';\nimport { Clip } from '../../models';\nimport { removeClip, selectCurrentClip } from '../../store/queue';\n\nexport interface ClipCardProps {\n  clip: Clip;\n}\n\nfunction ClipCard({ clip }: ClipCardProps) {\n  const { thumbnailUrl, id, provider, url, title, game, submitter, submitters, channel } = clip;\n  const submitterCount = submitters?.length ?? 0;\n  return (\n    <div className={'clip max-w-sm rounded overflow-hidden flex flex-col '}>\n      {thumbnailUrl && <img className=\"w-full cursor-pointer\" src={thumbnailUrl} alt={title} onClick={() => selectCurrentClip({ id, provider })}/>}\n      <div className=\"h-full w-full relative\">\n        <div className=\"px-2 py-1 \">\n          <h4 className=\"font-bold text-sm mb-1 w-full overflow-hidden whitespace-nowrap overflow-ellipsis\">\n            <a className=\"text-black no-underline\" href={url} target=\"_blank\" rel=\"noreferrer\">\n              {title}\n            </a>\n          </h4>\n          <p className=\"text-gray-900 text-xs mb-1 font-normal\">\n            <span className=\"font-bold\">{channel} </span>\n            {game && (\n              <span>\n                playing&nbsp;<span className=\"font-bold\">{game}</span>\n              </span>\n            )}\n          </p>\n          <p className=\"text-gray-900 text-xs font-normal\">\n            {submitter && (\n              <>\n                Submitted by <span className=\"font-bold\">{submitter.displayName ?? submitter.userName}</span>\n              </>\n            )}\n            <span className=\"text-xs\">{submitterCount > 0 && ' +' + submitterCount}</span>\n          </p>\n        </div>\n        <div className=\"absolute flex right-1 bottom-1 clip-buttons space-x-1\">\n          <Button colour=\"green\" onClick={() => selectCurrentClip({ id, provider })}>\n            &raquo;\n          </Button>\n          <Button colour=\"red\" onClick={() => removeClip({ id, provider })}>\n            &times;\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport { Clip } from '../../models';\nimport ClipCard from './ClipCard';\nimport { AutoSizer, List, ListRowRenderer } from 'react-virtualized';\n\nexport interface ClipRollProps {\n  clips: Clip[];\n  clipLimit?: number;\n}\n\nfunction ClipRoll({ clips }: ClipRollProps) {\n\n  const clipRenderer: ListRowRenderer = ({ index, key }) => (\n    <div key={key} className=\"mb-4\">\n      <ClipCard clip={clips[index]} />\n    </div>\n  );\n\n  return (\n    <div className=\"w-full h-full\">\n      <AutoSizer>\n        {({ width, height }) => (\n          <List\n            className=\"custom-scroll\"\n            height={height}\n            rowCount={clips.length}\n            rowHeight={256}\n            rowRenderer={clipRenderer}\n            noRowsRenderer={() => (<strong>No clips in queue. Send some in chat!</strong>)}\n            width={width}\n          />\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import React from 'react';\nimport { formatDistanceToNow, parseISO } from 'date-fns';\nimport { Clip } from '../../models';\nimport { CommonProps } from '../../common/props';\n\nexport interface PlayerProps extends CommonProps {\n  clip: Clip;\n}\n\nfunction Player(props: PlayerProps) {\n  const { clip: { channel, title, timestamp, game, submitter, submitters } } = props;\n  const submitterCount = submitters?.length ?? 0;\n\n  return (\n    <>\n      <div className=\"player player-container\">\n        <PlayerSwitch {...props} />\n      </div>\n      <div className=\"player-title-container\">\n        <h2 className=\"font-bold mb-1\">{title ?? <>&nbsp;</>}</h2>\n        <p className=\"text-gray-500 text-sm font-normal\">\n          {channel ? (\n            <>\n              <span className=\"font-bold\">{channel}</span>\n              {game && (\n                <span>\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\n                </span>\n              )}\n              , submitted by <span className=\"font-bold\">{submitter?.displayName ?? submitter?.userName}</span>\n              {submitterCount > 0 && <span> and {submitterCount} other(s)</span>}\n              {timestamp && <span>, created {formatDistanceToNow(parseISO(timestamp))} ago</span>}\n            </>\n          ) : (\n            <>&nbsp;</>\n          )}\n        </p>\n      </div>\n    </>\n  );\n}\n\nfunction PlayerSwitch({ clip }: PlayerProps) {\n  switch (clip.provider) {\n    case undefined:\n      return <></>;\n    case 'twitch-clip':\n      return (\n        <iframe\n          src={`https://clips.twitch.tv/embed?clip=${clip.id}&autoplay=true&parent=${window.location.hostname}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n    case 'twitch-vod':\n      return (\n        <iframe\n          src={`https://player.twitch.tv/?video=${clip.id}&autoplay=true&parent=${window.location.hostname}&time=${clip.startTime}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n    case 'youtube':\n      return (\n        <iframe\n          src={`https://www.youtube.com/embed/${clip.id}?autoplay=1&start=${clip.startTime ?? ''}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n  }\n\n  return <span>Provider not supported: {clip.provider}</span>;\n}\n\nexport default Player;\n","import React, { useEffect, useState } from 'react';\nimport { useState as useHookState } from '@hookstate/core';\nimport Button from '../../components/Button';\nimport Toggle from '../../components/Toggle';\nimport ClipFinder from '../../services/ClipFinder';\nimport TwitchChat from '../../services/TwitchChat';\nimport {\n  acceptClips,\n  acceptingClips,\n  addClip,\n  clearMemory,\n  clearQueue,\n  clipMemory,\n  clipQueue,\n  currentClip,\n  nextClip,\n} from '../../store/queue';\nimport { accessToken, changeChannel, userChannel, userName } from '../../store/user';\nimport ClipRoll from './ClipRoll';\nimport Player from './Player';\nimport './styles.css';\nimport Page from '../Page';\n\nfunction QueuePage() {\n  const [advancedVisible, setAdvancedVisible] = useState(false);\n\n  const isAcceptingClips = useHookState(acceptingClips).get();\n  const clips = useHookState(clipQueue).get();\n  const clipMem = useHookState(clipMemory).get();\n  const current = useHookState(currentClip).get();\n\n  const token = useHookState(accessToken).get();\n  const name = useHookState(userName).get();\n  const channel = useHookState(userChannel).get();\n\n  useEffect(() => {\n    TwitchChat.connect();\n    return () => {\n      TwitchChat.disconnect();\n    };\n  }, [token]);\n\n  return (\n    <Page fullWidth={true}>\n      <div className=\"w-full queue-page\">\n        <Player clip={current} />\n        <div className=\"buttons-container\">\n          <div className=\"flex w-full\">\n            <Button colour=\"green\" className=\"mr-2\" onClick={() => nextClip()}>\n              Next &raquo;\n            </Button>\n            <Toggle pressed={isAcceptingClips} className=\"mr-2\" onClick={() => acceptClips(!isAcceptingClips)}>\n              {isAcceptingClips ? <>Close the floodgates! 🌊</> : <>Open the floodgates! 🚪</>}\n            </Toggle>\n            <Button colour=\"red\" className=\"mr-2\" onClick={() => clearQueue()}>\n              &times; Clear queue <em>({clips.length})</em>\n            </Button>\n            <Toggle pressed={advancedVisible} colour=\"red\" onClick={() => setAdvancedVisible(!advancedVisible)}>\n              ⚙️\n            </Toggle>\n\n            <div className=\"ml-4 font-bold text-xl leading-loose\">\n              {isAcceptingClips\n                ? 'Clip submissions are open. Send some clips in chat!'\n                : \"Clip submissions are closed.\"}\n            </div>\n          </div>\n          {advancedVisible && (\n            <div className=\"flex w-full\">\n              <Button\n                className=\"mr-2\"\n                onClick={() => {\n                  const newChannel = prompt('Enter channel to read chat from', channel as string);\n                  if (newChannel && newChannel !== channel) {\n                    changeChannel(newChannel);\n                  }\n                }}\n              >\n                Change channel <em>({channel})</em>\n              </Button>\n              <Button\n                className=\"mr-2\"\n                onClick={() => {\n                  const url = prompt('Enter clip url', '');\n                  if (url) {\n                    ClipFinder.findByUrl(url).then((clip) => {\n                      if (clip) {\n                        clip.url = url;\n                        clip.submitter = { userName: name ?? '', displayName: name ?? '' };\n                        addClip(clip);\n                      }\n                    });\n                  }\n                }}\n              >\n                + Add cilp\n              </Button>\n              <Button\n                onClick={() => clearMemory()}\n                title=\"Remove all clips from permanent memory, allow all clips to be posted and queued again\"\n              >\n                &times; Purge memory <em>({clipMem.length})</em>\n              </Button>\n            </div>\n          )}\n        </div>\n        <div className=\"nextup-container\">\n          <div className=\"w-full flex border-b-2 mb-2 align-text-bottom\">\n            <h2>Next up</h2>\n            <div className=\"flex-grow\"></div>\n            <h2>{clips.length}</h2>\n          </div>\n          <ClipRoll clips={clips} />\n        </div>\n      </div>\n    </Page>\n  );\n}\n\nexport default QueuePage;\n"],"sourceRoot":""}