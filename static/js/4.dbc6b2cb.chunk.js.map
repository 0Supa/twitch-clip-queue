{"version":3,"sources":["components/Button.tsx","pages/Header.tsx","pages/Page.tsx","components/Toggle.tsx","pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["addButtonColour","colour","classes","Button","className","children","onClick","props","Header","loggedIn","useState","isLoggedIn","get","a","logOut","TwitchAuth","redirectToLogin","Page","fullWidth","klass","Toggle","pressed","ClipCard","clip","thumbnailUrl","id","provider","url","title","game","submitter","submitters","channel","submitterCount","length","src","alt","selectCurrentClip","href","target","rel","displayName","userName","removeClip","ClipRoll","clips","isAcceptingClips","acceptingClips","slice","map","PlayerSwitch","undefined","window","location","hostname","height","width","allowFullScreen","startTime","Player","timestamp","reloadClip","formatDistanceToNow","parseISO","QueuePage","advancedVisible","setAdvancedVisible","useHookState","clipQueue","clipMem","clipMemory","current","currentClip","token","accessToken","name","userChannel","softLimit","softClipLimit","limitReached","softClipCount","statusText","useEffect","TwitchChat","connect","disconnect","hash","nextClip","acceptClips","newChannel","prompt","changeChannel","newLimit","toString","Number","isInteger","setSoftClipLimit","message","getUrlFromMessage","ClipFinder","findByUrl","then","Date","now","addClip","clearQueue","clearMemory"],"mappings":"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","file":"static/js/4.dbc6b2cb.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import { useState } from \"@hookstate/core\";\nimport Button from \"../components/Button\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport { isLoggedIn, logOut } from \"../store/user\";\n\nfunction Header() {\n  const loggedIn = useState(isLoggedIn);\n\n  return (\n    <header className=\"flex mb-4 pl-16 pr-32 pt-2 pb-2 bg-gray-800\">\n      <h1>Twitch Clip Queue</h1>\n      <div className=\"flex-grow\"></div>\n      <div>\n        {loggedIn.get() ? (\n          <Button onClick={async () => await logOut()}>Logout</Button>\n        ) : (\n          <Button\n            onClick={() => TwitchAuth.redirectToLogin()}\n          >\n            Login with Twitch\n          </Button>\n        )}\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport Header from './Header';\n\ninterface PageProps {\n  fullWidth?: boolean;\n\n  children?: ReactNode | undefined;\n}\n\nfunction Page({ children, fullWidth = false }: PageProps) {\n  const klass = fullWidth ? 'w-full px-16' : 'lg:container lg:mx-auto';\n  return (\n    <>\n      <Header />\n      <div className={klass}>{children}</div>\n    </>\n  );\n}\n\nexport default Page;\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\nimport { addButtonColour } from './Button';\r\n\r\ninterface ToggleProps extends ButtonHTMLAttributes<any> {\r\n  pressed: boolean;\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Toggle({ pressed, className, colour, children, onClick, ...props }: ToggleProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  if (pressed) {\r\n    classes += ' pressed';\r\n  }\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n","import React from 'react';\nimport Button from '../../components/Button';\nimport { Clip } from '../../models';\nimport { removeClip, selectCurrentClip } from '../../store/queue';\n\nexport interface ClipCardProps {\n  clip: Clip;\n}\n\nfunction ClipCard({ clip }: ClipCardProps) {\n  const { thumbnailUrl, id, provider, url, title, game, submitter, submitters, channel } = clip;\n  const submitterCount = submitters?.length ?? 0;\n  return (\n    <div className={'clip max-w-sm rounded overflow-hidden flex flex-col '}>\n      {thumbnailUrl && <img className=\"w-full cursor-pointer\" src={thumbnailUrl} alt={title} onClick={() => selectCurrentClip({ id, provider })}/>}\n      <div className=\"h-full w-full relative\">\n        <div className=\"px-2 py-1 \">\n          <h4 className=\"font-bold text-sm mb-1 w-full overflow-hidden whitespace-nowrap overflow-ellipsis\">\n            <a className=\"text-black no-underline\" href={url} target=\"_blank\" rel=\"noreferrer\">\n              {title}\n            </a>\n          </h4>\n          <p className=\"text-gray-900 text-xs mb-1 font-normal\">\n            <span className=\"font-bold\">{channel} </span>\n            {game && (\n              <span>\n                playing&nbsp;<span className=\"font-bold\">{game}</span>\n              </span>\n            )}\n          </p>\n          <p className=\"text-gray-900 text-xs font-normal\">\n            {submitter && (\n              <>\n                Submitted by <span className=\"font-bold\">{submitter.displayName ?? submitter.userName}</span>\n              </>\n            )}\n            <span className=\"text-xs\">{submitterCount > 0 && ' +' + submitterCount}</span>\n          </p>\n        </div>\n        <div className=\"absolute flex right-1 bottom-1 clip-buttons space-x-1\">\n          <Button colour=\"green\" onClick={() => selectCurrentClip({ id, provider })}>\n            &raquo;\n          </Button>\n          <Button colour=\"red\" onClick={() => removeClip({ id, provider })}>\n            &times;\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport { Clip } from '../../models';\nimport ClipCard from './ClipCard';\nimport { useState } from '@hookstate/core';\nimport { acceptingClips } from '../../store/queue';\n\nexport interface ClipRollProps {\n  clips: Clip[];\n  clipLimit?: number;\n}\n\nfunction ClipRoll({ clips }: ClipRollProps) {\n  const isAcceptingClips = useState(acceptingClips).get();\n\n  return (\n    <div className=\"w-full overflow-y-scroll h-full\">\n      {!clips.length && (\n        <strong>No clips in queue. {isAcceptingClips && <>Send some in chat!</>}</strong>\n      )}\n      {clips.slice(0, 100).map((clip) => (\n        <div key={`${clip.provider}_${clip.id}`} className=\"mb-4\">\n          <ClipCard clip={clip} />\n        </div>\n      ))}\n      <div className=\"mb-16\"></div>\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import React from 'react';\r\nimport { formatDistanceToNow, parseISO } from 'date-fns';\r\nimport { Clip } from '../../models';\r\nimport { CommonProps } from '../../common/props';\r\nimport { reloadClip } from '../../store/queue';\r\n\r\nexport interface PlayerProps extends CommonProps {\r\n  clip: Clip;\r\n}\r\n\r\nfunction Player(props: PlayerProps) {\r\n  const {\r\n    clip: { channel, title, timestamp, startTime, game, submitter, submitters },\r\n  } = props;\r\n  const submitterCount = submitters?.length ?? 0;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"player player-container\">\r\n        <PlayerSwitch {...props} />\r\n      </div>\r\n      <div className=\"player-title-container\">\r\n        <h2 className=\"font-bold mb-1\">\r\n          {title ?? <>&nbsp;</>}\r\n          {startTime && (\r\n            <small className=\"text-gray-700\">\r\n              {' ('}start at{' '}\r\n              <span className=\"cursor-pointer underline\" onClick={() => reloadClip()}>\r\n                {startTime}\r\n              </span>\r\n              {')'}\r\n            </small>\r\n          )}\r\n        </h2>\r\n        <p className=\"text-gray-500 text-sm font-normal\">\r\n          {channel ? (\r\n            <>\r\n              <span className=\"font-bold\">{channel}</span>\r\n              {game && (\r\n                <span>\r\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\r\n                </span>\r\n              )}\r\n              , submitted by <span className=\"font-bold\">{submitter?.displayName ?? submitter?.userName}</span>\r\n              {submitterCount > 0 && <span> and {submitterCount} other(s)</span>}\r\n              {timestamp && <span>, created {formatDistanceToNow(parseISO(timestamp))} ago</span>}\r\n            </>\r\n          ) : (\r\n            <>&nbsp;</>\r\n          )}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PlayerSwitch({ clip }: PlayerProps) {\r\n  switch (clip.provider) {\r\n    case undefined:\r\n      return <></>;\r\n    case 'twitch-clip':\r\n      return (\r\n        <iframe\r\n          src={`https://clips.twitch.tv/embed?clip=${clip.id}&autoplay=true&parent=${window.location.hostname}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n    case 'twitch-vod':\r\n      return (\r\n        <iframe\r\n          src={`https://player.twitch.tv/?video=${clip.id}&autoplay=true&parent=${window.location.hostname}&time=${clip.startTime}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n    case 'youtube':\r\n      return (\r\n        <iframe\r\n          src={`https://www.youtube.com/embed/${clip.id}?autoplay=1&start=${clip.startTime ?? ''}`}\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          className=\"player\"\r\n          allowFullScreen={true}\r\n          title={clip.title}\r\n        ></iframe>\r\n      );\r\n  }\r\n\r\n  return <span>Provider not supported: {clip.provider}</span>;\r\n}\r\n\r\nexport default Player;\r\n","import React, { useEffect, useState } from 'react';\nimport { useState as useHookState } from '@hookstate/core';\nimport Button from '../../components/Button';\nimport Toggle from '../../components/Toggle';\nimport ClipFinder from '../../services/ClipFinder';\nimport TwitchChat from '../../services/TwitchChat';\nimport {\n  acceptClips,\n  acceptingClips,\n  addClip,\n  clearMemory,\n  clearQueue,\n  clipMemory,\n  clipQueue,\n  currentClip,\n  nextClip,\n  reloadClip,\n  setSoftClipLimit,\n  softClipCount,\n  softClipLimit,\n} from '../../store/queue';\nimport { accessToken, changeChannel, userChannel, userName } from '../../store/user';\nimport ClipRoll from './ClipRoll';\nimport Player from './Player';\nimport './styles.css';\nimport Page from '../Page';\nimport { getUrlFromMessage } from '../../common/utils';\n\nfunction QueuePage() {\n  const [advancedVisible, setAdvancedVisible] = useState(false);\n\n  const isAcceptingClips = useHookState(acceptingClips).get();\n  const clips = useHookState(clipQueue).get();\n  const clipMem = useHookState(clipMemory).get();\n  const current = useHookState(currentClip).get();\n\n  const token = useHookState(accessToken).get();\n  const name = useHookState(userName).get();\n  const channel = useHookState(userChannel).get();\n  const softLimit = useHookState(softClipLimit).get();\n\n  const limitReached = useHookState(softClipCount).get() >= softLimit;\n\n  let statusText = 'Clip submissions are open. Send some clips in chat!';\n  if (!isAcceptingClips) {\n    statusText = 'Clip submissions are closed.';\n  } else if (softLimit > 0 && limitReached) {\n    statusText = 'Clip limit reached. Send clips queued by others to boost them to the top 👆';\n  }\n\n  useEffect(() => {\n    TwitchChat.connect();\n    return () => {\n      TwitchChat.disconnect();\n    };\n  }, [token]);\n\n  return (\n    <Page fullWidth={true}>\n      <div className=\"w-full queue-page\">\n        <Player clip={current} key={current.hash} />\n        <div className=\"buttons-container relative\">\n          <div className=\"flex w-full\">\n            <Button colour=\"green\" className=\"mr-2\" onClick={() => nextClip()}>\n              Next &raquo;\n            </Button>\n            {!!softLimit && (\n              <Button\n                colour=\"red\"\n                className=\"mr-2\"\n                onClick={() => nextClip(true)}\n                title=\"Skipping a clip opens up a slot for another clip to be posted if gates are still open\"\n              >\n                &times; Skip\n              </Button>\n            )}\n            <Toggle pressed={isAcceptingClips} className=\"mr-2\" onClick={() => acceptClips(!isAcceptingClips)}>\n              {isAcceptingClips ? <>Close the floodgates! 🌊</> : <>Open the floodgates! 🚪</>}\n            </Toggle>\n            <Toggle pressed={advancedVisible} onClick={() => setAdvancedVisible(!advancedVisible)}>\n              ⚙️\n            </Toggle>\n\n            <div className=\"ml-4 font-bold text-xl leading-loose\">{statusText}</div>\n          </div>\n          {advancedVisible && (\n            <div className=\"absolute flex -top-20 pb-1 pt-7 bg-gray-900 bg-opacity-70\">\n              <Button\n                className=\"mr-2\"\n                title=\"Change channel to read clips from\"\n                onClick={() => {\n                  const newChannel = prompt('Enter channel to read chat from', channel as string);\n                  if (newChannel && newChannel !== channel) {\n                    changeChannel(newChannel);\n                  }\n                }}\n              >\n                Change channel <em>({channel})</em>\n              </Button>\n              <Button\n                className=\"mr-2\"\n                title=\"Soft clip limit - after set value no new clips are accepted, current clips can still be voted on\"\n                onClick={() => {\n                  const newLimit = prompt(\n                    'Set a soft limit after which no new clips will be accepted (0 to disable)',\n                    softLimit.toString()\n                  );\n                  if (newLimit !== null && Number.isInteger(+newLimit)) {\n                    setSoftClipLimit(+newLimit);\n                  }\n                }}\n              >\n                Soft limit <em>({softLimit})</em>\n              </Button>\n              <Button\n                className=\"mr-2\"\n                title=\"Add clip from url\"\n                onClick={() => {\n                  const message = prompt('Enter clip url', '');\n                  const url = getUrlFromMessage(message ?? '');\n                  if (url) {\n                    ClipFinder.findByUrl(url).then((clip) => {\n                      if (clip) {\n                        clip.hash = Date.now().toString();\n                        clip.url = url;\n                        clip.submitter = { userName: name ?? '', displayName: name ?? '' };\n                        addClip(clip);\n                      }\n                    });\n                  }\n                }}\n              >\n                +\n              </Button>\n              <Button className=\"mr-2\" title=\"Reload current clip\" onClick={() => reloadClip()}>\n                ♻️\n              </Button>\n              <Button className=\"mr-2\" onClick={() => clearQueue()} title=\"Clear current queue\">\n                &times; Clear queue <em>({clips.length})</em>\n              </Button>\n              <Button\n                onClick={() => clearMemory()}\n                title=\"Remove all clips from permanent memory, allow all clips to be queued again\"\n              >\n                &times; Purge memory <em>({clipMem.length})</em>\n              </Button>\n            </div>\n          )}\n        </div>\n        <div className=\"nextup-container\">\n          <div className=\"w-full flex border-b-2 mb-2 align-text-bottom\">\n            <h2>Next up</h2>\n            <div className=\"flex-grow\"></div>\n            <h2>{clips.length}</h2>\n          </div>\n          <ClipRoll clips={clips} />\n        </div>\n      </div>\n    </Page>\n  );\n}\n\nexport default QueuePage;\n"],"sourceRoot":""}