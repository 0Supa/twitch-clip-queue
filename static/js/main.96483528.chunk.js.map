{"version":3,"sources":["store/user.ts","components/ForkMeOnGithub.tsx","pages/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx","common/analytics.ts","common/logging.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","services/TwitchAuth.ts","common/utils.ts","services/TwitchChat.ts","common/commands.ts","store/queue.ts","store/helpers.ts"],"names":["isLoggedIn","createState","accessToken","idToken","userName","userChannel","createPersistentState","logIn","auth","id","username","set","get","trace","toLowerCase","Date","getDay","clipQueue","queue","title","channel","provider","thumbnailUrl","submitter","displayName","submitters","Array","game","logOut","a","token","TwitchAuth","revokeToken","changeChannel","TwitchChat","leaveChannel","joinChannel","ForkMeOnGithub","href","target","rel","className","xmlns","width","height","viewBox","fill","d","style","WebkitTransformOrigin","transformOrigin","Router","BrowserRouter","HashRouter","HomePage","React","lazy","QueuePage","Routes","loggedIn","useState","fallback","basename","process","path","to","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","processAuth","ReactDOM","render","StrictMode","document","getElementById","logger","createLogger","umami","window","eventQueue","value","type","debug","push","e","shift","trackView","trackEvent","LogLevel","globalLogLevel","setLogLevel","level","info","ConsoleLogger","name","message","data","this","log","warn","error","messageWithName","console","__setLogLevel","TwitchApiClient","axios","create","baseURL","headers","TwitchApi","getClip","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","providerName","canHandle","url","uri","URL","hostname","endsWith","pathname","includes","tryGetClip","getInfo","fromMemory","getMemorizedClip","clipInfo","broadcaster_name","game_id","thumbnail_url","split","created_at","videoUrl","timestamp","idStart","lastIndexOf","slice","TwitchClipProvider","startTime","user_name","replace","searchParams","TwitchVodProvider","YoutubeApi","undefined","author_name","providers","ClipFinder","findByUrl","clip","hash","now","toString","getInfoByUrl","TWITCH_CLIENT_ID","getLoginUrl","encodeURI","redirectToLogin","location","assign","authInfo","substring","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","base64","jsonPayload","atob","map","c","charCodeAt","join","JSON","parse","parseJwt","preferred_username","post","getUrlFromMessage","urlStart","indexOf","urlEnd","client","commands","queuenext","nextClip","queueclose","acceptClips","queueopen","queueclear","clearQueue","queuepurgememory","clearMemory","queueautoplay","val","toggleAutoplay","queuesoftlimit","limit","Number","isInteger","setSoftClipLimit","queueremove","startsWith","removeClip","handleTimeout","filter","some","forEach","length","memory","clipMemory","find","same","none","disconnect","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","identity","password","connection","reconnect","secure","on","reason","_channel","userstate","self","mod","badges","substr","commandName","args","command","acceptingClips","addClip","handleMessage","_username","handleMessageDeleted","catch","setTimeout","part","currentClip","softClipLimit","softClipCount","autoplay","useReactPlayer","autoplayTimeoutHandle","queuedState","queued","sort","b","uncount","next","stringify","Math","max","cancelDelayedNextClip","selectCurrentClip","getQueuedClip","index","findIndex","accept","reloadClip","ap","delayedNextClip","timeoutHandle","clearTimeout","initialValue","state","attach","Persistence"],"mappings":"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","file":"static/js/main.96483528.chunk.js","sourcesContent":["import { createState } from \"@hookstate/core\";\nimport { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\nimport { clipQueue } from \"./queue\";\n\nexport const isLoggedIn = createState<boolean>(false);\n\nexport const accessToken = createState<string | null>(null);\nexport const idToken = createState<string | null>(null);\n\nexport const userName = createState<string | null>(null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n\n  if (!userChannel.get()) {\n    userChannel.set(username);\n  }\n\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n\n  // temp easter egg\n  if (username.toLowerCase() === 'wolfabelle' && (new Date()).getDay() === 5) {\n    clipQueue.set(queue => {\n      return [{\n        title: 'ITS FRIDAY THEN, ITS SATURDAY, SUNDAY! GO MUFASA!',\n        channel: 'MUFASA',\n        id: 'kfVsfOSbJY0',\n        provider: 'youtube',\n        thumbnailUrl: 'https://i.ytimg.com/vi/1TewCPi92ro/hqdefault.jpg',\n        submitter: { displayName: 'Friday', userName: '' },\n        submitters: new Array(69420),\n        game: 'Friday',\n      }, ...queue]\n    })\n  }\n  //\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  isLoggedIn.set(false);\n\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n","import React from 'react';\n\ninterface ForkMeOnGithubProps {\n  href: string;\n}\n\nfunction ForkMeOnGithub({ href }: ForkMeOnGithubProps) {\n  return (\n    <a href={href} target=\"_blank\" rel=\"noreferrer\" title=\"Fork me on GitHub\" className=\"opacity-40 hover:opacity-75\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"52\"\n        height=\"52\"\n        viewBox=\"0 0 250 250\"\n        className=\"absolute top-0 right-0\"\n        fill=\"#1f2937\"\n      >\n        <path d=\"M0 0l115 115h15l12 27 108 108V0z\" fill=\"#000\" />\n        <path\n          d=\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\"\n          style={{ WebkitTransformOrigin: '130px 106px', transformOrigin: '130px 106px' }}\n        />\n        <path d=\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\" />\n      </svg>\n    </a>\n  );\n}\n\nexport default ForkMeOnGithub;\n","import { useState } from '@hookstate/core';\nimport React from 'react';\nimport { Suspense } from 'react';\nimport { BrowserRouter, HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn } from '../store/user';\n\nlet Router = BrowserRouter;\nif (process.env.REACT_APP_USE_HASHROUTER === 'true') {\n\tRouter = HashRouter;\n}\n\nconst HomePage = React.lazy(() => import('./Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./Queue/QueuePage'));\n\nfunction Routes() {\n  const loggedIn = useState(isLoggedIn).get();\n\n  return (\n    <Suspense fallback={<div></div>}>\n      <Router basename={process.env.REACT_APP_BASEPATH}>\n        <Switch>\n          <Route path=\"/queue\">\n            {loggedIn ? <QueuePage /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact={true} path=\"/\">\n            {!loggedIn ? <HomePage /> : <Redirect to=\"/queue\" />}\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport ForkMeOnGithub from './components/ForkMeOnGithub';\nimport Routes from './pages/Routes';\n\n\nfunction App() {\n  return (\n    <>\n      <ForkMeOnGithub href=\"https://github.com/JakeMiki/twitch-clip-queue\" />\n      <Routes />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport TwitchAuth from \"./services/TwitchAuth\";\n\nTwitchAuth.processAuth();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        if (e.type === 'view') {\n          umami.trackView(`${process.env.REACT_APP_BASEPATH}${e.value}`);\n        } else {\n          umami.trackEvent(e.value, e.type);\n        }\n      }\n    }\n  } catch {}\n}\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { createLogger } from '../../common/logging';\r\nimport { Clip, ClipInfo, Provider } from '../../models';\r\nimport { getGameName } from '../../store/dictionaries';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst providerName = 'twitch-clip';\r\nconst logger = createLogger(`${providerName} provider`);\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'clips.twitch.tv') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/clip/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const { id } = getInfo(url) ?? {};\r\n\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: providerName,\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getClip(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.broadcaster_name,\r\n        game: await getGameName(clipInfo.game_id),\r\n        provider: providerName,\r\n        thumbnailUrl: clipInfo.thumbnail_url,\r\n        videoUrl: clipInfo.thumbnail_url.split('-preview-')[0] + '.mp4',\r\n        title: clipInfo.title,\r\n        timestamp: clipInfo.created_at,\r\n      };\r\n    }\r\n  } catch(e) {\r\n    logger.error('tryGetClip', e);\r\n  }\r\n};\r\n\r\nconst getInfo = (url: string): ClipInfo | undefined => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return undefined;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    return {\r\n      id,\r\n      provider: providerName,\r\n    }\r\n  } catch(e) {\r\n    logger.error('getInfo', e);\r\n  }\r\n};\r\n\r\nconst TwitchClipProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n  getInfo,\r\n};\r\n\r\nexport default TwitchClipProvider;\r\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst providerName = 'twitch-vod';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/videos/')) {\n      return true;\n    }\n    if (uri.pathname.includes('/video/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id, startTime } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getVideo(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.user_name,\n        provider: providerName,\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\n        title: clipInfo.title,\n        startTime: startTime,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch(e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n    const startTime = uri.searchParams.get('t');\n\n    if (!startTime) {\n      return undefined;\n    }\n\n    return {\n      id,\n      provider: providerName,\n      startTime,\n    }\n  } catch(e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst TwitchVodProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n};\n\nexport default TwitchVodProvider;\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { createLogger } from '../../common/logging';\nimport { Clip, ClipInfo, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport YoutubeApi from '../YoutubeApi';\n\nconst providerName = 'youtube';\nconst logger = createLogger(`${providerName} provider`);\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'youtu.be') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('youtube.com')) {\n    return true;\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const { id, startTime } = getInfo(url) ?? {};\n\n    if (!id) {\n      return;\n    }\n\n\n    const fromMemory = getMemorizedClip({\n      provider: providerName,\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await YoutubeApi.getClip(id);\n\n    return {\n      id,\n      channel: clipInfo?.author_name ?? 'YouTube',\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\n      provider: 'youtube',\n      title: clipInfo?.title ?? id,\n      startTime,\n    };\n  } catch(e) {\n    logger.error('tryGetClip', e);\n  }\n};\n\nconst getInfo = (url: string): ClipInfo | undefined => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return undefined;\n    }\n\n    let id: string | undefined = undefined;\n    if (uri.hostname === 'youtu.be' || uri.pathname.includes('shorts')) {\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\n      id = uri.pathname.slice(idStart).split('?')[0];\n    } else if (uri.hostname.endsWith('youtube.com')) {\n      id = uri.searchParams.get('v') ?? undefined;\n    }\n\n    if (!id) {\n      return undefined;\n    }\n\n\n    const startTime = uri.searchParams.get('t') ?? undefined;\n\n    return {\n      id,\n      provider: providerName,\n      startTime\n    }\n  } catch(e) {\n    logger.error('getInfo', e);\n  }\n};\n\nconst YouTubeProvider: Provider = {\n  canHandle,\n  tryGetClip,\n  getInfo,\n};\n\nexport default YouTubeProvider;\n","import { Clip, ClipInfo } from '../models';\r\nimport TwitchClipProvider from './providers/twitch-clip';\r\nimport TwitchVodProvider from './providers/twitch-vod';\r\nimport YouTubeProvider from './providers/youtube';\r\n\r\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\r\n\r\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\r\n  for (const provider of providers) {\r\n    if (!provider.canHandle(url)) {\r\n      continue;\r\n    }\r\n\r\n    const clip = await provider.tryGetClip(url);\r\n\r\n    if (clip) {\r\n      clip.hash = Date.now().toString();\r\n      return clip;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst getInfoByUrl = (url: string): ClipInfo | undefined => {\r\n  for (const provider of providers) {\r\n    const clipInfo = provider.getInfo(url);\r\n\r\n    if (clipInfo) {\r\n      return clipInfo;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ClipFinder = {\r\n  findByUrl,\r\n  getInfoByUrl,\r\n};\r\n\r\nexport default ClipFinder;\r\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","export const getUrlFromMessage = (message: string) => {\n\n  const urlStart = message.indexOf('http');\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    return url;\n  }\n\n  return undefined;\n};\n","import { createLogger } from '../common/logging';\r\nimport { getUrlFromMessage } from '../common/utils';\r\nimport { acceptingClips, addClip, clipMemory, clipQueue, removeClip } from '../store/queue';\r\nimport { accessToken, userChannel, userName } from '../store/user';\r\nimport { Client, Userstate } from 'tmi.js';\r\nimport ClipFinder from './ClipFinder';\r\nimport { none } from '@hookstate/core';\r\nimport { commands } from '../common/commands';\r\nimport { same } from '../store/helpers';\r\n\r\nconst logger = createLogger('Twitch Chat');\r\nlet client: Client;\r\n\r\nconst handleMessage = (userstate: Userstate, message: string, self: boolean) => {\r\n  if (message.startsWith('!')) {\r\n    logger.debug('Userstate', userstate);\r\n    if (!userstate.mod && userstate.badges?.['broadcaster'] !== '1') {\r\n      return;\r\n    }\r\n\r\n    const [commandName, ...args] = message.substr(1).split(' ');\r\n\r\n    const command = commands[commandName];\r\n    if (!command) {\r\n      return;\r\n    }\r\n\r\n    command(...args);\r\n    return;\r\n  }\r\n\r\n  if (!acceptingClips.get() && !self) {\r\n    return;\r\n  }\r\n\r\n  const url = getUrlFromMessage(message);\r\n\r\n  if (url) {\r\n    logger.debug('[handleMessage] Found url:', url);\r\n\r\n    ClipFinder.findByUrl(url).then((clip) => {\r\n      if (clip) {\r\n        clip.url = url;\r\n        clip.submitter = {\r\n          userName: userstate.username,\r\n          displayName: userstate['display-name'],\r\n        };\r\n        addClip(clip);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst handleMessageDeleted = (message: string) => {\r\n  const url = getUrlFromMessage(message);\r\n\r\n  if (url) {\r\n    logger.debug('[handleMessageDeleted] Found url:', url);\r\n\r\n    ClipFinder.findByUrl(url).then((clip) => {\r\n      if (clip) {\r\n        removeClip(clip);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst handleTimeout = (username: string) => {\r\n  const clipsFromUser = clipQueue.filter(\r\n    (clip) => clip.submitter.get()?.userName === username || clip.submitters.get()?.some((s) => s.userName === username)\r\n  );\r\n\r\n  clipsFromUser.forEach((clip) => {\r\n    if (clip.submitter.get()?.userName === username) {\r\n      if (!clip.submitters.get()?.length) {\r\n        const memory = clipMemory.find((c) => same(c.get(), clip.get()));\r\n        memory?.set(none);\r\n        clip.set(none);\r\n      } else {\r\n        clip.submitter.set(clip.submitters.get()?.[0]);\r\n        clip.submitters.set((submitters) => {\r\n          submitters?.shift();\r\n          return submitters;\r\n        });\r\n      }\r\n    } else {\r\n      clip.submitters.set((submitters) => submitters?.filter((s) => s.userName !== username));\r\n    }\r\n  });\r\n};\r\n\r\nconst connect = () => {\r\n  client = new Client({\r\n    options: {\r\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\r\n      skipUpdatingEmotesets: true,\r\n      skipMembership: true,\r\n    } as any,\r\n    logger: {\r\n      error: logger.error.bind(logger),\r\n      info: logger.info.bind(logger),\r\n      warn: logger.warn.bind(logger),\r\n    },\r\n    identity: {\r\n      username: userName.get() as string,\r\n      password: `oauth:${accessToken.get()}`,\r\n    },\r\n    connection: {\r\n      reconnect: true,\r\n      secure: true,\r\n    },\r\n  });\r\n\r\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\r\n  client.on('message', (_channel, userstate, message, self) => handleMessage(userstate, message, self));\r\n  client.on('messagedeleted', (_channel, _username, message) => handleMessageDeleted(message));\r\n  client.on('timeout', (_channel, username) => handleTimeout(username));\r\n  client.on('ban', (_channel, username) => handleTimeout(username));\r\n\r\n  logger.info('Connecting and authenticating...');\r\n  client\r\n    .connect()\r\n    .then(() => {\r\n      logger.info('Connected.');\r\n      joinChannel(userChannel.get() ?? userName.get() ?? '');\r\n    })\r\n    .catch((error) => {\r\n      logger.error(error);\r\n      setTimeout(() => connect(), 5000);\r\n    });\r\n};\r\n\r\nconst disconnect = async () => {\r\n  await client?.disconnect();\r\n};\r\n\r\nconst joinChannel = async (channel: string) => {\r\n  logger.info('Joining channel', channel);\r\n  await client.join(channel.toLowerCase());\r\n};\r\n\r\nconst leaveChannel = async (channel: string) => {\r\n  logger.info('Leaving channel', channel);\r\n  await client.part(channel.toLowerCase());\r\n};\r\n\r\nconst TwitchChat = {\r\n  connect,\r\n  disconnect,\r\n  joinChannel,\r\n  leaveChannel,\r\n};\r\n\r\nexport default TwitchChat;\r\n","import ClipFinder from '../services/ClipFinder';\r\nimport { acceptClips, clearMemory, clearQueue, nextClip, removeClip, setSoftClipLimit, toggleAutoplay } from '../store/queue';\r\n\r\nconst queueremove: (url: string) => void = (url) => {\r\n  if (!url) {\r\n    return;\r\n  }\r\n\r\n  if (url.startsWith('http')) {\r\n    const clipInfo = ClipFinder.getInfoByUrl(url);\r\n    if (clipInfo) {\r\n      removeClip(clipInfo);\r\n    }\r\n  }\r\n};\r\n\r\nexport const commands: Record<string, (...args: string[]) => void> = {\r\n  queuenext: () => nextClip(),\r\n  queueclose: () => acceptClips(false),\r\n  queueopen: () => acceptClips(true),\r\n  queueclear: () => clearQueue(),\r\n  queuepurgememory: () => clearMemory(),\r\n  queueautoplay: (val) =>\r\n    toggleAutoplay(['1', 'on', 'true'].includes(val) ? true : ['0', 'off', 'false'].includes(val) ? false : undefined),\r\n  queuesoftlimit: (limit) => limit !== null && Number.isInteger(+limit) && setSoftClipLimit(+limit),\r\n  queueremove,\r\n};\r\n","import { createState, none } from '@hookstate/core';\r\nimport { trace } from '../common/analytics';\r\nimport { Clip, ClipInfo, ClipSubmitter } from '../models';\r\nimport { createPersistentState, same } from './helpers';\r\n\r\nexport const currentClip = createState({} as Clip);\r\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\r\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\r\nexport const acceptingClips = createState(false);\r\nexport const softClipLimit = createPersistentState('softClipLimit', 0);\r\nexport const softClipCount = createState(0);\r\nexport const autoplay = createPersistentState('autoplay', false);\r\nexport const useReactPlayer = createState(false);\r\nexport const autoplayTimeoutHandle = createState(-1);\r\n\r\nexport const addClip = (clip: Clip): void => {\r\n  const queuedState = clipQueue.find((c) => same(c.get(), clip));\r\n  const queued = queuedState?.get();\r\n  const limit = softClipLimit.get();\r\n\r\n  if (queued) {\r\n    const sameSubmitter =\r\n      queued.submitter?.userName === clip.submitter?.userName ||\r\n      (queued.submitters?.find((s) => s.userName === clip.submitter?.userName) ?? false);\r\n\r\n    if (!sameSubmitter) {\r\n      queuedState?.submitters.set((submitters) => [...(submitters ?? []), clip.submitter as ClipSubmitter]);\r\n      clipQueue.set((queue) => queue.sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0)));\r\n    }\r\n\r\n    return;\r\n  } else if (limit && softClipCount.get() >= limit) {\r\n    return;\r\n  } else if (getMemorizedClip(clip)) {\r\n    return;\r\n  }\r\n\r\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\r\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\r\n  softClipCount.set((c) => c + 1);\r\n\r\n  trace('clip-added');\r\n};\r\n\r\nexport const nextClip = (uncount = false): void => {\r\n  const next = clipQueue[0]?.get();\r\n  currentClip.set(JSON.parse(JSON.stringify(next ?? {})));\r\n  clipQueue[0].set(none);\r\n\r\n  if (uncount) {\r\n    softClipCount.set((c) => Math.max(c - 1, 0));\r\n  }\r\n\r\n  useReactPlayer.set(autoplay.get());\r\n  cancelDelayedNextClip();\r\n\r\n  if (next) {\r\n    trace('next-clip');\r\n    trace('?visit-time-extender', 'view');\r\n  }\r\n};\r\n\r\nexport const getMemorizedClip = (clip: ClipInfo): Clip | undefined => {\r\n  const memory = clipMemory.find((c) => same(c.get(), clip));\r\n  return memory?.get();\r\n};\r\n\r\nexport const getQueuedClip = (clip: ClipInfo): Clip | undefined => {\r\n  const queue = clipQueue.find((c) => same(c.get(), clip));\r\n  return queue?.get();\r\n};\r\n\r\nexport const selectCurrentClip = (clip: Clip): void => {\r\n  const queued = getQueuedClip(clip);\r\n  if (queued) {\r\n    useReactPlayer.set(autoplay.get());\r\n    currentClip.set(JSON.parse(JSON.stringify(queued)));\r\n    removeClip(queued);\r\n  }\r\n};\r\n\r\nexport const removeClip = (clip: ClipInfo): void => {\r\n  const index = clipQueue.findIndex((c) => same(c.get(), clip));\r\n  clipQueue[index].set(none);\r\n  softClipCount.set((c) => Math.max(c - 1, 0));\r\n};\r\n\r\nexport const clearQueue = (): void => {\r\n  clipQueue.set([]);\r\n  currentClip.set({});\r\n  softClipCount.set(0);\r\n\r\n  trace('clear-queue');\r\n};\r\n\r\nexport const clearMemory = (): void => {\r\n  clipMemory.set([...(clipQueue.get() ?? [])]);\r\n\r\n  trace('purge-memory');\r\n};\r\n\r\nexport const acceptClips = (accept: boolean): void => {\r\n  acceptingClips.set(accept);\r\n  if (accept) {\r\n    softClipCount.set(clipQueue.length);\r\n  }\r\n\r\n  trace(`accept-clips-${accept}`);\r\n};\r\n\r\nexport const reloadClip = (): void => {\r\n  currentClip.hash.set(() => Date.now().toString());\r\n};\r\n\r\nexport const setSoftClipLimit = (limit: number): void => {\r\n  softClipLimit.set(limit);\r\n\r\n  trace('set-soft-limit');\r\n};\r\n\r\nexport const toggleAutoplay = (ap?: boolean): void => {\r\n  ap = ap ?? !autoplay.get();\r\n  autoplay.set(ap);\r\n\r\n  if (ap) {\r\n    useReactPlayer.set(true);\r\n  } else {\r\n    cancelDelayedNextClip();\r\n  }\r\n\r\n  trace(`toggle-autoplay-${ap}`);\r\n};\r\n\r\nexport const delayedNextClip = (): void => {\r\n  cancelDelayedNextClip();\r\n\r\n  const timeoutHandle = setTimeout(() => nextClip(), 1000) as unknown as number;\r\n  autoplayTimeoutHandle.set(timeoutHandle);\r\n};\r\n\r\nexport const cancelDelayedNextClip = (): void => {\r\n  let timeoutHandle = autoplayTimeoutHandle.get();\r\n  if (timeoutHandle) {\r\n    clearTimeout(timeoutHandle);\r\n  }\r\n};\r\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { ClipInfo } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: ClipInfo, b: ClipInfo) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n"],"sourceRoot":""}