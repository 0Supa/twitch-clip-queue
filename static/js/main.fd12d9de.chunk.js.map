{"version":3,"sources":["store/helpers.ts","store/queue.ts","services/TwitchAuth.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","services/TwitchChat.ts","App.tsx","reportWebVitals.ts","index.tsx","store/user.ts"],"names":["createEntity","name","initialValue","entity","persistence","same","a","b","id","provider","currentClip","clipQueue","clipMemory","addClip","clip","queued","getQueuedClip","submitter","submitters","includes","newQueued","set","queue","map","c","sort","length","getMemorizedClip","memory","nextClip","next","shift","get","find","undefined","selectCurrentClip","removeClip","filter","clearQueue","clearMemory","TWITCH_CLIENT_ID","process","getLoginUrl","encodeURI","TwitchAuth","redirectToLogin","window","location","assign","processAuth","hash","authInfo","substring","split","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","token","base64","replace","jsonPayload","atob","charCodeAt","toString","slice","join","JSON","parse","parseJwt","logIn","preferred_username","revokeToken","axios","post","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","accessToken","data","getGame","gamesDictionary","getGameName","dict","game","d","canHandle","url","uri","URL","hostname","endsWith","pathname","tryGetClip","idStart","lastIndexOf","fromMemory","clipInfo","broadcaster_name","game_id","thumbnail_url","title","channel","thumbnailUrl","TwitchClipProvider","YoutubeApi","searchParams","startTime","author_name","providers","findByUrl","u","console","log","socket","ClipFinder","send","message","joinChannel","TwitchChat","connect","WebSocket","onopen","readyState","userName","userChannel","onclose","onerror","error","warn","onmessage","startsWith","raw","tagEnd","indexOf","userEnd","commandEnd","tags","t","user","command","channelEnd","messageStart","trim","parseMessage","urlStart","urlEnd","then","disconnect","close","leaveChannel","HomePage","React","lazy","QueuePage","App","loggedIn","isLoggedIn","use","className","onClick","logOut","fallback","basename","exact","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","idToken","auth","username","changeChannel"],"mappings":"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","file":"static/js/main.fd12d9de.chunk.js","sourcesContent":["import { Entity, entity, persistence } from 'simpler-state';\r\nimport { Clip } from '../models';\r\n\r\nexport function createEntity<TEntity>(\r\n  name: string,\r\n  initialValue: TEntity\r\n): Entity<TEntity> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function createAsyncEntity<TEntity>(\r\n  name: string,\r\n  initialValue: Promise<TEntity>\r\n): Entity<TEntity | undefined> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { Clip } from '../models';\nimport { createEntity, same } from './helpers';\n\nexport const currentClip = createEntity('currentClip', {} as Clip);\nexport const clipQueue = createEntity('clipQueue', [] as Clip[]);\nexport const clipMemory = createEntity('clipMemory', [] as Clip[]);\n\nexport const addClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter === clip.submitter || (queued.submitters?.includes(clip.submitter as string) ?? false);\n    if (!sameSubmitter) {\n      const newQueued = {\n        ...queued,\n        submitters: [...(queued?.submitters ?? []), clip.submitter as string],\n      };\n      clipQueue.set((queue) =>\n        queue\n          .map((c) => (same(c, newQueued) ? newQueued : c))\n          .sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0))\n      );\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n};\n\nexport const nextClip = (): void => {\n  clipQueue.set((queue) => {\n    const next = (queue ?? []).shift();\n\n    currentClip.set(next ?? {});\n\n    return [...queue];\n  });\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.get();\n\n  return memory?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.get();\n\n  return queue?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(queued);\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  clipQueue.set(queue => queue.filter(c => !same(c, clip)));\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n};\n","import axios from 'axios';\nimport { AuthInfo, IdToken } from '../models';\nimport { logIn } from '../store/user';\n\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\n\nconst getLoginUrl = (): string => {\n  return encodeURI(\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\n      `&response_type=token id_token` +\n      `&scope=openid chat:read` +\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\n  );\n};\n\nconst redirectToLogin = (): void => {\n  window.location.assign(getLoginUrl());\n};\n\nconst processAuth = (): void => {\n  if (!window.location.hash) {\n    return;\n  }\n\n  const authInfo = window.location.hash\n    .substring(1)\n    .split('&')\n    .reduce((authInfo, s) => {\n      const parts = s.split('=');\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\n      return authInfo;\n    }, {} as Record<string, any>) as AuthInfo;\n\n  window.location.hash = '';\n\n  if (authInfo.access_token && authInfo.id_token) {\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\n\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\n  }\n};\n\nconst revokeToken = async (token: string): Promise<void> => {\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\n};\n\nfunction parseJwt(token: string) {\n  if (!token) {\n    return;\n  }\n\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      })\n      .join('')\n  );\n\n  return JSON.parse(jsonPayload);\n}\n\nconst TwitchAuth = {\n  getLoginUrl,\n  redirectToLogin,\n  processAuth,\n  revokeToken,\n};\n\nexport default TwitchAuth;\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createEntity } from \"./helpers\";\r\n\r\nconst gamesDictionary = createEntity('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\nimport { getGameName } from '../../store/dictionaries';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'clips.twitch.tv') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/clip/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-clip',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getClip(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.broadcaster_name,\n        game: await getGameName(clipInfo.game_id),\n        provider: 'twitch-clip',\n        thumbnailUrl: clipInfo.thumbnail_url,\n        title: clipInfo.title,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchClipProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchClipProvider;\n","import axios from 'axios';\n\nconst getClip = async (id: string): Promise<any> => {\n  try {\n    const { data } = await axios.get(\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\n    );\n    return data;\n  } catch {\n    return undefined;\n  }\n};\n\nconst YoutubeApi = {\n  getClip,\n};\n\nexport default YoutubeApi;\n","import { Clip, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport YoutubeApi from '../YoutubeApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'youtu.be') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('youtube.com')) {\n    return true;\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    let id: string | undefined = undefined;\n    if (uri.hostname === 'youtu.be') {\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\n      id = uri.pathname.slice(idStart).split('?')[0];\n    } else if (uri.hostname.endsWith('youtube.com')) {\n      id = uri.searchParams.get('v') ?? undefined;\n    }\n\n    if (!id) {\n      return;\n    }\n\n    const startTime = uri.searchParams.get('t') ?? undefined;\n\n    const fromMemory = getMemorizedClip({\n      provider: 'youtube',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await YoutubeApi.getClip(id);\n\n    return {\n      id,\n      channel: clipInfo?.author_name ?? 'YouTube',\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\n      provider: 'youtube',\n      title: clipInfo?.title ?? id,\n      startTime,\n    };\n  } catch {}\n};\n\nconst YouTubeProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default YouTubeProvider;\n","import { Clip } from '../models';\nimport { addClip } from '../store/queue';\nimport TwitchClipProvider from './providers/twitch-clip';\nimport YouTubeProvider from './providers/youtube';\n\nconst providers = [TwitchClipProvider, YouTubeProvider];\n\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\n  for (const provider of providers) {\n    if (!provider.canHandle(url)) {\n      continue;\n    }\n\n    const clip = await provider.tryGetClip(url);\n\n    if (clip) {\n      return clip;\n    }\n  }\n\n  return undefined;\n};\n\n(window as any).clip = async (s: string, u: string) => {\n  const clip = await findByUrl(u);\n  if (clip) {\n    console.log('adding clip', clip);\n    clip.submitter = s;\n    addClip(clip);\n  }\n};\n\nconst ClipFinder = {\n  findByUrl,\n};\n\nexport default ClipFinder;\n","import { addClip } from '../store/queue';\r\nimport { accessToken, userChannel, userName } from '../store/user';\r\nimport ClipFinder from './ClipFinder';\r\n\r\nlet socket: WebSocket;\r\n\r\nconst send = (message: string) => {\r\n  socket.send(message);\r\n};\r\n\r\nconst parseMessage = (raw: string) => {\r\n  const tagEnd = raw[0] === '@' ? raw.indexOf(' ') : -1;\r\n  const userEnd = raw.indexOf(' ', tagEnd + 1);\r\n  const commandEnd = raw.indexOf(' ', userEnd + 1);\r\n\r\n  const tags =\r\n    tagEnd > 0\r\n      ? raw\r\n          .slice(1, tagEnd)\r\n          .split(';')\r\n          .reduce((t, c) => {\r\n            const parts = c.split('=', 2);\r\n            t[parts[0]] = parts[1];\r\n            return t;\r\n          }, {} as Record<string, string>)\r\n      : {};\r\n\r\n  const user = raw.slice(tagEnd + 2, raw.indexOf('!', tagEnd + 2));\r\n  const command = raw.slice(userEnd + 1, commandEnd);\r\n\r\n  if (command === 'PRIVMSG') {\r\n    const channelEnd = raw.indexOf(' ', commandEnd + 1);\r\n    const messageStart = raw.indexOf(':', channelEnd + 1);\r\n    const channel = raw.slice(commandEnd + 2, channelEnd);\r\n    const message = raw.slice(messageStart + 1).trim();\r\n    return {\r\n      channel,\r\n      user: tags['display-name'] || user,\r\n      command,\r\n      message,\r\n      tags,\r\n    };\r\n  }\r\n\r\n  return {\r\n    raw,\r\n    user: tags['display-name'] || user,\r\n    command,\r\n    tags,\r\n  };\r\n};\r\n\r\nconst connect = () => {\r\n  socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443', 'irc');\r\n\r\n  socket.onopen = () => {\r\n    if (socket !== null && socket.readyState === 1) {\r\n      console.log('[TwitchChat] Connecting and authenticating...');\r\n\r\n      send('CAP REQ :twitch.tv/tags');\r\n      send(`PASS oauth:${accessToken.get()}`);\r\n      send(`NICK ${userName.get()}`);\r\n      joinChannel(userChannel.get() as string);\r\n    }\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log('[TwitchChat] Disconnected');\r\n  };\r\n\r\n  socket.onerror = (error) => {\r\n    console.warn('[TwitchChat] Error:', error);\r\n  };\r\n\r\n  socket.onmessage = ({ data }: MessageEvent<string>) => {\r\n    if (data.startsWith('PING')) {\r\n      send('PONG :tmi.twitch.tv');\r\n    }\r\n\r\n    const message = parseMessage(data);\r\n\r\n    if (message.command === 'PRIVMSG' && message.message) {\r\n      const urlStart = message.message.indexOf('http');\r\n\r\n      if (urlStart >= 0) {\r\n        const urlEnd = message.message.indexOf(' ', urlStart);\r\n        const url = message.message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\r\n        console.log('[TwitchChat] Found url:', url);\r\n\r\n        ClipFinder.findByUrl(url).then((clip) => {\r\n          if (clip) {\r\n            clip.submitter = message.user;\r\n            addClip(clip);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nconst disconnect = () => {\r\n  socket.close();\r\n};\r\n\r\nconst joinChannel = (channel: string) => {\r\n  console.log('[TwitchChat] Joining channel', channel);\r\n  send(`JOIN #${channel}`);\r\n};\r\n\r\nconst leaveChannel = (channel: string) => {\r\n  console.log('[TwitchChat] Leaving channel', channel);\r\n  send(`PART #${channel}`);\r\n\r\n};\r\n\r\nconst TwitchChat = {\r\n  connect,\r\n  disconnect,\r\n  joinChannel,\r\n  leaveChannel,\r\n};\r\n\r\nexport default TwitchChat;\r\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport TwitchAuth from './services/TwitchAuth';\nimport { isLoggedIn, logOut } from './store/user';\n\nconst HomePage = React.lazy(() => import('./pages/Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./pages/Queue/QueuePage'));\n\nfunction App() {\n  const loggedIn = isLoggedIn.use();\n\n  return (\n    <>\n      <header className=\"flex\">\n        <h1 className=\"mb-4\">Twitch Clip Queue</h1>\n        <div className=\"flex-grow\"></div>\n        <div>\n          {loggedIn ? (\n            <button onClick={() => logOut()}>Logout</button>\n          ) : (\n            <button onClick={() => TwitchAuth.redirectToLogin()}>Login with Twitch</button>\n          )}\n        </div>\n      </header>\n      <Suspense fallback={<div></div>}>\n        <Router basename={process.env.REACT_APP_BASEPATH}>\n          <Switch>\n            <Route exact={true} path=\"/\">\n              {!loggedIn ? <HomePage /> : <QueuePage />}\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/\" />\n            </Route>\n          </Switch>\n        </Router>\n      </Suspense>\n      <footer className=\"text-xs mt-4\">\n        Created by <span className=\"font-bold\">JakeMiki</span>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { entity } from \"simpler-state\";\r\nimport TwitchAuth from \"../services/TwitchAuth\";\r\nimport TwitchChat from \"../services/TwitchChat\";\r\n\r\nexport const isLoggedIn = entity<boolean>(false);\r\n\r\nexport const accessToken = entity<string | null>(null);\r\nexport const idToken = entity<string | null>(null);\r\n\r\nexport const userName = entity<string | null>(null);\r\nexport const userChannel = entity<string | null>(null);\r\n\r\nexport const logIn = (auth: string, id: string, username: string): void => {\r\n  accessToken.set(auth);\r\n  idToken.set(id);\r\n  userName.set(username);\r\n  userChannel.set(username);\r\n  isLoggedIn.set(true);\r\n}\r\n\r\nexport const logOut = async (): Promise<void> => {\r\n  const token = accessToken.get();\r\n  accessToken.set(null);\r\n  idToken.set(null);\r\n  userName.set(null);\r\n  userChannel.set(null);\r\n  isLoggedIn.set(false);\r\n  if (token) {\r\n    await TwitchAuth.revokeToken(token);\r\n  }\r\n}\r\n\r\nexport const changeChannel = (channel: string) => {\r\n  TwitchChat.leaveChannel(userChannel.get() as string);\r\n  userChannel.set(channel);\r\n  TwitchChat.joinChannel(channel);\r\n};\r\n"],"sourceRoot":""}