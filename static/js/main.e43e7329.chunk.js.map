{"version":3,"sources":["store/helpers.ts","store/queue.ts","services/TwitchAuth.ts","components/Button.tsx","services/TwitchChat.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","App.tsx","reportWebVitals.ts","index.tsx","store/user.ts"],"names":["createEntity","name","initialValue","entity","persistence","same","a","b","id","provider","currentClip","clipQueue","clipMemory","acceptingClips","addClip","clip","queued","getQueuedClip","submitter","submitters","includes","newQueued","set","queue","map","c","sort","length","getMemorizedClip","memory","nextClip","next","shift","get","find","undefined","selectCurrentClip","removeClip","filter","clearQueue","clearMemory","acceptClips","accept","TWITCH_CLIENT_ID","process","getLoginUrl","encodeURI","TwitchAuth","redirectToLogin","window","location","assign","processAuth","hash","authInfo","substring","split","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","token","base64","replace","jsonPayload","atob","charCodeAt","toString","slice","join","JSON","parse","parseJwt","logIn","preferred_username","revokeToken","axios","post","addButtonColour","colour","classes","Button","className","children","onClick","props","socket","send","message","joinChannel","channel","console","log","TwitchChat","connect","WebSocket","onopen","readyState","accessToken","userName","userChannel","onclose","onerror","error","warn","onmessage","data","startsWith","raw","tagEnd","indexOf","userEnd","commandEnd","tags","t","user","command","channelEnd","messageStart","trim","parseMessage","urlStart","urlEnd","url","ClipFinder","findByUrl","then","disconnect","close","leaveChannel","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","game","d","canHandle","uri","URL","hostname","endsWith","pathname","tryGetClip","idStart","lastIndexOf","fromMemory","clipInfo","broadcaster_name","game_id","thumbnail_url","title","thumbnailUrl","TwitchClipProvider","user_name","startTime","searchParams","TwitchVodProvider","YoutubeApi","author_name","providers","HomePage","React","lazy","QueuePage","App","loggedIn","isLoggedIn","use","logOut","fallback","basename","exact","path","to","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","idToken","auth","username","changeChannel"],"mappings":"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","file":"static/js/main.e43e7329.chunk.js","sourcesContent":["import { Entity, entity, persistence } from 'simpler-state';\r\nimport { Clip } from '../models';\r\n\r\nexport function createEntity<TEntity>(\r\n  name: string,\r\n  initialValue: TEntity\r\n): Entity<TEntity> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function createAsyncEntity<TEntity>(\r\n  name: string,\r\n  initialValue: Promise<TEntity>\r\n): Entity<TEntity | undefined> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { entity } from 'simpler-state';\nimport { Clip } from '../models';\nimport { createEntity, same } from './helpers';\n\nexport const currentClip = createEntity('currentClip', {} as Clip);\nexport const clipQueue = createEntity('clipQueue', [] as Clip[]);\nexport const clipMemory = createEntity('clipMemory', [] as Clip[]);\nexport const acceptingClips = entity(false);\n\nexport const addClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter === clip.submitter || (queued.submitters?.includes(clip.submitter as string) ?? false);\n    if (!sameSubmitter) {\n      const newQueued = {\n        ...queued,\n        submitters: [...(queued?.submitters ?? []), clip.submitter as string],\n      };\n      clipQueue.set((queue) =>\n        queue\n          .map((c) => (same(c, newQueued) ? newQueued : c))\n          .sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0))\n      );\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n};\n\nexport const nextClip = (): void => {\n  clipQueue.set((queue) => {\n    const next = (queue ?? []).shift();\n\n    currentClip.set(next ?? {});\n\n    return [...queue];\n  });\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.get();\n\n  return memory?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.get();\n\n  return queue?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(queued);\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  clipQueue.set(queue => queue.filter(c => !same(c, clip)));\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n}\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\n\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\n  className?: string;\n  colour?: string;\n  children?: ReactNode | undefined;\n\n  onClick: () => void;\n}\n\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\n  classes = (classes || '') + ' ';\n\n  switch (colour) {\n    case 'red':\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\n    case 'green':\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\n    case 'yellow':\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\n  }\n\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\n};\n\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\n  let classes = addButtonColour(colour, className);\n\n  return (\n    <button {...props} className={classes} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import { acceptingClips, addClip } from '../store/queue';\nimport { accessToken, userChannel, userName } from '../store/user';\nimport ClipFinder from './ClipFinder';\n\nlet socket: WebSocket;\n\nconst send = (message: string) => {\n  socket.send(message);\n};\n\nconst parseMessage = (raw: string) => {\n  const tagEnd = raw[0] === '@' ? raw.indexOf(' ') : -1;\n  const userEnd = raw.indexOf(' ', tagEnd + 1);\n  const commandEnd = raw.indexOf(' ', userEnd + 1);\n\n  const tags =\n    tagEnd > 0\n      ? raw\n          .slice(1, tagEnd)\n          .split(';')\n          .reduce((t, c) => {\n            const parts = c.split('=', 2);\n            t[parts[0]] = parts[1];\n            return t;\n          }, {} as Record<string, string>)\n      : {};\n\n  const user = raw.slice(tagEnd + 2, raw.indexOf('!', tagEnd + 2));\n  const command = raw.slice(userEnd + 1, commandEnd);\n\n  if (command === 'PRIVMSG') {\n    const channelEnd = raw.indexOf(' ', commandEnd + 1);\n    const messageStart = raw.indexOf(':', channelEnd + 1);\n    const channel = raw.slice(commandEnd + 2, channelEnd);\n    const message = raw.slice(messageStart + 1).trim();\n    return {\n      channel,\n      user: tags['display-name'] || user,\n      command,\n      message,\n      tags,\n    };\n  }\n\n  return {\n    raw,\n    user: tags['display-name'] || user,\n    command,\n    tags,\n  };\n};\n\nconst connect = () => {\n  socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443', 'irc');\n\n  socket.onopen = () => {\n    if (socket !== null && socket.readyState === 1) {\n      console.log('[TwitchChat] Connecting and authenticating...');\n\n      send('CAP REQ :twitch.tv/tags');\n      send(`PASS oauth:${accessToken.get()}`);\n      send(`NICK ${userName.get()}`);\n      joinChannel(userChannel.get() as string);\n    }\n  };\n\n  socket.onclose = () => {\n    console.log('[TwitchChat] Disconnected');\n  };\n\n  socket.onerror = (error) => {\n    console.warn('[TwitchChat] Error:', error);\n  };\n\n  socket.onmessage = ({ data }: MessageEvent<string>) => {\n    if (data.startsWith('PING')) {\n      send('PONG :tmi.twitch.tv');\n    }\n\n    const message = parseMessage(data);\n\n    if (message.command === 'PRIVMSG' && message.message) {\n      if (!acceptingClips.get()) {\n        return;\n      }\n\n      const urlStart = message.message.indexOf('http');\n\n      if (urlStart >= 0) {\n        const urlEnd = message.message.indexOf(' ', urlStart);\n        const url = message.message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n        console.log('[TwitchChat] Found url:', url);\n\n        ClipFinder.findByUrl(url).then((clip) => {\n          if (clip) {\n            clip.url = url;\n            clip.submitter = message.user;\n            addClip(clip);\n          }\n        });\n      }\n    }\n  };\n};\n\nconst disconnect = () => {\n  socket.close();\n};\n\nconst joinChannel = (channel: string) => {\n  console.log('[TwitchChat] Joining channel', channel);\n  send(`JOIN #${channel}`);\n};\n\nconst leaveChannel = (channel: string) => {\n  console.log('[TwitchChat] Leaving channel', channel);\n  send(`PART #${channel}`);\n\n};\n\nconst TwitchChat = {\n  connect,\n  disconnect,\n  joinChannel,\n  leaveChannel,\n};\n\nexport default TwitchChat;\n","import axios from 'axios';\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\nimport { accessToken } from '../store/user';\n\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\n\nconst TwitchApiClient = axios.create({\n  baseURL: 'https://api.twitch.tv/helix/',\n  headers: {\n    'Client-ID': TWITCH_CLIENT_ID,\n  },\n});\n\nconst getClip = async (id: string): Promise<TwitchClip> => {\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\n    headers: {\n      Authorization: `Bearer ${accessToken.get()}`,\n    },\n  });\n\n  return data.data[0];\n};\n\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\n    headers: {\n      Authorization: `Bearer ${accessToken.get()}`,\n    },\n  });\n\n  return data.data[0];\n};\n\nconst getGame = async (id: string): Promise<TwitchGame> => {\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\n    headers: {\n      Authorization: `Bearer ${accessToken.get()}`,\n    },\n  });\n\n  return data.data[0];\n};\n\nconst TwitchApi = {\n  getClip,\n  getVideo,\n  getGame,\n};\n\nexport default TwitchApi;\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createEntity } from \"./helpers\";\r\n\r\nconst gamesDictionary = createEntity('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\r\nimport { getGameName } from '../../store/dictionaries';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'clips.twitch.tv') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/clip/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-clip',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getClip(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.broadcaster_name,\r\n        game: await getGameName(clipInfo.game_id),\r\n        provider: 'twitch-clip',\r\n        thumbnailUrl: clipInfo.thumbnail_url,\r\n        title: clipInfo.title,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchClipProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchClipProvider;\r\n","import { Clip, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/videos/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-vod',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getVideo(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.user_name,\n        provider: 'twitch-vod',\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\n        title: clipInfo.title,\n        startTime: uri.searchParams.get('t') ?? undefined,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchVodProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchVodProvider;\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport YoutubeApi from '../YoutubeApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'youtu.be') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('youtube.com')) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    let id: string | undefined = undefined;\r\n    if (uri.hostname === 'youtu.be') {\r\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\r\n      id = uri.pathname.slice(idStart).split('?')[0];\r\n    } else if (uri.hostname.endsWith('youtube.com')) {\r\n      id = uri.searchParams.get('v') ?? undefined;\r\n    }\r\n\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    const startTime = uri.searchParams.get('t') ?? undefined;\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'youtube',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await YoutubeApi.getClip(id);\r\n\r\n    return {\r\n      id,\r\n      channel: clipInfo?.author_name ?? 'YouTube',\r\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\r\n      provider: 'youtube',\r\n      title: clipInfo?.title ?? id,\r\n      startTime,\r\n    };\r\n  } catch {}\r\n};\r\n\r\nconst YouTubeProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default YouTubeProvider;\r\n","import { Clip } from '../models';\nimport TwitchClipProvider from './providers/twitch-clip';\nimport TwitchVodProvider from './providers/twitch-vod';\nimport YouTubeProvider from './providers/youtube';\n\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\n\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\n  for (const provider of providers) {\n    if (!provider.canHandle(url)) {\n      continue;\n    }\n\n    const clip = await provider.tryGetClip(url);\n\n    if (clip) {\n      return clip;\n    }\n  }\n\n  return undefined;\n};\n\nconst ClipFinder = {\n  findByUrl,\n};\n\nexport default ClipFinder;\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Button from './components/Button';\nimport TwitchAuth from './services/TwitchAuth';\nimport { isLoggedIn, logOut } from './store/user';\n\nconst HomePage = React.lazy(() => import('./pages/Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./pages/Queue/QueuePage'));\n\nfunction App() {\n  const loggedIn = isLoggedIn.use();\n\n  return (\n    <>\n      <header className=\"flex\">\n        <h1 className=\"mb-4\">Twitch Clip Queue</h1>\n        <div className=\"flex-grow\"></div>\n        <div>\n          {loggedIn ? (\n            <Button onClick={() => logOut()}>Logout</Button>\n          ) : (\n            <Button onClick={() => TwitchAuth.redirectToLogin()}>Login with Twitch</Button>\n          )}\n        </div>\n      </header>\n      <Suspense fallback={<div></div>}>\n        <Router basename={process.env.REACT_APP_BASEPATH}>\n          <Switch>\n            <Route exact={true} path=\"/\">\n              {!loggedIn ? <HomePage /> : <QueuePage />}\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/\" />\n            </Route>\n          </Switch>\n        </Router>\n      </Suspense>\n      <div className=\"flex-grow\"></div>\n      <footer className=\"text-xs mt-4\">\n        Created by{' '}\n        <span className=\"font-bold\">\n          <a href=\"https://github.com/JakeMiki\" target=\"_blank\" rel=\"noreferrer\">\n            JakeMiki\n          </a>\n        </span>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { entity } from \"simpler-state\";\r\nimport TwitchAuth from \"../services/TwitchAuth\";\r\nimport TwitchChat from \"../services/TwitchChat\";\r\n\r\nexport const isLoggedIn = entity<boolean>(false);\r\n\r\nexport const accessToken = entity<string | null>(null);\r\nexport const idToken = entity<string | null>(null);\r\n\r\nexport const userName = entity<string | null>(null);\r\nexport const userChannel = entity<string | null>(null);\r\n\r\nexport const logIn = (auth: string, id: string, username: string): void => {\r\n  accessToken.set(auth);\r\n  idToken.set(id);\r\n  userName.set(username);\r\n  userChannel.set(username);\r\n  isLoggedIn.set(true);\r\n}\r\n\r\nexport const logOut = async (): Promise<void> => {\r\n  const token = accessToken.get();\r\n  accessToken.set(null);\r\n  idToken.set(null);\r\n  userName.set(null);\r\n  userChannel.set(null);\r\n  isLoggedIn.set(false);\r\n  if (token) {\r\n    await TwitchAuth.revokeToken(token);\r\n  }\r\n}\r\n\r\nexport const changeChannel = (channel: string) => {\r\n  TwitchChat.leaveChannel(userChannel.get() as string);\r\n  userChannel.set(channel);\r\n  TwitchChat.joinChannel(channel);\r\n};\r\n"],"sourceRoot":""}