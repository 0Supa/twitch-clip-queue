{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","common/analytics.ts","store/queue.ts","services/TwitchAuth.ts","common/logging.ts","components/Button.tsx","services/TwitchChat.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","store/helpers.ts","store/user.ts"],"names":["HomePage","React","lazy","QueuePage","App","loggedIn","useState","isLoggedIn","className","get","Button","onClick","a","logOut","TwitchAuth","redirectToLogin","fallback","basename","process","exact","path","to","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","processAuth","logger","createLogger","umami","window","eventQueue","trace","value","type","debug","push","e","shift","trackEvent","currentClip","createState","clipQueue","createPersistentState","clipMemory","acceptingClips","addClip","clip","queued","getQueuedClip","submitter","submitters","includes","newQueued","set","queue","map","c","same","sort","b","length","getMemorizedClip","memory","nextClip","next","find","undefined","selectCurrentClip","removeClip","filter","clearQueue","clearMemory","acceptClips","accept","TWITCH_CLIENT_ID","getLoginUrl","encodeURI","location","assign","hash","authInfo","substring","split","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","token","base64","replace","jsonPayload","atob","charCodeAt","toString","slice","join","JSON","parse","parseJwt","logIn","preferred_username","revokeToken","axios","post","LogLevel","globalLogLevel","setLogLevel","level","info","ConsoleLogger","name","message","data","this","log","warn","error","messageWithName","console","__setLogLevel","addButtonColour","colour","classes","children","props","client","disconnect","joinChannel","channel","toLowerCase","TwitchChat","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","identity","username","userName","password","accessToken","connection","reconnect","secure","userChannel","catch","on","reason","_channel","userstate","self","urlStart","indexOf","urlEnd","url","ClipFinder","findByUrl","handleMessage","_username","leaveChannel","part","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","id","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","game","d","canHandle","uri","URL","hostname","endsWith","pathname","tryGetClip","idStart","lastIndexOf","fromMemory","provider","clipInfo","broadcaster_name","game_id","thumbnail_url","title","thumbnailUrl","TwitchClipProvider","user_name","startTime","searchParams","TwitchVodProvider","YoutubeApi","author_name","providers","initialValue","state","attach","Persistence","idToken","auth","changeChannel"],"mappings":"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","file":"static/js/main.fd6a4ac2.chunk.js","sourcesContent":["import { useState } from '@hookstate/core';\r\nimport React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport Button from './components/Button';\r\nimport TwitchAuth from './services/TwitchAuth';\r\nimport { isLoggedIn, logOut } from './store/user';\r\n\r\nconst HomePage = React.lazy(() => import('./pages/Home/HomePage'));\r\nconst QueuePage = React.lazy(() => import('./pages/Queue/QueuePage'));\r\n\r\nfunction App() {\r\n  const loggedIn = useState(isLoggedIn);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"flex\">\r\n        <h1 className=\"mb-4\">Twitch Clip Queue</h1>\r\n        <div className=\"flex-grow\"></div>\r\n        <div>\r\n          {loggedIn.get() ? (\r\n            <Button onClick={async () => await logOut()}>Logout</Button>\r\n          ) : (\r\n            <Button\r\n              onClick={() => TwitchAuth.redirectToLogin()}\r\n            >\r\n              Login with Twitch\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </header>\r\n      <Suspense fallback={<div></div>}>\r\n        <Router basename={process.env.REACT_APP_BASEPATH}>\r\n          <Switch>\r\n            <Route exact={true} path=\"/\">\r\n              {!loggedIn.get() ? <HomePage /> : <QueuePage />}\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Redirect to=\"/\" />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </Suspense>\r\n      <div className=\"flex-grow\"></div>\r\n      <footer className=\"text-xs mt-4\">\r\n        Created by{' '}\r\n        <span className=\"font-bold\">\r\n          <a href=\"https://github.com/JakeMiki\" target=\"_blank\" rel=\"noreferrer\">\r\n            JakeMiki\r\n          </a>\r\n        </span>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        umami.trackEvent(e.value, e.type);\n      }\n    }\n  } catch {}\n}\n","import { createState } from '@hookstate/core';\nimport { trace } from '../common/analytics';\nimport { Clip } from '../models';\nimport { createPersistentState, same } from './helpers';\n\nexport const currentClip = createState({} as Clip);\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\nexport const acceptingClips = createState(false);\n\nexport const addClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter === clip.submitter || (queued.submitters?.includes(clip.submitter as string) ?? false);\n    if (!sameSubmitter) {\n      const newQueued = {\n        ...queued,\n        submitters: [...(queued?.submitters ?? []), clip.submitter as string],\n      };\n      clipQueue.set((queue) =>\n        queue\n          .map((c) => (same(c, newQueued) ? newQueued : c))\n          .sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0))\n      );\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n\n  trace('clip-added');\n};\n\nexport const nextClip = (): void => {\n  clipQueue.set((queue) => {\n    const next = (queue ?? []).shift();\n\n    currentClip.set(next ?? {});\n\n    trace('next-clip');\n\n    return [...queue];\n  });\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.get();\n\n  return memory?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.get();\n\n  return queue?.find((c) => same(c, clip)) ?? undefined;\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(queued);\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  clipQueue.set(queue => queue.filter(c => !same(c, clip)));\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n\n  trace('clear-queue');\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n\n  trace('purge-memory');\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n\n  trace(`accept-clips-${accept}`);\n}\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import { createLogger } from '../common/logging';\nimport { acceptingClips, addClip } from '../store/queue';\nimport { accessToken, userChannel, userName } from '../store/user';\nimport { Client, Userstate } from 'tmi.js';\nimport ClipFinder from './ClipFinder';\n\nconst logger = createLogger('Twitch Chat');\n\nlet client: Client;\n\nconst handleMessage = (userstate: Userstate, message: string) => {\n  if (!acceptingClips.get()) {\n    return;\n  }\n\n  const urlStart = message.indexOf('http');\n\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    logger.debug('Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        clip.url = url;\n        clip.submitter = userstate['display-name'] || userstate.username;\n        addClip(clip);\n      }\n    });\n  }\n};\n\nconst connect = () => {\n  client = new Client({\n    options: {\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\n      skipUpdatingEmotesets: true,\n      skipMembership: true,\n    } as any,\n    logger: {\n      error: logger.error.bind(logger),\n      info: logger.info.bind(logger),\n      warn: logger.warn.bind(logger),\n    },\n    identity: {\n      username: userName.get() as string,\n      password: `oauth:${accessToken.get()}`,\n    },\n    connection: {\n      reconnect: true,\n      secure: true,\n    },\n  });\n\n  logger.info('Connecting and authenticating...');\n  client\n    .connect()\n    .then(() => {\n      logger.info('Connected.');\n      joinChannel(userChannel.get() as string);\n    })\n    .catch(logger.error.bind(logger));\n\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\n  client.on('message', (_channel, userstate, message, self) => self || handleMessage(userstate, message));\n  client.on('messagedeleted', (_channel, _username, message) => {});\n  client.on('timeout', (_channel, username) => {})\n};\n\nconst disconnect = async () => {\n  await client?.disconnect();\n};\n\nconst joinChannel = async (channel: string) => {\n  logger.info('Joining channel', channel);\n  await client.join(channel.toLowerCase());\n};\n\nconst leaveChannel = async (channel: string) => {\n  logger.info('Leaving channel', channel);\n  await client.part(channel.toLowerCase());\n};\n\nconst TwitchChat = {\n  connect,\n  disconnect,\n  joinChannel,\n  leaveChannel,\n};\n\nexport default TwitchChat;\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\r\nimport { getGameName } from '../../store/dictionaries';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'clips.twitch.tv') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/clip/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-clip',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getClip(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.broadcaster_name,\r\n        game: await getGameName(clipInfo.game_id),\r\n        provider: 'twitch-clip',\r\n        thumbnailUrl: clipInfo.thumbnail_url,\r\n        title: clipInfo.title,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchClipProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchClipProvider;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/videos/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-vod',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getVideo(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.user_name,\r\n        provider: 'twitch-vod',\r\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\r\n        title: clipInfo.title,\r\n        startTime: uri.searchParams.get('t') ?? undefined,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchVodProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchVodProvider;\r\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport YoutubeApi from '../YoutubeApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'youtu.be') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('youtube.com')) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    let id: string | undefined = undefined;\r\n    if (uri.hostname === 'youtu.be') {\r\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\r\n      id = uri.pathname.slice(idStart).split('?')[0];\r\n    } else if (uri.hostname.endsWith('youtube.com')) {\r\n      id = uri.searchParams.get('v') ?? undefined;\r\n    }\r\n\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    const startTime = uri.searchParams.get('t') ?? undefined;\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'youtube',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await YoutubeApi.getClip(id);\r\n\r\n    return {\r\n      id,\r\n      channel: clipInfo?.author_name ?? 'YouTube',\r\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\r\n      provider: 'youtube',\r\n      title: clipInfo?.title ?? id,\r\n      startTime,\r\n    };\r\n  } catch {}\r\n};\r\n\r\nconst YouTubeProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default YouTubeProvider;\r\n","import { Clip } from '../models';\r\nimport TwitchClipProvider from './providers/twitch-clip';\r\nimport TwitchVodProvider from './providers/twitch-vod';\r\nimport YouTubeProvider from './providers/youtube';\r\n\r\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\r\n\r\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\r\n  for (const provider of providers) {\r\n    if (!provider.canHandle(url)) {\r\n      continue;\r\n    }\r\n\r\n    const clip = await provider.tryGetClip(url);\r\n\r\n    if (clip) {\r\n      return clip;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ClipFinder = {\r\n  findByUrl,\r\n};\r\n\r\nexport default ClipFinder;\r\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { Clip } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\n\nexport const isLoggedIn = createPersistentState<boolean>('isLoggedIn', false);\n\nexport const accessToken = createPersistentState<string | null>('accessToken', null);\nexport const idToken = createPersistentState<string | null>('idToken', null);\n\nexport const userName = createPersistentState<string | null>('userName', null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n  userChannel.set(username);\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  userChannel.set(null);\n  isLoggedIn.set(false);\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n"],"sourceRoot":""}