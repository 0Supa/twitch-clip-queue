{"version":3,"sources":["pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["ClipCard","thumbnailUrl","title","submitter","submitterCount","channel","game","className","src","alt","ClipRoll","clips","length","map","clip","submitters","provider","id","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","PlayerSwitch","props","undefined","window","location","hostname","height","width","allowFullScreen","Player","QueuePage","clipQueue","use","clipMem","clipMemory","current","currentClip","token","userName","userChannel","useEffect","TwitchChat","connect","disconnect","onClick","nextClip","newChannel","prompt","changeChannel","clearMemory","clearQueue"],"mappings":"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","file":"static/js/3.b8434232.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface ClipCardProps {\n  title?: string;\n  submitter?: string;\n  submitterCount?: number;\n  channel?: string;\n  game?: string;\n\n  thumbnailUrl?: string;\n}\n\nfunction ClipCard({\n  thumbnailUrl,\n  title,\n  submitter,\n  submitterCount = 0,\n  channel,\n  game,\n}: ClipCardProps) {\n  return (\n    <div className=\"clip max-w-sm rounded overflow-hidden ml-3 mb-3\">\n      {thumbnailUrl && (\n        <img className=\"w-full\" src={thumbnailUrl} alt={title} />\n      )}\n      <div className=\"px-2 py-1\">\n        <h4 className=\"font-bold text-sm mb-1\">{title}</h4>\n        <p className=\"text-gray-700 text-xs mb-1 font-normal\">\n          <span className=\"font-bold\">{channel} </span>\n          {game && (\n            <span>\n              playing&nbsp;<span className=\"font-bold\">{game}</span>\n            </span>\n          )}\n        </p>\n        <p className=\"text-gray-700 text-xs font-normal\">\n          {submitter && (\n            <>\n              Submitted by <span className=\"font-bold\">{submitter}</span>\n            </>\n          )}\n          <span className=\"text-xs\">\n            {submitterCount > 0 && ' +' + submitterCount}\n          </span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport ClipCard from './ClipCard';\n\nexport interface ClipRollProps {\n  clips: any[];\n}\n\nfunction ClipRoll({ clips }: ClipRollProps) {\n  return (\n    <div className=\"cliproll flex flex-wrap w-full\">\n      {clips.length ? (\n        clips.map((clip) => (\n          <ClipCard key={`${clip.provider}:${clip.id}`} {...clip} submitterCount={clip.submitters?.length} />\n        ))\n      ) : (\n        <div className=\"pl-3 text-lg font-bold\">Waiting for some clips from chat...</div>\n      )}\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\n\nexport interface PlayerProps {\n  title?: string;\n  provider?: string;\n  id?: string;\n  channel?: string;\n  game?: string;\n  submitter?: string;\n  submitterCount?: number;\n}\n\nfunction Player(props: PlayerProps) {\n  const { game, channel, title, submitter, submitterCount = 0 } = props;\n  return (\n    <>\n      <div className=\"player\">\n        <PlayerSwitch {...props} />\n      </div>\n      <div className=\"pt-2\">\n        <h2 className=\"font-bold mb-1\">{title ?? <>&nbsp;</>}</h2>\n        <p className=\"text-gray-500 text-sm font-normal\">\n          {channel ? (\n            <>\n              <span className=\"font-bold\">{channel}</span>\n              {game && (\n                <span>\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\n                </span>\n              )}\n              , submitted by <span className=\"font-bold\">{submitter}</span>\n              {submitterCount > 0 && <> and {submitterCount} other(s)</>}\n            </>\n          ) : (\n            <>&nbsp;</>\n          )}\n        </p>\n      </div>\n    </>\n  );\n}\n\nfunction PlayerSwitch({ provider, ...props }: PlayerProps) {\n  switch (provider) {\n    case undefined:\n      return <></>;\n    case 'twitch-clip':\n      return (\n        <iframe\n          src={`https://clips.twitch.tv/embed?clip=${props.id}&autoplay=true&parent=${window.location.hostname}`}\n          height=\"100%\"\n          width=\"100%\"\n          allowFullScreen={true}\n          title={props.title}\n        ></iframe>\n      );\n  }\n\n  return <span>Provider not supported: {provider}</span>;\n}\n\nexport default Player;\n","import React, { useEffect } from 'react';\nimport TwitchChat from '../../services/TwitchChat';\nimport { clearMemory, clearQueue, clipMemory, clipQueue, currentClip, nextClip } from '../../store/queue';\nimport { changeChannel, userChannel, userName } from '../../store/user';\nimport ClipRoll from './ClipRoll';\nimport Player from './Player';\nimport './styles.css';\n\nfunction QueuePage() {\n  const clips = clipQueue.use();\n  const clipMem = clipMemory.use();\n  const current = currentClip.use();\n\n  const token = userName.use();\n  const channel = userChannel.use();\n\n  useEffect(() => {\n    TwitchChat.connect();\n\n    return () => TwitchChat.disconnect();\n  }, [token]);\n\n  return (\n    <>\n      <Player {...current} submitterCount={current.submitters?.length} />\n      <div className=\"my-4 flex w-full\">\n        <button className=\"mr-2 btn btn-play\" onClick={() => nextClip()}>\n          Next &raquo;\n        </button>\n\n        <div className=\"flex-grow\" />\n\n        <button\n          className=\"mr-2 btn btn-skip\"\n          onClick={() => {\n            const newChannel = prompt('Enter channel to read chat from', channel as string);\n            if (newChannel && newChannel !== channel) {\n              changeChannel(newChannel);\n            }\n          }}\n        >\n          Change channel ({channel})\n        </button>\n        <button className=\"mr-2 btn btn-clear\" onClick={() => clearMemory()}>\n          &times; Purge memory ({clipMem.length})\n        </button>\n        <button className=\"mr-2 btn btn-clear\" onClick={() => clearQueue()}>\n          &times; Clear queue ({clips.length})\n        </button>\n      </div>\n      <div>\n        <ClipRoll clips={clips} />\n      </div>\n    </>\n  );\n}\n\nexport default QueuePage;\n"],"sourceRoot":""}