{"version":3,"sources":["components/ForkMeOnGithub.tsx","pages/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx","store/user.ts","store/helpers.ts","common/analytics.ts","services/TwitchAuth.ts","common/logging.ts","common/utils.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","services/TwitchChat.ts","common/commands.ts","store/queue.ts"],"names":["ForkMeOnGithub","href","target","rel","loading","width","height","src","className","alt","HomePage","React","lazy","QueuePage","Routes","loggedIn","useState","isLoggedIn","get","fallback","basename","process","path","to","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","TwitchAuth","processAuth","createState","accessToken","idToken","userName","userChannel","createPersistentState","logIn","auth","id","username","set","trace","toLowerCase","Date","getDay","currentClip","title","channel","provider","thumbnailUrl","submitter","displayName","submitters","Array","game","logOut","a","token","revokeToken","changeChannel","TwitchChat","leaveChannel","joinChannel","name","initialValue","state","attach","Persistence","same","b","logger","createLogger","umami","window","eventQueue","value","type","debug","push","e","shift","trackEvent","TWITCH_CLIENT_ID","getLoginUrl","encodeURI","redirectToLogin","location","assign","hash","authInfo","substring","split","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","base64","replace","jsonPayload","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","parseJwt","preferred_username","axios","post","LogLevel","globalLogLevel","setLogLevel","level","info","ConsoleLogger","message","data","this","log","warn","error","messageWithName","console","__setLogLevel","getUrlFromMessage","urlStart","indexOf","urlEnd","undefined","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","d","canHandle","url","uri","URL","hostname","endsWith","pathname","includes","tryGetClip","idStart","lastIndexOf","fromMemory","getMemorizedClip","clipInfo","broadcaster_name","game_id","thumbnail_url","created_at","timestamp","TwitchClipProvider","user_name","startTime","searchParams","TwitchVodProvider","YoutubeApi","author_name","providers","ClipFinder","findByUrl","clip","now","client","commands","queuenext","nextClip","queueclose","acceptClips","queueopen","queueclear","clearQueue","queuepurgememory","clearMemory","handleTimeout","clipQueue","filter","some","forEach","length","none","disconnect","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","identity","password","connection","reconnect","secure","catch","on","reason","_channel","userstate","self","startsWith","mod","badges","substr","commandName","args","command","acceptingClips","addClip","handleMessage","_username","removeClip","handleMessageDeleted","part","clipMemory","queuedState","find","queued","queue","sort","memory","stringify","selectCurrentClip","getQueuedClip","index","findIndex","accept","reloadClip"],"mappings":"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","file":"static/js/main.d295173b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ForkMeOnGithubProps {\n  href: string;\n}\n\nfunction ForkMeOnGithub({ href }: ForkMeOnGithubProps) {\n  return (\n    <a href={href} target=\"_blank\" rel=\"noreferrer\">\n      <img\n        loading=\"lazy\"\n        width=\"128\"\n        height=\"128\"\n        src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149\"\n        className=\"absolute top-0 right-0 fork-on-github\"\n        alt=\"Fork me on GitHub\"\n      />\n    </a>\n  );\n}\n\nexport default ForkMeOnGithub;\n","import { useState } from '@hookstate/core';\nimport React from 'react';\nimport { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn } from '../store/user';\n\nconst HomePage = React.lazy(() => import('./Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./Queue/QueuePage'));\n\nfunction Routes() {\n  const loggedIn = useState(isLoggedIn).get();\n\n  return (\n    <Suspense fallback={<div></div>}>\n      <Router basename={process.env.REACT_APP_BASEPATH}>\n        <Switch>\n          <Route path=\"/queue\">\n            {loggedIn ? <QueuePage /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact={true} path=\"/\">\n            {!loggedIn ? <HomePage /> : <Redirect to=\"/queue\" />}\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport ForkMeOnGithub from './components/ForkMeOnGithub';\nimport Routes from './pages/Routes';\n\n\nfunction App() {\n  return (\n    <>\n      <ForkMeOnGithub href=\"https://github.com/JakeMiki/twitch-clip-queue\" />\n      <Routes />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { createState } from \"@hookstate/core\";\nimport { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\nimport { currentClip } from \"./queue\";\n\nexport const isLoggedIn = createState<boolean>(false);\n\nexport const accessToken = createState<string | null>(null);\nexport const idToken = createState<string | null>(null);\n\nexport const userName = createState<string | null>(null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n\n  if (!userChannel.get()) {\n    userChannel.set(username);\n  }\n\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n\n  // temp easter egg\n  if (username.toLowerCase() === 'wolfabelle' && (new Date()).getDay() === 5) {\n    currentClip.set({\n      title: 'ITS FRIDAY THEN, ITS SATURDAY, SUNDAY! GO MUFASA!',\n      channel: 'MUFASA',\n      id: '1TewCPi92ro',\n      provider: 'youtube',\n      thumbnailUrl: 'https://i.ytimg.com/vi/1TewCPi92ro/hqdefault.jpg',\n      submitter: { displayName: 'Friday', userName: '' },\n      submitters: new Array(69420),\n      game: 'Friday',\n    })\n  }\n  //\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  isLoggedIn.set(false);\n\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { Clip } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        umami.trackEvent(e.value, e.type);\n      }\n    }\n  } catch {}\n}\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n","export const getUrlFromMessage = (message: string) => {\n\n  const urlStart = message.indexOf('http');\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    return url;\n  }\n\n  return undefined;\n};\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\nimport { getGameName } from '../../store/dictionaries';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'clips.twitch.tv') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/clip/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-clip',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getClip(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.broadcaster_name,\n        game: await getGameName(clipInfo.game_id),\n        provider: 'twitch-clip',\n        thumbnailUrl: clipInfo.thumbnail_url,\n        title: clipInfo.title,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchClipProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchClipProvider;\n","import { Clip, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/videos/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-vod',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getVideo(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.user_name,\n        provider: 'twitch-vod',\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\n        title: clipInfo.title,\n        startTime: uri.searchParams.get('t') ?? undefined,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchVodProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchVodProvider;\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { Clip, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport YoutubeApi from '../YoutubeApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'youtu.be') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('youtube.com')) {\n    return true;\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    let id: string | undefined = undefined;\n    if (uri.hostname === 'youtu.be') {\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\n      id = uri.pathname.slice(idStart).split('?')[0];\n    } else if (uri.hostname.endsWith('youtube.com')) {\n      id = uri.searchParams.get('v') ?? undefined;\n    }\n\n    if (!id) {\n      return;\n    }\n\n    const startTime = uri.searchParams.get('t') ?? undefined;\n\n    const fromMemory = getMemorizedClip({\n      provider: 'youtube',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await YoutubeApi.getClip(id);\n\n    return {\n      id,\n      channel: clipInfo?.author_name ?? 'YouTube',\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\n      provider: 'youtube',\n      title: clipInfo?.title ?? id,\n      startTime: startTime?.replace(/[^0-9]/g, ''),\n    };\n  } catch {}\n};\n\nconst YouTubeProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default YouTubeProvider;\n","import { Clip } from '../models';\nimport TwitchClipProvider from './providers/twitch-clip';\nimport TwitchVodProvider from './providers/twitch-vod';\nimport YouTubeProvider from './providers/youtube';\n\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\n\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\n  for (const provider of providers) {\n    if (!provider.canHandle(url)) {\n      continue;\n    }\n\n    const clip = await provider.tryGetClip(url);\n\n    if (clip) {\n      clip.hash = Date.now().toString();\n      return clip;\n    }\n  }\n\n  return undefined;\n};\n\nconst ClipFinder = {\n  findByUrl,\n};\n\nexport default ClipFinder;\n","import { createLogger } from '../common/logging';\nimport { getUrlFromMessage } from '../common/utils';\nimport { acceptingClips, addClip, clipQueue, removeClip } from '../store/queue';\nimport { accessToken, userChannel, userName } from '../store/user';\nimport { Client, Userstate } from 'tmi.js';\nimport ClipFinder from './ClipFinder';\nimport { none } from '@hookstate/core';\nimport { commands } from '../common/commands';\n\nconst logger = createLogger('Twitch Chat');\nlet client: Client;\n\nconst handleMessage = (userstate: Userstate, message: string, self: boolean) => {\n  logger.debug('Userstate', userstate);\n  if (message.startsWith('!')) {\n    if (!userstate.mod && userstate.badges?.['broadcaster'] !== '1') {\n      return;\n    }\n\n    const [commandName, ...args] = message.substr(1).split(' ');\n\n    const command = commands[commandName];\n    if (!command) {\n      return;\n    }\n\n    command(...args);\n  }\n\n  if (!acceptingClips.get() && !self) {\n    return;\n  }\n\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessage] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        clip.url = url;\n        clip.submitter = {\n          userName: userstate.username,\n          displayName: userstate['display-name'],\n        };\n        addClip(clip);\n      }\n    });\n  }\n};\n\nconst handleMessageDeleted = (message: string) => {\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessageDeleted] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        removeClip(clip);\n      }\n    });\n  }\n};\n\nconst handleTimeout = (username: string) => {\n  const clipsFromUser = clipQueue.filter(\n    (clip) => clip.submitter.get()?.userName === username || clip.submitters.get()?.some((s) => s.userName === username)\n  );\n\n  clipsFromUser.forEach((clip) => {\n    if (clip.submitter.get()?.userName === username) {\n      if (!clip.submitters.get()?.length) {\n        clip.set(none);\n      } else {\n        clip.submitter.set(clip.submitters.get()?.[0]);\n        clip.submitters.set((submitters) => {\n          submitters?.shift();\n          return submitters;\n        });\n      }\n    } else {\n      clip.submitters.set((submitters) => submitters?.filter((s) => s.userName !== username));\n    }\n  });\n};\n\nconst connect = () => {\n  client = new Client({\n    options: {\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\n      skipUpdatingEmotesets: true,\n      skipMembership: true,\n    } as any,\n    logger: {\n      error: logger.error.bind(logger),\n      info: logger.info.bind(logger),\n      warn: logger.warn.bind(logger),\n    },\n    identity: {\n      username: userName.get() as string,\n      password: `oauth:${accessToken.get()}`,\n    },\n    connection: {\n      reconnect: true,\n      secure: true,\n    },\n  });\n\n  logger.info('Connecting and authenticating...');\n  client\n    .connect()\n    .then(() => {\n      logger.info('Connected.');\n      joinChannel(userChannel.get() as string);\n    })\n    .catch(logger.error.bind(logger));\n\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\n  client.on('message', (_channel, userstate, message, self) => handleMessage(userstate, message, self));\n  client.on('messagedeleted', (_channel, _username, message) => handleMessageDeleted(message));\n  client.on('timeout', (_channel, username) => handleTimeout(username));\n  client.on('ban', (_channel, username) => handleTimeout(username));\n};\n\nconst disconnect = async () => {\n  await client?.disconnect();\n};\n\nconst joinChannel = async (channel: string) => {\n  logger.info('Joining channel', channel);\n  await client.join(channel.toLowerCase());\n};\n\nconst leaveChannel = async (channel: string) => {\n  logger.info('Leaving channel', channel);\n  await client.part(channel.toLowerCase());\n};\n\nconst TwitchChat = {\n  connect,\n  disconnect,\n  joinChannel,\n  leaveChannel,\n};\n\nexport default TwitchChat;\n","import { acceptClips, clearMemory, clearQueue, nextClip } from '../store/queue';\n\nexport const commands: Record<string, (...args: string[]) => void> = {\n  queuenext: () => nextClip(),\n  queueclose: () => acceptClips(false),\n  queueopen: () => acceptClips(true),\n  queueclear: () => clearQueue(),\n  queuepurgememory: () => clearMemory(),\n};\n","import { createState, none } from '@hookstate/core';\nimport { trace } from '../common/analytics';\nimport { Clip, ClipSubmitter } from '../models';\nimport { createPersistentState, same } from './helpers';\n\nexport const currentClip = createState({} as Clip);\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\nexport const acceptingClips = createState(false);\n\nexport const addClip = (clip: Clip): void => {\n  const queuedState = clipQueue.find((c) => same(c.get(), clip));\n  const queued = queuedState?.get();\n\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter?.userName === clip.submitter?.userName ||\n      (queued.submitters?.find((s) => s.userName === clip.submitter?.userName) ?? false);\n\n    if (!sameSubmitter) {\n      queuedState?.submitters.set((submitters) => [...(submitters ?? []), clip.submitter as ClipSubmitter]);\n      clipQueue.set((queue) => queue.sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0)));\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n\n  trace('clip-added');\n};\n\nexport const nextClip = (): void => {\n  currentClip.set(JSON.parse(JSON.stringify(clipQueue[0]?.get() ?? {})));\n  clipQueue[0].set(none);\n\n  trace('next-clip');\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.find((c) => same(c.get(), clip));\n  return memory?.get();\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.find((c) => same(c.get(), clip));\n  return queue?.get();\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(JSON.parse(JSON.stringify(queued)));\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  const index = clipQueue.findIndex((c) => same(c.get(), clip));\n  clipQueue[index].set(none);\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n\n  trace('clear-queue');\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n\n  trace('purge-memory');\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n\n  trace(`accept-clips-${accept}`);\n};\n\nexport const reloadClip = (): void => {\n  currentClip.hash.set(() => Date.now().toString());\n};\n"],"sourceRoot":""}