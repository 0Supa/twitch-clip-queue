{"version":3,"sources":["store/user.ts","store/queue.ts","store/helpers.ts","common/analytics.ts","services/TwitchAuth.ts","common/logging.ts","services/TwitchChat.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","components/ForkMeOnGithub.tsx","pages/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isLoggedIn","createState","accessToken","idToken","userName","userChannel","createPersistentState","logIn","auth","id","username","set","get","trace","logOut","a","token","TwitchAuth","revokeToken","changeChannel","channel","TwitchChat","leaveChannel","joinChannel","currentClip","clipQueue","clipMemory","acceptingClips","addClip","clip","queuedState","find","c","same","queued","submitter","submitters","s","queue","sort","b","length","getMemorizedClip","memory","nextClip","JSON","parse","stringify","none","selectCurrentClip","getQueuedClip","removeClip","index","findIndex","clearQueue","clearMemory","acceptClips","accept","name","initialValue","state","attach","Persistence","provider","logger","createLogger","umami","window","eventQueue","value","type","debug","push","e","shift","trackEvent","TWITCH_CLIENT_ID","process","getLoginUrl","encodeURI","redirectToLogin","location","assign","processAuth","hash","authInfo","substring","split","reduce","parts","decodeURIComponent","access_token","id_token","decodedIdToken","base64","replace","jsonPayload","atob","map","charCodeAt","toString","slice","join","parseJwt","preferred_username","axios","post","LogLevel","globalLogLevel","setLogLevel","level","info","ConsoleLogger","message","data","this","log","warn","error","messageWithName","console","__setLogLevel","client","getUrlFromMessage","urlStart","indexOf","urlEnd","undefined","disconnect","toLowerCase","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","identity","password","connection","reconnect","secure","then","catch","on","reason","_channel","userstate","self","url","ClipFinder","findByUrl","displayName","handleMessage","_username","handleMessageDeleted","filter","some","forEach","handleTimeout","part","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","game","d","canHandle","uri","URL","hostname","endsWith","pathname","includes","tryGetClip","idStart","lastIndexOf","fromMemory","clipInfo","broadcaster_name","game_id","thumbnail_url","title","created_at","thumbnailUrl","timestamp","TwitchClipProvider","user_name","startTime","searchParams","TwitchVodProvider","YoutubeApi","author_name","providers","ForkMeOnGithub","href","target","rel","loading","width","height","src","className","alt","HomePage","React","lazy","QueuePage","Routes","loggedIn","useState","fallback","basename","path","to","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6aAMaA,EAAaC,aAAqB,GAElCC,EAAcD,YAA2B,MACzCE,EAAUF,YAA2B,MAErCG,EAAWH,YAA2B,MACtCI,EAAcC,YAAqC,cAAe,MAElEC,EAAQ,SAACC,EAAcC,EAAYC,GAC9CR,EAAYS,IAAIH,GAChBL,EAAQQ,IAAIF,GACZL,EAASO,IAAID,GAERL,EAAYO,OACfP,EAAYM,IAAID,GAGlBV,EAAWW,KAAI,GAEfE,YAAM,mBAGKC,EAAM,uCAAG,4BAAAC,EAAA,yDACdC,EAAQd,EAAYU,MAC1BV,EAAYS,IAAI,MAChBR,EAAQQ,IAAI,MACZP,EAASO,IAAI,MACbX,EAAWW,KAAI,IAEXK,EAPgB,gCAQZC,IAAWC,YAAYF,GARX,OAWpBH,YAAM,mBAXc,2CAAH,qDAcNM,EAAgB,SAACC,GAC5BC,IAAWC,aAAajB,EAAYO,OACpCP,EAAYM,IAAIS,GAChBC,IAAWE,YAAYH,GAEvBP,YAAM,qB,2dC1CKW,EAAcvB,YAAY,IAC1BwB,EAAYnB,YAAsB,YAAa,IAC/CoB,EAAapB,YAAsB,aAAc,IACjDqB,EAAiB1B,aAAY,GAE7B2B,EAAU,SAACC,GACtB,IAGY,QAHNC,EAAcL,EAAUM,MAAK,SAACC,GAAD,OAAOC,YAAKD,EAAEpB,MAAOiB,MAClDK,EAAM,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAalB,MAExBsB,GAEA,UAAAA,EAAOC,iBAAP,eAAkB/B,aAAlB,UAA+ByB,EAAKM,iBAApC,aAA+B,EAAgB/B,WAA/C,oBACC8B,EAAOE,kBADR,aACC,EAAmBL,MAAK,SAACM,GAAD,aAAOA,EAAEjC,YAAF,UAAeyB,EAAKM,iBAApB,aAAe,EAAgB/B,oBAD/D,WAIW,OAAX0B,QAAW,IAAXA,KAAaM,WAAWzB,KAAI,SAACyB,GAAD,mCAAqBA,QAArB,IAAqBA,IAAc,IAAnC,CAAwCP,EAAKM,eACzEV,EAAUd,KAAI,SAAC2B,GAAD,OAAWA,EAAMC,MAAK,SAACxB,EAAGyB,GAAJ,mBAAU,oBAACA,EAAEJ,kBAAH,aAAC,EAAcK,cAAf,QAAyB,IAAzB,oBAA+B1B,EAAEqB,kBAAjC,aAA+B,EAAcK,cAA7C,QAAuD,UAI9FC,EAAiBb,KAI5BH,EAAWf,KAAI,SAACgC,GAAD,mCAAiBA,QAAjB,IAAiBA,IAAU,IAA3B,CAAgCd,OAC/CJ,EAAUd,KAAI,SAAC2B,GAAD,mCAAgBA,QAAhB,IAAgBA,IAAS,IAAzB,CAA8BT,OAE5ChB,YAAM,gBAGK+B,EAAW,WAAa,IAAD,IAClCpB,EAAYb,IAAIkC,KAAKC,MAAMD,KAAKE,UAAL,oBAAetB,EAAU,UAAzB,aAAe,EAAcb,aAA7B,QAAsC,MACjEa,EAAU,GAAGd,IAAIqC,KAEjBnC,YAAM,cAGK6B,EAAmB,SAACb,GAC/B,IAAMc,EAASjB,EAAWK,MAAK,SAACC,GAAD,OAAOC,YAAKD,EAAEpB,MAAOiB,MACpD,cAAOc,QAAP,IAAOA,OAAP,EAAOA,EAAQ/B,OAQJqC,EAAoB,SAACpB,GAChC,IAAMK,EANqB,SAACL,GAC5B,IAAMS,EAAQb,EAAUM,MAAK,SAACC,GAAD,OAAOC,YAAKD,EAAEpB,MAAOiB,MAClD,cAAOS,QAAP,IAAOA,OAAP,EAAOA,EAAO1B,MAICsC,CAAcrB,GACzBK,IACFV,EAAYb,IAAIkC,KAAKC,MAAMD,KAAKE,UAAUb,KAC1CiB,EAAWjB,KAIFiB,EAAa,SAACtB,GACzB,IAAMuB,EAAQ3B,EAAU4B,WAAU,SAACrB,GAAD,OAAOC,YAAKD,EAAEpB,MAAOiB,MACvDJ,EAAU2B,GAAOzC,IAAIqC,MAGVM,EAAa,WACxB7B,EAAUd,IAAI,IACda,EAAYb,IAAI,IAEhBE,YAAM,gBAGK0C,EAAc,WAAa,IAAD,EACrC7B,EAAWf,IAAX,sBAAoBc,EAAUb,aAA9B,QAAuC,KAEvCC,YAAM,iBAGK2C,EAAc,SAACC,GAC1B9B,EAAehB,IAAI8C,GAEnB5C,YAAM,gBAAD,OAAiB4C,M,gCCjFxB,uFAIO,SAASnD,EACdoD,EACAC,GAEA,IAAMC,EAAQ3D,YAAY0D,GAE1B,OADAC,EAAMC,OAAOC,YAAYJ,IAClBE,EAGF,SAAS3B,EAAKlB,EAASyB,GAC5B,OAAOzB,EAAEN,KAAO+B,EAAE/B,IAAMM,EAAEgD,WAAavB,EAAEuB,W,gCCd3C,8CAEMC,EAASC,YAAa,eAEtBC,EAASC,OAAeD,MACxBE,EAAiD,GAEhD,SAASvD,EAAMwD,GAAiC,IAAlBC,EAAiB,uDAAV,SAC1CN,EAAOO,MAAP,UAAgBD,EAAhB,aAAyBD,IAEzB,IAGE,GAFAD,EAAWI,KAAK,CAAEF,OAAMD,UAEpBH,EAIF,IAHA,IAAIO,EAGGA,EAAIL,EAAWM,SACpBR,EAAMS,WAAWF,EAAEJ,MAAOI,EAAEH,MAGhC,a,oFCjBEM,EAAmBC,iCAGnBC,EAAc,WAClB,OAAOC,UACL,0DAAmDH,GAAnD,wBAJwBC,iDAIxB,yGA0DJ,IAAM5D,EAAa,CACjB6D,cACAE,gBApDsB,WACtBb,OAAOc,SAASC,OAAOJ,MAoDvBK,YAjDkB,WAClB,GAAKhB,OAAOc,SAASG,KAArB,CAIA,IAWgD,IAX1CC,EAAWlB,OAAOc,SAASG,KAC9BE,UAAU,GACVC,MAAM,KACNC,QAAO,SAACH,EAAUhD,GACjB,IAAMoD,EAAQpD,EAAEkD,MAAM,KAEtB,OADAF,EAASI,EAAM,IAAMC,mBAAmBA,mBAAmBD,EAAM,KAC1DJ,IACN,IAIL,GAFAlB,OAAOc,SAASG,KAAO,GAEnBC,EAASM,cAAgBN,EAASO,SACpCP,EAASQ,eAUb,SAAkB7E,GAChB,IAAKA,EACH,OAGF,IACI8E,EADY9E,EAAMuE,MAAM,KAAK,GACVQ,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACpDC,EAAcN,mBAChBO,KAAKH,GACFP,MAAM,IACNW,KAAI,SAAUlE,GACb,MAAO,KAAO,KAAOA,EAAEmE,WAAW,GAAGC,SAAS,KAAKC,OAAO,MAE3DC,KAAK,KAGV,OAAOzD,KAAKC,MAAMkD,GA1BUO,CAASlB,EAASO,UAE5CrF,YAAM8E,EAASM,aAAcN,EAASO,SAAjC,oBAA2CP,EAASQ,sBAApD,aAA2C,EAAyBW,0BAApE,QAA0F,MA+BjGtF,YA3Be,uCAAG,WAAOF,GAAP,SAAAD,EAAA,sEACZ0F,IAAMC,KAAN,uDAA2D9B,EAA3D,kBAAqF5D,IADzE,2CAAH,uDA8BFC,O,sECzEV0F,EAiBDC,E,0BAjBCD,O,iBAAAA,I,eAAAA,I,eAAAA,I,kBAAAA,M,KAmBL,IAAME,EAAc,SAACC,GAAD,aAAsBF,EAAc,UAAGD,EAASG,UAAZ,QAAsBH,EAASI,MAEjFC,E,WACJ,WAAoBtD,GAAe,yBAAfA,O,yCAEpB,SAAauD,GAAqC,IAAD,uBAAnBC,EAAmB,iCAAnBA,EAAmB,kBAC/CC,KAAKC,IAAL,MAAAD,KAAA,CAASR,EAASpC,MAAO0C,GAAzB,OAAqCC,M,kBAGvC,SAAYD,GAAqC,IAAD,uBAAnBC,EAAmB,iCAAnBA,EAAmB,kBAC9CC,KAAKC,IAAL,MAAAD,KAAA,CAASR,EAASI,KAAME,GAAxB,OAAoCC,M,kBAGtC,SAAYD,GAAqC,IAAD,uBAAnBC,EAAmB,iCAAnBA,EAAmB,kBAC9CC,KAAKC,IAAL,MAAAD,KAAA,CAASR,EAASU,KAAMJ,GAAxB,OAAoCC,M,mBAGtC,SAAaD,GAAqC,IAAD,uBAAnBC,EAAmB,iCAAnBA,EAAmB,kBAC/CC,KAAKC,IAAL,MAAAD,KAAA,CAASR,EAASW,MAAOL,GAAzB,OAAqCC,M,iBAGvC,SAAcJ,EAAiBG,GAAqC,IAAD,QACjE,KAAIH,EAAQF,GAAZ,CADiE,IAKjE,IAAMW,EAAe,WAAOJ,KAAKzD,KAAZ,aAAqBuD,GALuB,mBAAnBC,EAAmB,iCAAnBA,EAAmB,kBAOjE,OAAQJ,GACN,KAAKH,EAASpC,OACZ,EAAAiD,SAAQjD,MAAR,SAAcgD,GAAd,OAAkCL,IAClC,MACF,KAAKP,EAASI,MACZ,EAAAS,SAAQT,KAAR,SAAaQ,GAAb,OAAiCL,IACjC,MACF,KAAKP,EAASU,MACZ,EAAAG,SAAQH,KAAR,SAAaE,GAAb,OAAiCL,IACjC,MACF,KAAKP,EAASW,OACZ,EAAAE,SAAQF,MAAR,SAAcC,GAAd,OAAkCL,U,KASnC,SAASjD,EAAaP,GAC3B,OAAO,IAAIsD,EAActD,GAJ3BmD,EAAahC,QACZV,OAAesD,cAAgBZ,G,oCCzD5Ba,E,sEAFE1D,EAASC,YAAa,eAItB0D,EAAoB,SAACV,GAEzB,IAAMW,EAAWX,EAAQY,QAAQ,QACjC,GAAID,GAAY,EAAG,CACjB,IAAME,EAASb,EAAQY,QAAQ,IAAKD,GAEpC,OADYX,EAAQZ,MAAMuB,EAAUE,EAAS,EAAIA,OAASC,KAqGxDC,EAAU,uCAAG,4BAAAjH,EAAA,gFACX2G,SADW,aACX,EAAQM,aADG,2CAAH,qDAIVzG,EAAW,uCAAG,WAAOH,GAAP,SAAAL,EAAA,6DAClBiD,EAAO+C,KAAK,kBAAmB3F,GADb,SAEZsG,EAAOpB,KAAKlF,EAAQ6G,eAFR,2CAAH,sDAUX5G,EAAa,CACjB6G,QApDc,WACdR,EAAS,IAAIS,SAAO,CAClBC,QAAS,CACP7D,OAAOM,EACPwD,uBAAuB,EACvBC,gBAAgB,GAElBtE,OAAQ,CACNsD,MAAOtD,EAAOsD,MAAMiB,KAAKvE,GACzB+C,KAAM/C,EAAO+C,KAAKwB,KAAKvE,GACvBqD,KAAMrD,EAAOqD,KAAKkB,KAAKvE,IAEzBwE,SAAU,CACR9H,SAAUN,IAASQ,MACnB6H,SAAS,SAAD,OAAWvI,IAAYU,QAEjC8H,WAAY,CACVC,WAAW,EACXC,QAAQ,KAIZ5E,EAAO+C,KAAK,oCACZW,EACGQ,UACAW,MAAK,WACJ7E,EAAO+C,KAAK,cACZxF,EAAYlB,IAAYO,UAEzBkI,MAAM9E,EAAOsD,MAAMiB,KAAKvE,IAE3B0D,EAAOqB,GAAG,gBAAgB,SAACC,GAAD,OAAYhF,EAAO+C,KAAK,gBAAiBiC,MACnEtB,EAAOqB,GAAG,WAAW,SAACE,EAAUC,EAAWjC,EAASkC,GAA/B,OAAwCA,GAzFzC,SAACD,EAAsBjC,GAC3C,GAAKtF,IAAef,MAApB,CAIA,IAAMwI,EAAMzB,EAAkBV,GAE1BmC,IACFpF,EAAOO,MAAM,6BAA8B6E,GAE3CC,IAAWC,UAAUF,GAAKP,MAAK,SAAChH,GAC1BA,IACFA,EAAKuH,IAAMA,EACXvH,EAAKM,UAAY,CACf/B,SAAU8I,EAAUxI,SACpB6I,YAAaL,EAAU,iBAEzBtH,YAAQC,SAwEuD2H,CAAcN,EAAWjC,MAC9FS,EAAOqB,GAAG,kBAAkB,SAACE,EAAUQ,EAAWxC,GAAtB,OAnED,SAACA,GAC5B,IAAMmC,EAAMzB,EAAkBV,GAE1BmC,IACFpF,EAAOO,MAAM,oCAAqC6E,GAElDC,IAAWC,UAAUF,GAAKP,MAAK,SAAChH,GAC1BA,GACFsB,YAAWtB,OA2D6C6H,CAAqBzC,MACnFS,EAAOqB,GAAG,WAAW,SAACE,EAAUvI,GAAX,OAtDD,SAACA,GACCe,IAAUkI,QAAO,SAAC9H,GAAD,eAAU,UAAAA,EAAKM,UAAUvB,aAAf,eAAsBR,YAAaM,IAAnC,UAA+CmB,EAAKO,WAAWxB,aAA/D,aAA+C,EAAuBgJ,MAAK,SAAAvH,GAAC,OAAIA,EAAEjC,WAAaM,SAElImJ,SAAQ,SAAAhI,GAAS,IAAD,EACqB,EAGxC,GAHL,UAAAA,EAAKM,UAAUvB,aAAf,eAAsBR,YAAaM,GACjC,UAACmB,EAAKO,WAAWxB,aAAjB,aAAC,EAAuB6B,SAG1BZ,EAAKM,UAAUxB,IAAf,UAAmBkB,EAAKO,WAAWxB,aAAnC,aAAmB,EAAwB,IAC3CiB,EAAKO,WAAWzB,KAAI,SAAAyB,GAElB,OADU,OAAVA,QAAU,IAAVA,KAAYsC,QACLtC,MALTP,EAAKlB,IAAIqC,KASXnB,EAAKO,WAAWzB,KAAI,SAAAyB,GAAU,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAYuH,QAAO,SAAAtH,GAAC,OAAIA,EAAEjC,WAAaM,WAuChCoJ,CAAcpJ,OAmB3DsH,aACAzG,cACAD,aATgB,uCAAG,WAAOF,GAAP,SAAAL,EAAA,6DACnBiD,EAAO+C,KAAK,kBAAmB3F,GADZ,SAEbsG,EAAOqC,KAAK3I,EAAQ6G,eAFP,2CAAH,uDAYH5G,O,4GCpIT2I,EAAkBvD,IAAMwD,OAAO,CACnCC,QAAS,+BACTC,QAAS,CACP,YALqBtF,oCA6CVuF,EANG,CAChBC,QA/BW,uCAAG,WAAO5J,GAAP,iBAAAM,EAAA,sEACSiJ,EAAgBpJ,IAAhB,mBAAwDH,GAAM,CACnF0J,QAAS,CACPG,cAAc,UAAD,OAAYpK,IAAYU,UAH3B,uBACNsG,EADM,EACNA,KADM,kBAOPA,EAAKA,KAAK,IAPH,2CAAH,sDAgCXqD,SAtBY,uCAAG,WAAO9J,GAAP,iBAAAM,EAAA,sEACQiJ,EAAgBpJ,IAAhB,oBAA0DH,GAAM,CACrF0J,QAAS,CACPG,cAAc,UAAD,OAAYpK,IAAYU,UAH1B,uBACPsG,EADO,EACPA,KADO,kBAORA,EAAKA,KAAK,IAPF,2CAAH,sDAuBZsD,QAbW,uCAAG,WAAO/J,GAAP,iBAAAM,EAAA,sEACSiJ,EAAgBpJ,IAAhB,mBAAwDH,GAAM,CACnF0J,QAAS,CACPG,cAAc,UAAD,OAAYpK,IAAYU,UAH3B,uBACNsG,EADM,EACNA,KADM,kBAOPA,EAAKA,KAAK,IAPH,2CAAH,uD,QC9BPuD,EAAkBnK,YAAsB,kBAAmB,IAEpDoK,EAAW,uCAAG,WAAOjK,GAAP,iBAAAM,EAAA,2DACnB4J,EAAOF,EAAgB7J,OACpBH,GAFgB,yCAGhBkK,EAAKlK,IAHW,uBAMN2J,EAAUI,QAAQ/J,GANZ,YAMnBmK,EANmB,+BASvBH,EAAgB9J,KAAI,SAAAkK,GAAC,kCAAUA,GAAV,kBAAcpK,EAAKmK,EAAKlH,UATtB,kBAUhBkH,EAAKlH,MAVW,gCAalB,IAbkB,4CAAH,sD,QCAlBoH,EAAY,SAAC1B,GACjB,IAAM2B,EAAM,IAAIC,IAAI5B,GACpB,MAAqB,oBAAjB2B,EAAIE,aAIJF,EAAIE,SAASC,SAAS,eACpBH,EAAII,SAASC,SAAS,YAQxBC,EAAU,uCAAG,WAAOjC,GAAP,uBAAArI,EAAA,kEAETgK,EAAM,IAAIC,IAAI5B,GACf0B,EAAU1B,GAHA,oDAOTkC,EAAUP,EAAII,SAASI,YAAY,KACnC9K,EAAKsK,EAAII,SAAS9E,MAAMiF,GAAS/F,MAAM,KAAK,GAAGc,MAAM,KAErDmF,EAAa9I,YAAiB,CAClCqB,SAAU,cACVtD,QAZa,wDAgBD+K,IAhBC,wBAmBQpB,EAAUC,QAAQ5J,GAnB1B,aAmBTgL,EAnBS,qCAuBXhL,EAvBW,KAwBFgL,EAASC,iBAxBP,UAyBChB,EAAYe,EAASE,SAzBtB,gCA2BGF,EAASG,cA3BZ,KA4BJH,EAASI,MA5BL,KA6BAJ,EAASK,WA7BT,mBAuBXrL,GAvBW,KAwBXW,QAxBW,KAyBXwJ,KAzBW,KA0BX7G,SAAU,cACVgI,aA3BW,KA4BXF,MA5BW,KA6BXG,UA7BW,2HAAH,sDAwCDC,EALsB,CACnCnB,YACAO,cCrDIP,EAAY,SAAC1B,GACjB,IAAM2B,EAAM,IAAIC,IAAI5B,GACpB,SAAI2B,EAAIE,SAASC,SAAS,eACpBH,EAAII,SAASC,SAAS,cAQxBC,EAAU,uCAAG,WAAOjC,GAAP,yBAAArI,EAAA,kEAETgK,EAAM,IAAIC,IAAI5B,GACf0B,EAAU1B,GAHA,oDAOTkC,EAAUP,EAAII,SAASI,YAAY,KACnC9K,EAAKsK,EAAII,SAAS9E,MAAMiF,GAAS/F,MAAM,KAAK,GAAGc,MAAM,KAErDmF,EAAa9I,YAAiB,CAClCqB,SAAU,aACVtD,QAZa,wDAgBD+K,IAhBC,wBAmBQpB,EAAUG,SAAS9J,GAnB3B,aAmBTgL,EAnBS,kDAsBN,CACLhL,KACAW,QAASqK,EAASS,UAClBnI,SAAU,aACVgI,aAAcN,EAASG,cAAc7F,QAAQ,qBAAsB,WACnE8F,MAAOJ,EAASI,MAChBM,UAAS,UAAEpB,EAAIqB,aAAaxL,IAAI,YAAvB,aAA+BmH,EACxCiE,UAAWP,EAASK,aA7BT,oHAAH,sDAwCDO,EALqB,CAClCvB,YACAO,cCnCaiB,EAJI,CACjBjC,QAZW,uCAAG,WAAO5J,GAAP,iBAAAM,EAAA,+EAEW0F,IAAM7F,IAAN,yFAC6DH,IAHxE,uBAEJyG,EAFI,EAEJA,KAFI,kBAKLA,GALK,8DAOLa,GAPK,yDAAH,uDCEP+C,EAAY,SAAC1B,GACjB,IAAM2B,EAAM,IAAIC,IAAI5B,GACpB,MAAqB,aAAjB2B,EAAIE,YAIJF,EAAIE,SAASC,SAAS,gBAOtBG,EAAU,uCAAG,WAAOjC,GAAP,mCAAArI,EAAA,kEAETgK,EAAM,IAAIC,IAAI5B,GACf0B,EAAU1B,GAHA,oDAOX3I,OAAyBsH,EACR,aAAjBgD,EAAIE,UACAK,EAAUP,EAAII,SAASI,YAAY,KAAO,EAChD9K,EAAKsK,EAAII,SAAS9E,MAAMiF,GAAS/F,MAAM,KAAK,IACnCwF,EAAIE,SAASC,SAAS,iBAC/BzK,EAAE,UAAGsK,EAAIqB,aAAaxL,IAAI,YAAxB,aAAgCmH,GAG/BtH,EAfU,oDAmBT0L,EAnBS,UAmBGpB,EAAIqB,aAAaxL,IAAI,YAnBxB,aAmBgCmH,IAEzCyD,EAAa9I,YAAiB,CAClCqB,SAAU,UACVtD,QAvBa,yDA2BD+K,IA3BC,yBA8BQc,EAAWjC,QAAQ5J,GA9B3B,eA8BTgL,EA9BS,yBAgCR,CACLhL,KACAW,QAAO,iBAAEqK,QAAF,IAAEA,OAAF,EAAEA,EAAUc,mBAAZ,QAA2B,UAClCR,aAAY,iBAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAUG,qBAAZ,yCAAuDnL,EAAvD,kBACZsD,SAAU,UACV8H,MAAK,iBAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAUI,aAAZ,QAAqBpL,EAC1B0L,cAtCa,4FAAH,sDCZVK,EAAY,CAACP,EAAoBI,EDuDL,CAChCvB,YACAO,eCvCIhC,EAAa,CACjBC,UAjBa,uCAAG,WAAOF,GAAP,qBAAArI,EAAA,oEACOyL,GADP,6DACLzI,EADK,SAEA+G,UAAU1B,GAFV,sEAMKrF,EAASsH,WAAWjC,GANzB,YAMRvH,EANQ,kDASLA,GATK,6KAaTkG,GAbS,gEAAH,uDAoBAsB,O,sJCNAoD,MAff,YAAwD,IAA9BC,EAA6B,EAA7BA,KACxB,OACE,mBAAGA,KAAMA,EAAMC,OAAO,SAASC,IAAI,aAAnC,SACE,qBACEC,QAAQ,OACRC,MAAM,MACNC,OAAO,MACPC,IAAI,mGACJC,UAAU,wCACVC,IAAI,yB,8BCTNC,EAAWC,IAAMC,MAAK,kBAAM,iCAC5BC,EAAYF,IAAMC,MAAK,kBAAM,uDAwBpBE,MAtBf,WACE,IAAMC,EAAWC,YAASzN,KAAYY,MAEtC,OACE,cAAC,WAAD,CAAU8M,SAAU,wBAApB,SACE,cAAC,IAAD,CAAQC,SAAU9I,sBAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+I,KAAK,SAAZ,SACGJ,EAAW,cAACF,EAAD,IAAgB,cAAC,IAAD,CAAUO,GAAG,QAE3C,cAAC,IAAD,CAAOC,OAAO,EAAMF,KAAK,IAAzB,SACIJ,EAA0B,cAAC,IAAD,CAAUK,GAAG,WAA5B,cAACV,EAAD,MAEf,cAAC,IAAD,CAAOS,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUC,GAAG,gBCTVE,MATf,WACE,OACE,qCACE,cAAC,EAAD,CAAgBrB,KAAK,kDACrB,cAAC,EAAD,QCKSsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrF,MAAK,YAAkD,IAA/CsF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,IACA/M,IAAWkE,gB","file":"static/js/main.a78d6ad8.chunk.js","sourcesContent":["import { createState } from \"@hookstate/core\";\nimport { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\n\nexport const isLoggedIn = createState<boolean>(false);\n\nexport const accessToken = createState<string | null>(null);\nexport const idToken = createState<string | null>(null);\n\nexport const userName = createState<string | null>(null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n\n  if (!userChannel.get()) {\n    userChannel.set(username);\n  }\n\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  isLoggedIn.set(false);\n\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n","import { createState, none } from '@hookstate/core';\nimport { trace } from '../common/analytics';\nimport { Clip, ClipSubmitter } from '../models';\nimport { createPersistentState, same } from './helpers';\n\nexport const currentClip = createState({} as Clip);\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\nexport const acceptingClips = createState(false);\n\nexport const addClip = (clip: Clip): void => {\n  const queuedState = clipQueue.find((c) => same(c.get(), clip));\n  const queued = queuedState?.get();\n\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter?.userName === clip.submitter?.userName ||\n      (queued.submitters?.find((s) => s.userName === clip.submitter?.userName) ?? false);\n\n    if (!sameSubmitter) {\n      queuedState?.submitters.set((submitters) => [...(submitters ?? []), clip.submitter as ClipSubmitter]);\n      clipQueue.set((queue) => queue.sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0)));\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n\n  trace('clip-added');\n};\n\nexport const nextClip = (): void => {\n  currentClip.set(JSON.parse(JSON.stringify(clipQueue[0]?.get() ?? {})));\n  clipQueue[0].set(none);\n\n  trace('next-clip');\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.find((c) => same(c.get(), clip));\n  return memory?.get();\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.find((c) => same(c.get(), clip));\n  return queue?.get();\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(JSON.parse(JSON.stringify(queued)));\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  const index = clipQueue.findIndex((c) => same(c.get(), clip));\n  clipQueue[index].set(none);\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n\n  trace('clear-queue');\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n\n  trace('purge-memory');\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n\n  trace(`accept-clips-${accept}`);\n};\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { Clip } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        umami.trackEvent(e.value, e.type);\n      }\n    }\n  } catch {}\n}\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n","import { createLogger } from '../common/logging';\nimport { acceptingClips, addClip, clipQueue, removeClip } from '../store/queue';\nimport { accessToken, userChannel, userName } from '../store/user';\nimport { Client, Userstate } from 'tmi.js';\nimport ClipFinder from './ClipFinder';\nimport { none } from '@hookstate/core';\n\nconst logger = createLogger('Twitch Chat');\n\nlet client: Client;\n\nconst getUrlFromMessage = (message: string) => {\n\n  const urlStart = message.indexOf('http');\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    return url;\n  }\n\n  return undefined;\n};\n\nconst handleMessage = (userstate: Userstate, message: string) => {\n  if (!acceptingClips.get()) {\n    return;\n  }\n\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessage] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        clip.url = url;\n        clip.submitter = {\n          userName: userstate.username,\n          displayName: userstate['display-name']\n        };\n        addClip(clip);\n      }\n    });\n  }\n};\n\nconst handleMessageDeleted = (message: string) => {\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessageDeleted] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        removeClip(clip);\n      }\n    });\n  }\n}\n\nconst handleTimeout = (username: string) => {\n  const clipsFromUser = clipQueue.filter((clip) => clip.submitter.get()?.userName === username || clip.submitters.get()?.some(s => s.userName === username));\n\n  clipsFromUser.forEach(clip => {\n    if (clip.submitter.get()?.userName === username) {\n      if (!clip.submitters.get()?.length) {\n        clip.set(none);\n      } else {\n        clip.submitter.set(clip.submitters.get()?.[0]);\n        clip.submitters.set(submitters => {\n          submitters?.shift();\n          return submitters;\n        })\n      }\n    } else {\n      clip.submitters.set(submitters => submitters?.filter(s => s.userName !== username));\n    }\n  });\n};\n\nconst connect = () => {\n  client = new Client({\n    options: {\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\n      skipUpdatingEmotesets: true,\n      skipMembership: true,\n    } as any,\n    logger: {\n      error: logger.error.bind(logger),\n      info: logger.info.bind(logger),\n      warn: logger.warn.bind(logger),\n    },\n    identity: {\n      username: userName.get() as string,\n      password: `oauth:${accessToken.get()}`,\n    },\n    connection: {\n      reconnect: true,\n      secure: true,\n    },\n  });\n\n  logger.info('Connecting and authenticating...');\n  client\n    .connect()\n    .then(() => {\n      logger.info('Connected.');\n      joinChannel(userChannel.get() as string);\n    })\n    .catch(logger.error.bind(logger));\n\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\n  client.on('message', (_channel, userstate, message, self) => self || handleMessage(userstate, message));\n  client.on('messagedeleted', (_channel, _username, message) => handleMessageDeleted(message));\n  client.on('timeout', (_channel, username) => handleTimeout(username))\n};\n\nconst disconnect = async () => {\n  await client?.disconnect();\n};\n\nconst joinChannel = async (channel: string) => {\n  logger.info('Joining channel', channel);\n  await client.join(channel.toLowerCase());\n};\n\nconst leaveChannel = async (channel: string) => {\n  logger.info('Leaving channel', channel);\n  await client.part(channel.toLowerCase());\n};\n\nconst TwitchChat = {\n  connect,\n  disconnect,\n  joinChannel,\n  leaveChannel,\n};\n\nexport default TwitchChat;\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\nimport { getGameName } from '../../store/dictionaries';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname === 'clips.twitch.tv') {\n    return true;\n  }\n\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/clip/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-clip',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getClip(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.broadcaster_name,\n        game: await getGameName(clipInfo.game_id),\n        provider: 'twitch-clip',\n        thumbnailUrl: clipInfo.thumbnail_url,\n        title: clipInfo.title,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchClipProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchClipProvider;\n","import { Clip, Provider } from '../../models';\nimport { getMemorizedClip } from '../../store/queue';\nimport TwitchApi from '../TwitchApi';\n\nconst canHandle = (url: string): boolean => {\n  const uri = new URL(url);\n  if (uri.hostname.endsWith('twitch.tv')) {\n    if (uri.pathname.includes('/videos/')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\n  try {\n    const uri = new URL(url);\n    if (!canHandle(url)) {\n      return;\n    }\n\n    const idStart = uri.pathname.lastIndexOf('/');\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\n\n    const fromMemory = getMemorizedClip({\n      provider: 'twitch-vod',\n      id,\n    });\n\n    if (fromMemory) {\n      return { ...fromMemory };\n    }\n\n    const clipInfo = await TwitchApi.getVideo(id);\n\n    if (clipInfo) {\n      return {\n        id,\n        channel: clipInfo.user_name,\n        provider: 'twitch-vod',\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\n        title: clipInfo.title,\n        startTime: uri.searchParams.get('t') ?? undefined,\n        timestamp: clipInfo.created_at,\n      };\n    }\n  } catch {}\n};\n\nconst TwitchVodProvider: Provider = {\n  canHandle,\n  tryGetClip,\n};\n\nexport default TwitchVodProvider;\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport YoutubeApi from '../YoutubeApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'youtu.be') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('youtube.com')) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    let id: string | undefined = undefined;\r\n    if (uri.hostname === 'youtu.be') {\r\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\r\n      id = uri.pathname.slice(idStart).split('?')[0];\r\n    } else if (uri.hostname.endsWith('youtube.com')) {\r\n      id = uri.searchParams.get('v') ?? undefined;\r\n    }\r\n\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    const startTime = uri.searchParams.get('t') ?? undefined;\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'youtube',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await YoutubeApi.getClip(id);\r\n\r\n    return {\r\n      id,\r\n      channel: clipInfo?.author_name ?? 'YouTube',\r\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\r\n      provider: 'youtube',\r\n      title: clipInfo?.title ?? id,\r\n      startTime,\r\n    };\r\n  } catch {}\r\n};\r\n\r\nconst YouTubeProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default YouTubeProvider;\r\n","import { Clip } from '../models';\r\nimport TwitchClipProvider from './providers/twitch-clip';\r\nimport TwitchVodProvider from './providers/twitch-vod';\r\nimport YouTubeProvider from './providers/youtube';\r\n\r\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\r\n\r\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\r\n  for (const provider of providers) {\r\n    if (!provider.canHandle(url)) {\r\n      continue;\r\n    }\r\n\r\n    const clip = await provider.tryGetClip(url);\r\n\r\n    if (clip) {\r\n      return clip;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ClipFinder = {\r\n  findByUrl,\r\n};\r\n\r\nexport default ClipFinder;\r\n","import React from 'react';\n\ninterface ForkMeOnGithubProps {\n  href: string;\n}\n\nfunction ForkMeOnGithub({ href }: ForkMeOnGithubProps) {\n  return (\n    <a href={href} target=\"_blank\" rel=\"noreferrer\">\n      <img\n        loading=\"lazy\"\n        width=\"128\"\n        height=\"128\"\n        src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149\"\n        className=\"absolute top-0 right-0 fork-on-github\"\n        alt=\"Fork me on GitHub\"\n      />\n    </a>\n  );\n}\n\nexport default ForkMeOnGithub;\n","import { useState } from '@hookstate/core';\nimport React from 'react';\nimport { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn } from '../store/user';\n\nconst HomePage = React.lazy(() => import('./Home/HomePage'));\nconst QueuePage = React.lazy(() => import('./Queue/QueuePage'));\n\nfunction Routes() {\n  const loggedIn = useState(isLoggedIn).get();\n\n  return (\n    <Suspense fallback={<div></div>}>\n      <Router basename={process.env.REACT_APP_BASEPATH}>\n        <Switch>\n          <Route path=\"/queue\">\n            {loggedIn ? <QueuePage /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact={true} path=\"/\">\n            {!loggedIn ? <HomePage /> : <Redirect to=\"/queue\" />}\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport ForkMeOnGithub from './components/ForkMeOnGithub';\nimport Routes from './pages/Routes';\n\n\nfunction App() {\n  return (\n    <>\n      <ForkMeOnGithub href=\"https://github.com/JakeMiki/twitch-clip-queue\" />\n      <Routes />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n"],"sourceRoot":""}