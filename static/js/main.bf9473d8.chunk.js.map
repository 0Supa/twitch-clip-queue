{"version":3,"sources":["store/helpers.ts","services/TwitchAuth.ts","store/queue.ts","services/TwitchChat.ts","services/TwitchApi.ts","store/dictionaries.ts","services/ClipFinder.ts","services/providers/twitch-clip.ts","App.tsx","reportWebVitals.ts","index.tsx","store/user.ts"],"names":["createEntity","name","initialValue","entity","persistence","same","a","b","id","provider","TWITCH_CLIENT_ID","process","TwitchAuth","redirectToLogin","window","location","assign","encodeURI","processAuth","hash","authInfo","substring","split","reduce","s","parts","decodeURIComponent","access_token","id_token","decodedIdToken","token","base64","replace","jsonPayload","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","parseJwt","logIn","preferred_username","revokeToken","axios","post","currentClip","clipQueue","clipMemory","addClip","clip","queued","getQueuedClip","submitter","submitters","includes","newQueued","set","queue","sort","length","getMemorizedClip","memory","nextClip","next","shift","get","find","undefined","clearQueue","clearMemory","socket","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","accessToken","data","getGame","gamesDictionary","getGameName","dict","game","d","providers","tryGetClip","url","uri","URL","hostname","pathname","fromMemory","clipInfo","broadcaster_name","game_id","thumbnail_url","title","channel","thumbnailUrl","ClipFinder","findByUrl","send","message","joinChannel","console","log","TwitchChat","connect","WebSocket","onopen","readyState","userName","userChannel","onclose","onerror","error","warn","onmessage","startsWith","raw","tagEnd","indexOf","userEnd","commandEnd","tags","t","user","command","channelEnd","messageStart","trim","parseMessage","urlStart","urlEnd","then","disconnect","close","leaveChannel","HomePage","React","lazy","QueuePage","App","loggedIn","isLoggedIn","use","className","onClick","logOut","fallback","basename","exact","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","idToken","auth","username","changeChannel"],"mappings":"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","file":"static/js/main.bf9473d8.chunk.js","sourcesContent":["import { Entity, entity, persistence } from 'simpler-state';\r\nimport { Clip } from '../models';\r\n\r\nexport function createEntity<TEntity>(\r\n  name: string,\r\n  initialValue: TEntity\r\n): Entity<TEntity> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function createAsyncEntity<TEntity>(\r\n  name: string,\r\n  initialValue: Promise<TEntity>\r\n): Entity<TEntity | undefined> {\r\n  return entity(initialValue, [persistence(name)]);\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(\r\n    encodeURI(\r\n      `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n        `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n        `&response_type=token id_token` +\r\n        `&scope=openid chat:read` +\r\n        `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n    )\r\n  );\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","import { Clip } from '../models';\r\nimport { createEntity, same } from './helpers';\r\n\r\nexport const currentClip = createEntity('currentClip', {} as Clip);\r\nexport const clipQueue = createEntity('clipQueue', [] as Clip[]);\r\nexport const clipMemory = createEntity('clipMemory', [] as Clip[]);\r\n\r\nexport const addClip = (clip: Clip): void => {\r\n  const queued = getQueuedClip(clip);\r\n  if (queued) {\r\n    const sameSubmitter =\r\n      queued.submitter === clip.submitter || (queued.submitters?.includes(clip.submitter as string) ?? false);\r\n    if (!sameSubmitter) {\r\n      const newQueued = {\r\n        ...queued,\r\n        submitters: [...(queued?.submitters ?? []), clip.submitter as string],\r\n      };\r\n      clipQueue.set((queue) =>\r\n        queue\r\n          .map((c) => (same(c, newQueued) ? newQueued : c))\r\n          .sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0))\r\n      );\r\n    }\r\n\r\n    return;\r\n  } else if (getMemorizedClip(clip)) {\r\n    return;\r\n  }\r\n\r\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\r\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\r\n};\r\n\r\nexport const nextClip = (): void => {\r\n  clipQueue.set((queue) => {\r\n    const next = (queue ?? []).shift();\r\n\r\n    currentClip.set(next ?? {});\r\n\r\n    return [...queue];\r\n  });\r\n};\r\n\r\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\r\n  const memory = clipMemory.get();\r\n\r\n  return memory?.find((c) => same(c, clip)) ?? undefined;\r\n};\r\n\r\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\r\n  const queue = clipQueue.get();\r\n\r\n  return queue?.find((c) => same(c, clip)) ?? undefined;\r\n};\r\n\r\nexport const clearQueue = (): void => {\r\n  clipQueue.set([]);\r\n  currentClip.set({});\r\n};\r\n\r\nexport const clearMemory = (): void => {\r\n  clipMemory.set([...(clipQueue.get() ?? [])]);\r\n};\r\n","import { addClip } from '../store/queue';\r\nimport { accessToken, userChannel, userName } from '../store/user';\r\nimport ClipFinder from './ClipFinder';\r\n\r\nlet socket: WebSocket;\r\n\r\nconst send = (message: string) => {\r\n  socket.send(message);\r\n};\r\n\r\nconst parseMessage = (raw: string) => {\r\n  const tagEnd = raw[0] === '@' ? raw.indexOf(' ') : -1;\r\n  const userEnd = raw.indexOf(' ', tagEnd + 1);\r\n  const commandEnd = raw.indexOf(' ', userEnd + 1);\r\n\r\n  const tags =\r\n    tagEnd > 0\r\n      ? raw\r\n          .slice(1, tagEnd)\r\n          .split(';')\r\n          .reduce((t, c) => {\r\n            const parts = c.split('=', 2);\r\n            t[parts[0]] = parts[1];\r\n            return t;\r\n          }, {} as Record<string, string>)\r\n      : {};\r\n\r\n  const user = raw.slice(tagEnd + 2, raw.indexOf('!', tagEnd + 2));\r\n  const command = raw.slice(userEnd + 1, commandEnd);\r\n\r\n  if (command === 'PRIVMSG') {\r\n    const channelEnd = raw.indexOf(' ', commandEnd + 1);\r\n    const messageStart = raw.indexOf(':', channelEnd + 1);\r\n    const channel = raw.slice(commandEnd + 2, channelEnd);\r\n    const message = raw.slice(messageStart + 1).trim();\r\n    return {\r\n      channel,\r\n      user: tags['display-name'] || user,\r\n      command,\r\n      message,\r\n      tags,\r\n    };\r\n  }\r\n\r\n  return {\r\n    raw,\r\n    user: tags['display-name'] || user,\r\n    command,\r\n    tags,\r\n  };\r\n};\r\n\r\nconst connect = () => {\r\n  socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443', 'irc');\r\n\r\n  socket.onopen = () => {\r\n    if (socket !== null && socket.readyState === 1) {\r\n      console.log('[TwitchChat] Connecting and authenticating...');\r\n\r\n      send('CAP REQ :twitch.tv/tags');\r\n      send(`PASS oauth:${accessToken.get()}`);\r\n      send(`NICK ${userName.get()}`);\r\n      joinChannel(userChannel.get() as string);\r\n    }\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log('[TwitchChat] Disconnected');\r\n  };\r\n\r\n  socket.onerror = (error) => {\r\n    console.warn('[TwitchChat] Error:', error);\r\n  };\r\n\r\n  socket.onmessage = ({ data }: MessageEvent<string>) => {\r\n    if (data.startsWith('PING')) {\r\n      send('PONG :tmi.twitch.tv');\r\n    }\r\n\r\n    const message = parseMessage(data);\r\n\r\n    if (message.command === 'PRIVMSG' && message.message) {\r\n      const urlStart = message.message.indexOf('http');\r\n\r\n      if (urlStart >= 0) {\r\n        const urlEnd = message.message.indexOf(' ', urlStart);\r\n        const url = message.message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\r\n        console.log('[TwitchChat] Found url:', url);\r\n\r\n        ClipFinder.findByUrl(url).then((clip) => {\r\n          if (clip) {\r\n            clip.submitter = message.user;\r\n            addClip(clip);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nconst disconnect = () => {\r\n  socket.close();\r\n};\r\n\r\nconst joinChannel = (channel: string) => {\r\n  console.log('[TwitchChat] Joining channel', channel);\r\n  send(`JOIN #${channel}`);\r\n};\r\n\r\nconst leaveChannel = (channel: string) => {\r\n  console.log('[TwitchChat] Leaving channel', channel);\r\n  send(`PART #${channel}`);\r\n\r\n};\r\n\r\nconst TwitchChat = {\r\n  connect,\r\n  disconnect,\r\n  joinChannel,\r\n  leaveChannel,\r\n};\r\n\r\nexport default TwitchChat;\r\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createEntity } from \"./helpers\";\r\n\r\nconst gamesDictionary = createEntity('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip } from \"../models\";\r\nimport TwitchClipProvider from \"./providers/twitch-clip\";\r\n\r\nconst providers = [\r\n  TwitchClipProvider\r\n];\r\n\r\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\r\n  for (const provider of providers) {\r\n    const clip = await provider.tryGetClip(url);\r\n\r\n    if (clip) {\r\n      return clip;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ClipFinder = {\r\n  findByUrl,\r\n};\r\n\r\nexport default ClipFinder;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getGameName } from '../../store/dictionaries';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (uri.hostname !== 'clips.twitch.tv') {\r\n      return;\r\n    }\r\n\r\n    const id = uri.pathname.split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-clip',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getClip(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.broadcaster_name,\r\n        game: await getGameName(clipInfo.game_id),\r\n        provider: 'twitch-clip',\r\n        thumbnailUrl: clipInfo.thumbnail_url,\r\n        title: clipInfo.title,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchClipProvider: Provider = {\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchClipProvider;\r\n","import React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { isLoggedIn, logOut } from './store/user';\r\n\r\nconst HomePage = React.lazy(() => import('./pages/Home/HomePage'));\r\nconst QueuePage = React.lazy(() => import('./pages/Queue/QueuePage'));\r\n\r\nfunction App() {\r\n  const loggedIn = isLoggedIn.use();\r\n\r\n  return (\r\n    <>\r\n      <header className=\"flex\">\r\n        <h1 className=\"mb-4 text-2xl md:text-3xl lg:text-5xl font-black leading-tight\">Twitch Clip Queue</h1>\r\n        <div className=\"flex-grow\"></div>\r\n        {loggedIn && (\r\n          <div>\r\n            <button onClick={() => logOut()}>Logout</button>\r\n          </div>\r\n        )}\r\n      </header>\r\n      <Suspense fallback={<div></div>}>\r\n        <Router basename={process.env.REACT_APP_BASEPATH}>\r\n          <Switch>\r\n            <Route exact={true} path=\"/\">\r\n              {!loggedIn ? <HomePage /> : <QueuePage />}\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Redirect to=\"/\" />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </Suspense>\r\n      <footer className=\"text-xs mt-4\">\r\n        Created by <span className=\"font-bold\">JakeMiki</span>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { entity } from \"simpler-state\";\r\nimport TwitchAuth from \"../services/TwitchAuth\";\r\nimport TwitchChat from \"../services/TwitchChat\";\r\n\r\nexport const isLoggedIn = entity<boolean>(false);\r\n\r\nexport const accessToken = entity<string | null>(null);\r\nexport const idToken = entity<string | null>(null);\r\n\r\nexport const userName = entity<string | null>(null);\r\nexport const userChannel = entity<string | null>(null);\r\n\r\nexport const logIn = (auth: string, id: string, username: string): void => {\r\n  accessToken.set(auth);\r\n  idToken.set(id);\r\n  userName.set(username);\r\n  userChannel.set(username);\r\n  isLoggedIn.set(true);\r\n}\r\n\r\nexport const logOut = async (): Promise<void> => {\r\n  const token = accessToken.get();\r\n  accessToken.set(null);\r\n  idToken.set(null);\r\n  userName.set(null);\r\n  userChannel.set(null);\r\n  isLoggedIn.set(false);\r\n  if (token) {\r\n    await TwitchAuth.revokeToken(token);\r\n  }\r\n}\r\n\r\nexport const changeChannel = (channel: string) => {\r\n  TwitchChat.leaveChannel(userChannel.get() as string);\r\n  userChannel.set(channel);\r\n  TwitchChat.joinChannel(channel);\r\n};\r\n"],"sourceRoot":""}