{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","store/queue.ts","store/helpers.ts","common/analytics.ts","services/TwitchAuth.ts","common/logging.ts","components/Button.tsx","services/TwitchChat.ts","services/TwitchApi.ts","store/dictionaries.ts","services/providers/twitch-clip.ts","services/providers/twitch-vod.ts","services/YoutubeApi.ts","services/providers/youtube.ts","services/ClipFinder.ts","store/user.ts"],"names":["HomePage","React","lazy","QueuePage","App","loggedIn","useState","isLoggedIn","className","get","Button","onClick","a","logOut","TwitchAuth","redirectToLogin","fallback","basename","process","exact","path","to","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","processAuth","currentClip","createState","clipQueue","createPersistentState","clipMemory","acceptingClips","addClip","clip","queuedState","find","c","same","queued","submitter","userName","submitters","s","set","queue","sort","b","length","getMemorizedClip","memory","trace","nextClip","JSON","parse","stringify","none","selectCurrentClip","getQueuedClip","removeClip","index","findIndex","clearQueue","clearMemory","acceptClips","accept","name","initialValue","state","attach","Persistence","id","provider","logger","createLogger","umami","window","eventQueue","value","type","debug","push","e","shift","trackEvent","TWITCH_CLIENT_ID","getLoginUrl","encodeURI","location","assign","hash","authInfo","substring","split","reduce","parts","decodeURIComponent","access_token","id_token","decodedIdToken","token","base64","replace","jsonPayload","atob","map","charCodeAt","toString","slice","join","parseJwt","logIn","preferred_username","revokeToken","axios","post","LogLevel","globalLogLevel","setLogLevel","level","info","ConsoleLogger","message","data","this","log","warn","error","messageWithName","console","__setLogLevel","addButtonColour","colour","classes","children","props","client","getUrlFromMessage","urlStart","indexOf","urlEnd","undefined","disconnect","joinChannel","channel","toLowerCase","TwitchChat","connect","Client","options","skipUpdatingEmotesets","skipMembership","bind","identity","username","password","accessToken","connection","reconnect","secure","userChannel","catch","on","reason","_channel","userstate","self","url","ClipFinder","findByUrl","displayName","handleMessage","_username","handleMessageDeleted","filter","some","forEach","handleTimeout","leaveChannel","part","TwitchApiClient","create","baseURL","headers","TwitchApi","getClip","Authorization","getVideo","getGame","gamesDictionary","getGameName","dict","game","d","canHandle","uri","URL","hostname","endsWith","pathname","includes","tryGetClip","idStart","lastIndexOf","fromMemory","clipInfo","broadcaster_name","game_id","thumbnail_url","title","thumbnailUrl","TwitchClipProvider","user_name","startTime","searchParams","TwitchVodProvider","YoutubeApi","author_name","providers","idToken","auth","changeChannel"],"mappings":"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","file":"static/js/main.9c17b0d4.chunk.js","sourcesContent":["import { useState } from '@hookstate/core';\r\nimport React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport Button from './components/Button';\r\nimport TwitchAuth from './services/TwitchAuth';\r\nimport { isLoggedIn, logOut } from './store/user';\r\n\r\nconst HomePage = React.lazy(() => import('./pages/Home/HomePage'));\r\nconst QueuePage = React.lazy(() => import('./pages/Queue/QueuePage'));\r\n\r\nfunction App() {\r\n  const loggedIn = useState(isLoggedIn);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"flex\">\r\n        <h1 className=\"mb-4\">Twitch Clip Queue</h1>\r\n        <div className=\"flex-grow\"></div>\r\n        <div>\r\n          {loggedIn.get() ? (\r\n            <Button onClick={async () => await logOut()}>Logout</Button>\r\n          ) : (\r\n            <Button\r\n              onClick={() => TwitchAuth.redirectToLogin()}\r\n            >\r\n              Login with Twitch\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </header>\r\n      <Suspense fallback={<div></div>}>\r\n        <Router basename={process.env.REACT_APP_BASEPATH}>\r\n          <Switch>\r\n            <Route exact={true} path=\"/\">\r\n              {!loggedIn.get() ? <HomePage /> : <QueuePage />}\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Redirect to=\"/\" />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </Suspense>\r\n      <div className=\"flex-grow\"></div>\r\n      <footer className=\"text-xs mt-4\">\r\n        Created by{' '}\r\n        <span className=\"font-bold\">\r\n          <a href=\"https://github.com/JakeMiki\" target=\"_blank\" rel=\"noreferrer\">\r\n            JakeMiki\r\n          </a>\r\n        </span>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport TwitchAuth from \"./services/TwitchAuth\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nTwitchAuth.processAuth();\r\n","import { createState, none } from '@hookstate/core';\nimport { trace } from '../common/analytics';\nimport { Clip, ClipSubmitter } from '../models';\nimport { createPersistentState, same } from './helpers';\n\nexport const currentClip = createState({} as Clip);\nexport const clipQueue = createPersistentState('clipQueue', [] as Clip[]);\nexport const clipMemory = createPersistentState('clipMemory', [] as Clip[]);\nexport const acceptingClips = createState(false);\n\nexport const addClip = (clip: Clip): void => {\n  const queuedState = clipQueue.find((c) => same(c.get(), clip));\n  const queued = queuedState?.get();\n\n  if (queued) {\n    const sameSubmitter =\n      queued.submitter?.userName === clip.submitter?.userName ||\n      (queued.submitters?.find((s) => s.userName === clip.submitter?.userName) ?? false);\n\n    if (!sameSubmitter) {\n      queuedState?.submitters.set((submitters) => [...(submitters ?? []), clip.submitter as ClipSubmitter]);\n      clipQueue.set((queue) => queue.sort((a, b) => (b.submitters?.length ?? 0) - (a.submitters?.length ?? 0)));\n    }\n\n    return;\n  } else if (getMemorizedClip(clip)) {\n    return;\n  }\n\n  clipMemory.set((memory) => [...(memory ?? []), clip]);\n  clipQueue.set((queue) => [...(queue ?? []), clip]);\n\n  trace('clip-added');\n};\n\nexport const nextClip = (): void => {\n  currentClip.set(JSON.parse(JSON.stringify(clipQueue[0]?.get() ?? {})));\n  clipQueue[0].set(none);\n\n  trace('next-clip');\n};\n\nexport const getMemorizedClip = (clip: Clip): Clip | undefined => {\n  const memory = clipMemory.find((c) => same(c.get(), clip));\n  return memory?.get();\n};\n\nexport const getQueuedClip = (clip: Clip): Clip | undefined => {\n  const queue = clipQueue.find((c) => same(c.get(), clip));\n  return queue?.get();\n};\n\nexport const selectCurrentClip = (clip: Clip): void => {\n  const queued = getQueuedClip(clip);\n  if (queued) {\n    currentClip.set(queued);\n    removeClip(queued);\n  }\n};\n\nexport const removeClip = (clip: Clip): void => {\n  const index = clipQueue.findIndex((c) => same(c.get(), clip));\n  clipQueue[index].set(none);\n};\n\nexport const clearQueue = (): void => {\n  clipQueue.set([]);\n  currentClip.set({});\n\n  trace('clear-queue');\n};\n\nexport const clearMemory = (): void => {\n  clipMemory.set([...(clipQueue.get() ?? [])]);\n\n  trace('purge-memory');\n};\n\nexport const acceptClips = (accept: boolean): void => {\n  acceptingClips.set(accept);\n\n  trace(`accept-clips-${accept}`);\n};\n","import { createState, State } from '@hookstate/core';\r\nimport { Persistence } from '@hookstate/persistence';\r\nimport { Clip } from '../models';\r\n\r\nexport function createPersistentState<TState>(\r\n  name: string,\r\n  initialValue: TState\r\n): State<TState> {\r\n  const state = createState(initialValue);\r\n  state.attach(Persistence(name))\r\n  return state;\r\n}\r\n\r\nexport function same(a: Clip, b: Clip) {\r\n  return a.id === b.id && a.provider === b.provider;\r\n}\r\n","import { createLogger } from \"./logging\";\n\nconst logger = createLogger('Umami Event');\n\nconst umami = (window as any).umami;\nconst eventQueue: { type: string; value: string; }[] = [];\n\nexport function trace(value: string, type = 'custom') {\n  logger.debug(`${type}: ${value}`);\n\n  try {\n    eventQueue.push({ type, value });\n\n    if (umami) {\n      let e;\n\n      // eslint-disable-next-line\n      while (e = eventQueue.shift()) {\n        umami.trackEvent(e.value, e.type);\n      }\n    }\n  } catch {}\n}\n","import axios from 'axios';\r\nimport { AuthInfo, IdToken } from '../models';\r\nimport { logIn } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\nconst TWITCH_REDIRECT_URI = process.env.REACT_APP_TWITCH_REDIRECT_URI;\r\n\r\nconst getLoginUrl = (): string => {\r\n  return encodeURI(\r\n    `https://id.twitch.tv/oauth2/authorize?client_id=${TWITCH_CLIENT_ID}` +\r\n      `&redirect_uri=${TWITCH_REDIRECT_URI}` +\r\n      `&response_type=token id_token` +\r\n      `&scope=openid chat:read` +\r\n      `&claims={\"id_token\":{\"preferred_username\":null}}`\r\n  );\r\n};\r\n\r\nconst redirectToLogin = (): void => {\r\n  window.location.assign(getLoginUrl());\r\n};\r\n\r\nconst processAuth = (): void => {\r\n  if (!window.location.hash) {\r\n    return;\r\n  }\r\n\r\n  const authInfo = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce((authInfo, s) => {\r\n      const parts = s.split('=');\r\n      authInfo[parts[0]] = decodeURIComponent(decodeURIComponent(parts[1]));\r\n      return authInfo;\r\n    }, {} as Record<string, any>) as AuthInfo;\r\n\r\n  window.location.hash = '';\r\n\r\n  if (authInfo.access_token && authInfo.id_token) {\r\n    authInfo.decodedIdToken = parseJwt(authInfo.id_token) as IdToken;\r\n\r\n    logIn(authInfo.access_token, authInfo.id_token, authInfo.decodedIdToken?.preferred_username ?? '');\r\n  }\r\n};\r\n\r\nconst revokeToken = async (token: string): Promise<void> => {\r\n  await axios.post(`https://id.twitch.tv/oauth2/revoke?client_id=${TWITCH_CLIENT_ID}&token=${token}`);\r\n};\r\n\r\nfunction parseJwt(token: string) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n\r\n  return JSON.parse(jsonPayload);\r\n}\r\n\r\nconst TwitchAuth = {\r\n  getLoginUrl,\r\n  redirectToLogin,\r\n  processAuth,\r\n  revokeToken,\r\n};\r\n\r\nexport default TwitchAuth;\r\n","\nenum LogLevel {\n  debug = 0,\n  info,\n  warn,\n  error,\n};\n\ntype LogLevels = keyof typeof LogLevel;\n\ntype LoggingFunction = (message: any, ...data: any[]) => void;\ninterface Logger {\n  debug: LoggingFunction;\n  info: LoggingFunction;\n  warn: LoggingFunction;\n  error: LoggingFunction;\n}\n\nlet globalLogLevel: LogLevel;\n\nconst setLogLevel = (level: LogLevels) => globalLogLevel = LogLevel[level] ?? LogLevel.info;\n\nclass ConsoleLogger implements Logger {\n  constructor(private name: string) {}\n\n  public debug(message: any, ...data: any[]): void {\n    this.log(LogLevel.debug, message, ...data);\n  }\n\n  public info(message: any, ...data: any[]): void {\n    this.log(LogLevel.info, message, ...data);\n  }\n\n  public warn(message: any, ...data: any[]): void {\n    this.log(LogLevel.warn, message, ...data);\n  }\n\n  public error(message: any, ...data: any[]): void {\n    this.log(LogLevel.error, message, ...data);\n  }\n\n  protected log(level: LogLevel, message: any, ...data: any[]): void {\n    if (level < globalLogLevel) {\n      return;\n    }\n\n    const messageWithName = `[${this.name}] ${message}`;\n\n    switch (level) {\n      case LogLevel.debug:\n        console.debug(messageWithName, ...data);\n        break;\n      case LogLevel.info:\n        console.info(messageWithName, ...data);\n        break;\n      case LogLevel.warn:\n        console.warn(messageWithName, ...data);\n        break;\n      case LogLevel.error:\n        console.error(messageWithName, ...data);\n        break;\n    }\n  }\n}\n\nsetLogLevel((process.env.REACT_APP_LOG_LEVEL) as LogLevels);\n(window as any).__setLogLevel = setLogLevel;\n\nexport function createLogger(name: string): Logger {\n  return new ConsoleLogger(name);\n}\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import { createLogger } from '../common/logging';\nimport { acceptingClips, addClip, clipQueue, removeClip } from '../store/queue';\nimport { accessToken, userChannel, userName } from '../store/user';\nimport { Client, Userstate } from 'tmi.js';\nimport ClipFinder from './ClipFinder';\nimport { none } from '@hookstate/core';\n\nconst logger = createLogger('Twitch Chat');\n\nlet client: Client;\n\nconst getUrlFromMessage = (message: string) => {\n\n  const urlStart = message.indexOf('http');\n  if (urlStart >= 0) {\n    const urlEnd = message.indexOf(' ', urlStart);\n    const url = message.slice(urlStart, urlEnd > 0 ? urlEnd : undefined);\n    return url;\n  }\n\n  return undefined;\n};\n\nconst handleMessage = (userstate: Userstate, message: string) => {\n  if (!acceptingClips.get()) {\n    return;\n  }\n\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessage] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        clip.url = url;\n        clip.submitter = {\n          userName: userstate.username,\n          displayName: userstate['display-name']\n        };\n        addClip(clip);\n      }\n    });\n  }\n};\n\nconst handleMessageDeleted = (message: string) => {\n  const url = getUrlFromMessage(message);\n\n  if (url) {\n    logger.debug('[handleMessageDeleted] Found url:', url);\n\n    ClipFinder.findByUrl(url).then((clip) => {\n      if (clip) {\n        removeClip(clip);\n      }\n    });\n  }\n}\n\nconst handleTimeout = (username: string) => {\n  const clipsFromUser = clipQueue.filter((clip) => clip.submitter.get()?.userName === username || clip.submitters.get()?.some(s => s.userName === username));\n\n  clipsFromUser.forEach(clip => {\n    if (clip.submitter.get()?.userName === username) {\n      if (!clip.submitters.get()?.length) {\n        clip.set(none);\n      } else {\n        clip.submitter.set(clip.submitters.get()?.[0]);\n        clip.submitters.set(submitters => {\n          submitters?.shift();\n          return submitters;\n        })\n      }\n    } else {\n      clip.submitters.set(submitters => submitters?.filter(s => s.userName !== username));\n    }\n  });\n};\n\nconst connect = () => {\n  client = new Client({\n    options: {\n      debug: process.env.REACT_APP_LOG_LEVEL === 'debug',\n      skipUpdatingEmotesets: true,\n      skipMembership: true,\n    } as any,\n    logger: {\n      error: logger.error.bind(logger),\n      info: logger.info.bind(logger),\n      warn: logger.warn.bind(logger),\n    },\n    identity: {\n      username: userName.get() as string,\n      password: `oauth:${accessToken.get()}`,\n    },\n    connection: {\n      reconnect: true,\n      secure: true,\n    },\n  });\n\n  logger.info('Connecting and authenticating...');\n  client\n    .connect()\n    .then(() => {\n      logger.info('Connected.');\n      joinChannel(userChannel.get() as string);\n    })\n    .catch(logger.error.bind(logger));\n\n  client.on('disconnected', (reason) => logger.info('Disconnected:', reason));\n  client.on('message', (_channel, userstate, message, self) => self || handleMessage(userstate, message));\n  client.on('messagedeleted', (_channel, _username, message) => handleMessageDeleted(message));\n  client.on('timeout', (_channel, username) => handleTimeout(username))\n};\n\nconst disconnect = async () => {\n  await client?.disconnect();\n};\n\nconst joinChannel = async (channel: string) => {\n  logger.info('Joining channel', channel);\n  await client.join(channel.toLowerCase());\n};\n\nconst leaveChannel = async (channel: string) => {\n  logger.info('Leaving channel', channel);\n  await client.part(channel.toLowerCase());\n};\n\nconst TwitchChat = {\n  connect,\n  disconnect,\n  joinChannel,\n  leaveChannel,\n};\n\nexport default TwitchChat;\n","import axios from 'axios';\r\nimport { TwitchClip, TwitchGame, TwitchVideo } from '../models';\r\nimport { accessToken } from '../store/user';\r\n\r\nconst TWITCH_CLIENT_ID = process.env.REACT_APP_TWITCH_CLIENT_ID;\r\n\r\nconst TwitchApiClient = axios.create({\r\n  baseURL: 'https://api.twitch.tv/helix/',\r\n  headers: {\r\n    'Client-ID': TWITCH_CLIENT_ID,\r\n  },\r\n});\r\n\r\nconst getClip = async (id: string): Promise<TwitchClip> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchClip[] }>(`clips?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getVideo = async (id: string): Promise<TwitchVideo> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchVideo[] }>(`videos?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst getGame = async (id: string): Promise<TwitchGame> => {\r\n  const { data } = await TwitchApiClient.get<{ data: TwitchGame[] }>(`games?id=${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken.get()}`,\r\n    },\r\n  });\r\n\r\n  return data.data[0];\r\n};\r\n\r\nconst TwitchApi = {\r\n  getClip,\r\n  getVideo,\r\n  getGame,\r\n};\r\n\r\nexport default TwitchApi;\r\n","import TwitchApi from \"../services/TwitchApi\";\r\nimport { createPersistentState } from \"./helpers\";\r\n\r\nconst gamesDictionary = createPersistentState('gamesDictionary', {} as Record<string, string>);\r\n\r\nexport const getGameName = async (id: string): Promise<string> => {\r\n  const dict = gamesDictionary.get();\r\n  if (dict[id]) {\r\n    return dict[id];\r\n  }\r\n\r\n  const game = await TwitchApi.getGame(id);\r\n\r\n  if (game) {\r\n    gamesDictionary.set(d => ({ ...d, [id]: game.name }));\r\n    return game.name;\r\n  }\r\n\r\n  return '';\r\n};\r\n","import { Clip, Provider } from '../../models';\r\nimport { getGameName } from '../../store/dictionaries';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'clips.twitch.tv') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/clip/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-clip',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getClip(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.broadcaster_name,\r\n        game: await getGameName(clipInfo.game_id),\r\n        provider: 'twitch-clip',\r\n        thumbnailUrl: clipInfo.thumbnail_url,\r\n        title: clipInfo.title,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchClipProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchClipProvider;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport TwitchApi from '../TwitchApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname.endsWith('twitch.tv')) {\r\n    if (uri.pathname.includes('/videos/')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    const idStart = uri.pathname.lastIndexOf('/');\r\n    const id = uri.pathname.slice(idStart).split('?')[0].slice(1);\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'twitch-vod',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await TwitchApi.getVideo(id);\r\n\r\n    if (clipInfo) {\r\n      return {\r\n        id,\r\n        channel: clipInfo.user_name,\r\n        provider: 'twitch-vod',\r\n        thumbnailUrl: clipInfo.thumbnail_url.replace('%{width}x%{height}', '480x272'),\r\n        title: clipInfo.title,\r\n        startTime: uri.searchParams.get('t') ?? undefined,\r\n      };\r\n    }\r\n  } catch {}\r\n};\r\n\r\nconst TwitchVodProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default TwitchVodProvider;\r\n","import axios from 'axios';\r\n\r\nconst getClip = async (id: string): Promise<any> => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://www.youtube.com/oembed?format=json&url=https://www.youtube.com/watch?v=${id}`\r\n    );\r\n    return data;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst YoutubeApi = {\r\n  getClip,\r\n};\r\n\r\nexport default YoutubeApi;\r\n","import { Clip, Provider } from '../../models';\r\nimport { getMemorizedClip } from '../../store/queue';\r\nimport YoutubeApi from '../YoutubeApi';\r\n\r\nconst canHandle = (url: string): boolean => {\r\n  const uri = new URL(url);\r\n  if (uri.hostname === 'youtu.be') {\r\n    return true;\r\n  }\r\n\r\n  if (uri.hostname.endsWith('youtube.com')) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst tryGetClip = async (url: string): Promise<Clip | undefined> => {\r\n  try {\r\n    const uri = new URL(url);\r\n    if (!canHandle(url)) {\r\n      return;\r\n    }\r\n\r\n    let id: string | undefined = undefined;\r\n    if (uri.hostname === 'youtu.be') {\r\n      const idStart = uri.pathname.lastIndexOf('/') + 1;\r\n      id = uri.pathname.slice(idStart).split('?')[0];\r\n    } else if (uri.hostname.endsWith('youtube.com')) {\r\n      id = uri.searchParams.get('v') ?? undefined;\r\n    }\r\n\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    const startTime = uri.searchParams.get('t') ?? undefined;\r\n\r\n    const fromMemory = getMemorizedClip({\r\n      provider: 'youtube',\r\n      id,\r\n    });\r\n\r\n    if (fromMemory) {\r\n      return { ...fromMemory };\r\n    }\r\n\r\n    const clipInfo = await YoutubeApi.getClip(id);\r\n\r\n    return {\r\n      id,\r\n      channel: clipInfo?.author_name ?? 'YouTube',\r\n      thumbnailUrl: clipInfo?.thumbnail_url ?? `https://i.ytimg.com/vi/${id}/hqdefault.jpg`,\r\n      provider: 'youtube',\r\n      title: clipInfo?.title ?? id,\r\n      startTime,\r\n    };\r\n  } catch {}\r\n};\r\n\r\nconst YouTubeProvider: Provider = {\r\n  canHandle,\r\n  tryGetClip,\r\n};\r\n\r\nexport default YouTubeProvider;\r\n","import { Clip } from '../models';\r\nimport TwitchClipProvider from './providers/twitch-clip';\r\nimport TwitchVodProvider from './providers/twitch-vod';\r\nimport YouTubeProvider from './providers/youtube';\r\n\r\nconst providers = [TwitchClipProvider, TwitchVodProvider, YouTubeProvider];\r\n\r\nconst findByUrl = async (url: string): Promise<Clip | undefined> => {\r\n  for (const provider of providers) {\r\n    if (!provider.canHandle(url)) {\r\n      continue;\r\n    }\r\n\r\n    const clip = await provider.tryGetClip(url);\r\n\r\n    if (clip) {\r\n      return clip;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst ClipFinder = {\r\n  findByUrl,\r\n};\r\n\r\nexport default ClipFinder;\r\n","import { createState } from \"@hookstate/core\";\nimport { trace } from \"../common/analytics\";\nimport TwitchAuth from \"../services/TwitchAuth\";\nimport TwitchChat from \"../services/TwitchChat\";\nimport { createPersistentState } from \"./helpers\";\n\nexport const isLoggedIn = createState<boolean>(false);\n\nexport const accessToken = createState<string | null>(null);\nexport const idToken = createState<string | null>(null);\n\nexport const userName = createState<string | null>(null);\nexport const userChannel = createPersistentState<string | null>('userChannel', null);\n\nexport const logIn = (auth: string, id: string, username: string): void => {\n  accessToken.set(auth);\n  idToken.set(id);\n  userName.set(username);\n\n  if (!userChannel.get()) {\n    userChannel.set(username);\n  }\n\n  isLoggedIn.set(true);\n\n  trace('user-logged-in');\n}\n\nexport const logOut = async (): Promise<void> => {\n  const token = accessToken.get();\n  accessToken.set(null);\n  idToken.set(null);\n  userName.set(null);\n  isLoggedIn.set(false);\n\n  if (token) {\n    await TwitchAuth.revokeToken(token);\n  }\n\n  trace('user-logged-out');\n}\n\nexport const changeChannel = (channel: string) => {\n  TwitchChat.leaveChannel(userChannel.get() as string);\n  userChannel.set(channel);\n  TwitchChat.joinChannel(channel);\n\n  trace('channel-changed');\n};\n"],"sourceRoot":""}