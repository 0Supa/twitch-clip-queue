{"version":3,"sources":["components/Button.tsx","components/Logos.tsx","pages/Header.tsx","pages/Page.tsx","components/Toggle.tsx","pages/Queue/ClipCard.tsx","pages/Queue/ClipRoll.tsx","pages/Queue/Player.tsx","pages/Queue/QueuePage.tsx"],"names":["addButtonColour","colour","classes","Button","className","children","onClick","props","GitHubLogo","href","size","target","rel","viewBox","width","height","fill","fillRule","d","TwitchLogo","x","y","Header","loggedIn","useState","isLoggedIn","get","a","logOut","TwitchAuth","redirectToLogin","Page","fullWidth","klass","Toggle","pressed","ClipCard","clip","thumbnailUrl","id","provider","url","title","game","submitter","submitters","channel","submitterCount","length","src","alt","selectCurrentClip","displayName","userName","removeClip","ClipRoll","clips","isAcceptingClips","acceptingClips","slice","map","PlayerSwitch","useReactPlayer","onEnded","videoUrl","ReactPlayer","canPlay","controls","playing","undefined","window","location","hostname","allowFullScreen","startTime","Player","timestamp","reloadClip","formatDistanceToNow","parseISO","QueuePage","advancedVisible","setAdvancedVisible","useHookState","clipQueue","clipMem","clipMemory","current","currentClip","token","accessToken","name","userChannel","softLimit","softClipLimit","autoplayEnabled","autoplay","reactPlayer","limitReached","softClipCount","statusText","useEffect","TwitchChat","connect","disconnect","delayedNextClip","hash","nextClip","toggleAutoplay","acceptClips","newChannel","prompt","changeChannel","newLimit","toString","Number","isInteger","setSoftClipLimit","message","getUrlFromMessage","ClipFinder","findByUrl","then","Date","now","addClip","clearQueue","clearMemory"],"mappings":"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","file":"static/js/5.6683bb6e.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<any> {\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nexport const addButtonColour = (colour: string | undefined, classes: string | undefined) => {\r\n  classes = (classes || '') + ' ';\r\n\r\n  switch (colour) {\r\n    case 'red':\r\n      return classes + 'bg-red-500 border-red-700 hover:bg-red-400 hover:border-red-500';\r\n    case 'green':\r\n      return classes + 'bg-green-500 border-green-700 hover:bg-green-400 hover:border-green-500';\r\n    case 'yellow':\r\n      return classes + 'bg-yellow-500 border-yellow-700 hover:bg-yellow-400 hover:border-yellow-500';\r\n  }\r\n\r\n  return classes + 'bg-purple-500 border-purple-700 hover:bg-purple-400 hover:border-purple-500';\r\n};\r\n\r\nfunction Button({ className, colour, children, onClick, ...props }: ButtonProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { ReactNode } from 'react';\n\ninterface LogoProps {\n  href: string;\n  className?: string;\n  size?: number;\n  children?: ReactNode | undefined;\n}\n\nexport function GitHubLogo({ href, className, size = 20, children }: LogoProps) {\n  return (\n    <div className={className}>\n      <a href={href} target=\"_blank\" rel=\"noreferrer\" className=\"block no-underline hover:underline\">\n        <svg viewBox=\"0 0 16 16\" width={size} height={size} className=\"inline-block\">\n          <path\n            fill=\"white\"\n            fillRule=\"evenodd\"\n            d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\n          ></path>\n        </svg>{' '}\n        {children}\n      </a>\n    </div>\n  );\n}\n\nexport function TwitchLogo({ href, className, size = 20, children }: LogoProps) {\n  return (\n    <div className={className}>\n      <a href={href} target=\"_blank\" rel=\"noreferrer\" className=\"block no-underline hover:underline\">\n        <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 2400 2800\" width={size} height={size} className=\"inline-block\">\n          <g fill=\"white\">\n            <path d=\"M500,0L0,500v1800h600v500l500-500h400l900-900V0H500z M2200,1300l-400,400h-400l-350,350v-350H600V200h1600 V1300z\" />\n            <rect x=\"1700\" y=\"550\" width=\"200\" height=\"600\" />\n            <rect x=\"1150\" y=\"550\" width=\"200\" height=\"600\" />\n          </g>\n        </svg>{' '}\n        {children}\n      </a>\n    </div>\n  );\n}\n","import { useState } from '@hookstate/core';\nimport Button from '../components/Button';\nimport { GitHubLogo, TwitchLogo } from '../components/Logos';\nimport TwitchAuth from '../services/TwitchAuth';\nimport { isLoggedIn, logOut } from '../store/user';\n\nfunction Header() {\n  const loggedIn = useState(isLoggedIn);\n\n  return (\n    <header className=\"flex mb-4 px-16 py-2 bg-gray-800\">\n      <h1>Twitch Clip Queue</h1>\n      {loggedIn.get() && (\n        <div className=\"ml-8 pb-1 flex text-sm items-end\">\n          by\n          <GitHubLogo className=\"ml-2 mr-1\" size={16} href=\"https://github.com/JakeMiki\">\n            JakeMiki\n          </GitHubLogo>\n          /\n          <TwitchLogo className=\"ml-1\" size={16} href=\"https://twitch.tv/SirMuffin9\">\n            SirMuffin9\n          </TwitchLogo>\n        </div>\n      )}\n      <div className=\"flex-grow\"></div>\n      <div>\n        {loggedIn.get() ? (\n          <Button onClick={async () => await logOut()}>Logout</Button>\n        ) : (\n          <Button onClick={() => TwitchAuth.redirectToLogin()}>Login with Twitch</Button>\n        )}\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport Header from './Header';\n\ninterface PageProps {\n  fullWidth?: boolean;\n\n  children?: ReactNode | undefined;\n}\n\nfunction Page({ children, fullWidth = false }: PageProps) {\n  const klass = fullWidth ? 'w-full px-16' : 'lg:container lg:mx-auto';\n  return (\n    <>\n      <Header />\n      <div className={klass}>{children}</div>\n    </>\n  );\n}\n\nexport default Page;\n","import React, { ButtonHTMLAttributes, ReactNode } from 'react';\r\nimport { addButtonColour } from './Button';\r\n\r\ninterface ToggleProps extends ButtonHTMLAttributes<any> {\r\n  pressed: boolean;\r\n  className?: string;\r\n  colour?: string;\r\n  children?: ReactNode | undefined;\r\n\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Toggle({ pressed, className, colour, children, onClick, ...props }: ToggleProps) {\r\n  let classes = addButtonColour(colour, className);\r\n\r\n  if (pressed) {\r\n    classes += ' pressed';\r\n  }\r\n\r\n  return (\r\n    <button {...props} className={classes} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Toggle;\r\n","import React from 'react';\nimport Button from '../../components/Button';\nimport { Clip } from '../../models';\nimport { removeClip, selectCurrentClip } from '../../store/queue';\n\nexport interface ClipCardProps {\n  clip: Clip;\n}\n\nfunction ClipCard({ clip }: ClipCardProps) {\n  const { thumbnailUrl, id, provider, url, title, game, submitter, submitters, channel } = clip;\n  const submitterCount = submitters?.length ?? 0;\n  return (\n    <div className={'clip max-w-sm rounded overflow-hidden flex flex-col '}>\n      {thumbnailUrl && <img className=\"w-full cursor-pointer\" src={thumbnailUrl} alt={title} onClick={() => selectCurrentClip({ id, provider })}/>}\n      <div className=\"h-full w-full relative\">\n        <div className=\"px-2 py-1 \">\n          <h4 className=\"font-bold text-sm mb-1 w-full overflow-hidden whitespace-nowrap overflow-ellipsis\">\n            <a className=\"text-black no-underline\" href={url} target=\"_blank\" rel=\"noreferrer\">\n              {title}\n            </a>\n          </h4>\n          <p className=\"text-gray-900 text-xs mb-1 font-normal\">\n            <span className=\"font-bold\">{channel} </span>\n            {game && (\n              <span>\n                playing&nbsp;<span className=\"font-bold\">{game}</span>\n              </span>\n            )}\n          </p>\n          <p className=\"text-gray-900 text-xs font-normal\">\n            {submitter && (\n              <>\n                Submitted by <span className=\"font-bold\">{submitter.displayName ?? submitter.userName}</span>\n              </>\n            )}\n            <span className=\"text-xs\">{submitterCount > 0 && ' +' + submitterCount}</span>\n          </p>\n        </div>\n        <div className=\"absolute flex right-1 bottom-1 clip-buttons space-x-1\">\n          <Button colour=\"green\" onClick={() => selectCurrentClip({ id, provider })}>\n            &raquo;\n          </Button>\n          <Button colour=\"red\" onClick={() => removeClip({ id, provider })}>\n            &times;\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ClipCard;\n","import React from 'react';\nimport { Clip } from '../../models';\nimport ClipCard from './ClipCard';\nimport { useState } from '@hookstate/core';\nimport { acceptingClips } from '../../store/queue';\n\nexport interface ClipRollProps {\n  clips: Clip[];\n  clipLimit?: number;\n}\n\nfunction ClipRoll({ clips }: ClipRollProps) {\n  const isAcceptingClips = useState(acceptingClips).get();\n\n  return (\n    <div className=\"w-full overflow-y-scroll h-full\">\n      {!clips.length && (\n        <strong>No clips in queue. {isAcceptingClips && <>Send some in chat!</>}</strong>\n      )}\n      {clips.slice(0, 100).map((clip) => (\n        <div key={`${clip.provider}_${clip.id}`} className=\"mb-4\">\n          <ClipCard clip={clip} />\n        </div>\n      ))}\n      <div className=\"mb-16\"></div>\n    </div>\n  );\n}\n\nexport default ClipRoll;\n","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport { formatDistanceToNow, parseISO } from 'date-fns';\nimport { Clip } from '../../models';\nimport { CommonProps } from '../../common/props';\nimport { reloadClip } from '../../store/queue';\n\nexport interface PlayerProps extends CommonProps {\n  clip: Clip;\n  useReactPlayer?: boolean;\n  onEnded?: () => void;\n}\n\nfunction Player(props: PlayerProps) {\n  const {\n    clip: { channel, title, timestamp, startTime, game, submitter, submitters, url },\n  } = props;\n  const submitterCount = submitters?.length ?? 0;\n\n  return (\n    <>\n      <div className=\"player player-container\">\n        <PlayerSwitch {...props} />\n      </div>\n      <div className=\"player-title-container\">\n        <h2 className=\"font-bold mb-1\">\n          {title ?? <>&nbsp;</>}\n          {startTime && (\n            <small className=\"text-gray-700\">\n              {' ('}start at{' '}\n              <span className=\"cursor-pointer underline\" onClick={() => reloadClip()}>\n                {startTime}\n              </span>\n              {')'}\n            </small>\n          )}\n          {url && (\n            <span>\n              &nbsp;\n              <sup>\n                <a\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"text-gray-700 no-underline hover:text-gray-200\"\n                >\n                  &#x1F5D7;\n                </a>\n              </sup>\n            </span>\n          )}\n        </h2>\n        <p className=\"text-gray-500 text-sm font-normal\">\n          {channel ? (\n            <>\n              <span className=\"font-bold\">{channel}</span>\n              {game && (\n                <span>\n                  &nbsp;playing&nbsp;<span className=\"font-bold\">{game}</span>\n                </span>\n              )}\n              , submitted by <span className=\"font-bold\">{submitter?.displayName ?? submitter?.userName}</span>\n              {submitterCount > 0 && <span> and {submitterCount} other(s)</span>}\n              {timestamp && <span>, created {formatDistanceToNow(parseISO(timestamp))} ago</span>}\n            </>\n          ) : (\n            <>&nbsp;</>\n          )}\n        </p>\n      </div>\n    </>\n  );\n}\n\nfunction PlayerSwitch({ clip, useReactPlayer, onEnded }: PlayerProps) {\n  if (useReactPlayer) {\n    const url = clip.videoUrl ?? clip.url;\n    if (url && ReactPlayer.canPlay(url)) {\n      return <ReactPlayer url={url} height=\"100%\" width=\"100%\" className=\"player\" controls playing onEnded={onEnded} />;\n    }\n  }\n\n  switch (clip.provider) {\n    case undefined:\n      return <></>;\n    case 'twitch-clip':\n      return (\n        <iframe\n          src={`https://clips.twitch.tv/embed?clip=${clip.id}&autoplay=true&parent=${window.location.hostname}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n    case 'twitch-vod':\n      return (\n        <iframe\n          src={`https://player.twitch.tv/?video=${clip.id}&autoplay=true&parent=${window.location.hostname}&time=${clip.startTime}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n    case 'youtube':\n      return (\n        <iframe\n          src={`https://www.youtube.com/embed/${clip.id}?autoplay=1&start=${clip.startTime ?? ''}`}\n          height=\"100%\"\n          width=\"100%\"\n          className=\"player\"\n          allowFullScreen={true}\n          title={clip.title}\n        ></iframe>\n      );\n  }\n\n  return <span>Provider not supported: {clip.provider}</span>;\n}\n\nexport default Player;\n","import React, { useEffect, useState } from 'react';\r\nimport { useState as useHookState } from '@hookstate/core';\r\nimport Button from '../../components/Button';\r\nimport Toggle from '../../components/Toggle';\r\nimport ClipFinder from '../../services/ClipFinder';\r\nimport TwitchChat from '../../services/TwitchChat';\r\nimport {\r\n  acceptClips,\r\n  acceptingClips,\r\n  addClip,\r\n  autoplay,\r\n  clearMemory,\r\n  clearQueue,\r\n  clipMemory,\r\n  clipQueue,\r\n  currentClip,\r\n  delayedNextClip,\r\n  nextClip,\r\n  reloadClip,\r\n  setSoftClipLimit,\r\n  softClipCount,\r\n  softClipLimit,\r\n  toggleAutoplay,\r\n  useReactPlayer,\r\n} from '../../store/queue';\r\nimport { accessToken, changeChannel, userChannel, userName } from '../../store/user';\r\nimport ClipRoll from './ClipRoll';\r\nimport Player from './Player';\r\nimport './styles.css';\r\nimport Page from '../Page';\r\nimport { getUrlFromMessage } from '../../common/utils';\r\n\r\nfunction QueuePage() {\r\n  const [advancedVisible, setAdvancedVisible] = useState(false);\r\n\r\n  const isAcceptingClips = useHookState(acceptingClips).get();\r\n  const clips = useHookState(clipQueue).get();\r\n  const clipMem = useHookState(clipMemory).get();\r\n  const current = useHookState(currentClip).get();\r\n\r\n  const token = useHookState(accessToken).get();\r\n  const name = useHookState(userName).get();\r\n  const channel = useHookState(userChannel).get();\r\n  const softLimit = useHookState(softClipLimit).get();\r\n  const autoplayEnabled = useHookState(autoplay).get();\r\n  const reactPlayer = useHookState(useReactPlayer).get();\r\n\r\n  const limitReached = useHookState(softClipCount).get() >= softLimit;\r\n\r\n  let statusText = 'Clip submissions are open. Send some clips in chat!';\r\n  if (!isAcceptingClips) {\r\n    statusText = 'Clip submissions are closed.';\r\n  } else if (softLimit > 0 && limitReached) {\r\n    statusText = 'Clip limit reached. Send clips queued by others to boost them to the top 👆';\r\n  }\r\n\r\n  useEffect(() => {\r\n    TwitchChat.connect();\r\n    return () => {\r\n      TwitchChat.disconnect();\r\n    };\r\n  }, [token]);\r\n\r\n  return (\r\n    <Page fullWidth={true}>\r\n      <div className=\"w-full queue-page\">\r\n        <Player\r\n          clip={current}\r\n          key={current.hash}\r\n          useReactPlayer={reactPlayer}\r\n          onEnded={() => autoplayEnabled && delayedNextClip()}\r\n        />\r\n        <div className=\"buttons-container relative\">\r\n          <div className=\"flex w-full items-start\">\r\n            <Button colour=\"green\" className=\"mr-2\" onClick={() => nextClip()}>\r\n              Next &raquo;\r\n            </Button>\r\n            <Toggle\r\n              pressed={autoplayEnabled}\r\n              colour=\"green\"\r\n              className=\"mr-2\"\r\n              onClick={() => toggleAutoplay(!autoplayEnabled)}\r\n            >\r\n              Autoplay is {autoplayEnabled ? <>on</> : <>off</>}\r\n            </Toggle>\r\n            {!!softLimit && (\r\n              <Button\r\n                colour=\"red\"\r\n                className=\"mr-2\"\r\n                onClick={() => nextClip(true)}\r\n                title=\"Skipping a clip opens up a slot for another clip to be posted if gates are still open\"\r\n              >\r\n                &times; Skip\r\n              </Button>\r\n            )}\r\n            <Toggle pressed={isAcceptingClips} className=\"mr-2\" onClick={() => acceptClips(!isAcceptingClips)}>\r\n              {isAcceptingClips ? <>Close the floodgates! 🌊</> : <>Open the floodgates! 🚪</>}\r\n            </Toggle>\r\n            <Toggle pressed={advancedVisible} onClick={() => setAdvancedVisible(!advancedVisible)}>\r\n              ⚙️\r\n            </Toggle>\r\n\r\n            <div className=\"ml-4 font-bold text-xl leading-loose\">{statusText}</div>\r\n          </div>\r\n          {advancedVisible && (\r\n            <div className=\"absolute flex items-start -top-20 pb-1 pt-7 bg-gray-900 bg-opacity-70\">\r\n              <Button\r\n                className=\"mr-2\"\r\n                title=\"Change channel to read clips from\"\r\n                onClick={() => {\r\n                  const newChannel = prompt('Enter channel to read chat from', channel as string);\r\n                  if (newChannel && newChannel !== channel) {\r\n                    changeChannel(newChannel);\r\n                  }\r\n                }}\r\n              >\r\n                Change channel <em>({channel})</em>\r\n              </Button>\r\n              <Button\r\n                className=\"mr-2\"\r\n                title=\"Soft clip limit - after set value no new clips are accepted, current clips can still be voted on\"\r\n                onClick={() => {\r\n                  const newLimit = prompt(\r\n                    'Set a soft limit after which no new clips will be accepted (0 to disable)',\r\n                    softLimit.toString()\r\n                  );\r\n                  if (newLimit !== null && Number.isInteger(+newLimit)) {\r\n                    setSoftClipLimit(+newLimit);\r\n                  }\r\n                }}\r\n              >\r\n                Clip limit <em>({softLimit})</em>\r\n              </Button>\r\n              <Button\r\n                className=\"mr-2\"\r\n                title=\"Add clip from url\"\r\n                onClick={() => {\r\n                  const message = prompt('Enter clip url', '');\r\n                  const url = getUrlFromMessage(message ?? '');\r\n                  if (url) {\r\n                    ClipFinder.findByUrl(url).then((clip) => {\r\n                      if (clip) {\r\n                        clip.hash = Date.now().toString();\r\n                        clip.url = url;\r\n                        clip.submitter = { userName: name ?? '', displayName: name ?? '' };\r\n                        addClip(clip);\r\n                      }\r\n                    });\r\n                  }\r\n                }}\r\n              >\r\n                + Add clip\r\n              </Button>\r\n              <Button className=\"mr-2\" title=\"Reload current clip\" onClick={() => reloadClip()}>\r\n                ♻️ Reload clip\r\n              </Button>\r\n              <Button className=\"mr-2\" onClick={() => clearQueue()} title=\"Clear current queue\">\r\n                &times; Clear queue <em>({clips.length})</em>\r\n              </Button>\r\n              <Button\r\n                onClick={() => clearMemory()}\r\n                title=\"Remove all clips from permanent memory, allow all clips to be queued again\"\r\n              >\r\n                &times; Purge memory <em>({clipMem.length})</em>\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"nextup-container\">\r\n          <div className=\"w-full flex border-b-2 mb-2 align-text-bottom\">\r\n            <h2>Next up</h2>\r\n            <div className=\"flex-grow\"></div>\r\n            <h2>{clips.length}</h2>\r\n          </div>\r\n          <ClipRoll clips={clips} />\r\n        </div>\r\n      </div>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default QueuePage;\r\n"],"sourceRoot":""}